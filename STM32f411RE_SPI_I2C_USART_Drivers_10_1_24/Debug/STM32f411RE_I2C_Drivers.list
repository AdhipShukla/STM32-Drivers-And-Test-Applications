
STM32f411RE_I2C_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800286c  0800286c  0001286c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002938  08002938  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002938  08002938  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002938  08002938  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002938  08002938  00012938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800293c  0800293c  0001293c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000640  20000088  080029c8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  080029c8  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001936  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000063d  00000000  00000000  00021a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00022070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000135  00000000  00000000  00022220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000026ec  00000000  00000000  00022355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000298f  00000000  00000000  00024a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b209  00000000  00000000  000273d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001118  00000000  00000000  000325dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000336f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002854 	.word	0x08002854

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08002854 	.word	0x08002854

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <GPIO_PeriClockControl>:
 * @return 			- none
 *
 * @Note			- none
********************************************************************/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnORDi){
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	460b      	mov	r3, r1
 800029a:	70fb      	strb	r3, [r7, #3]
	if(EnORDi == ENABLE){
 800029c:	78fb      	ldrb	r3, [r7, #3]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d141      	bne.n	8000326 <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a43      	ldr	r2, [pc, #268]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d106      	bne.n	80002b8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80002aa:	4b43      	ldr	r3, [pc, #268]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 80002ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ae:	4a42      	ldr	r2, [pc, #264]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 80002b6:	e077      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4a40      	ldr	r2, [pc, #256]	; (80003bc <GPIO_PeriClockControl+0x12c>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d106      	bne.n	80002ce <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002c0:	4b3d      	ldr	r3, [pc, #244]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c4:	4a3c      	ldr	r2, [pc, #240]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 80002c6:	f043 0302 	orr.w	r3, r3, #2
 80002ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002cc:	e06c      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC){
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a3b      	ldr	r2, [pc, #236]	; (80003c0 <GPIO_PeriClockControl+0x130>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d106      	bne.n	80002e4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002d6:	4b38      	ldr	r3, [pc, #224]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 80002d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002da:	4a37      	ldr	r2, [pc, #220]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 80002dc:	f043 0304 	orr.w	r3, r3, #4
 80002e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e2:	e061      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD){
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4a37      	ldr	r2, [pc, #220]	; (80003c4 <GPIO_PeriClockControl+0x134>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d106      	bne.n	80002fa <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002ec:	4b32      	ldr	r3, [pc, #200]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f0:	4a31      	ldr	r2, [pc, #196]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 80002f2:	f043 0308 	orr.w	r3, r3, #8
 80002f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f8:	e056      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE){
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a32      	ldr	r2, [pc, #200]	; (80003c8 <GPIO_PeriClockControl+0x138>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d106      	bne.n	8000310 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000302:	4b2d      	ldr	r3, [pc, #180]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 8000304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000306:	4a2c      	ldr	r2, [pc, #176]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 8000308:	f043 0310 	orr.w	r3, r3, #16
 800030c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800030e:	e04b      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOH){
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a2e      	ldr	r2, [pc, #184]	; (80003cc <GPIO_PeriClockControl+0x13c>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d147      	bne.n	80003a8 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000318:	4b27      	ldr	r3, [pc, #156]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 800031a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031c:	4a26      	ldr	r2, [pc, #152]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 800031e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000322:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000324:	e040      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA){
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a22      	ldr	r2, [pc, #136]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 800032e:	4b22      	ldr	r3, [pc, #136]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000332:	4a21      	ldr	r2, [pc, #132]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 8000334:	f023 0301 	bic.w	r3, r3, #1
 8000338:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033a:	e035      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB){
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a1f      	ldr	r2, [pc, #124]	; (80003bc <GPIO_PeriClockControl+0x12c>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d106      	bne.n	8000352 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000344:	4b1c      	ldr	r3, [pc, #112]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4a1b      	ldr	r2, [pc, #108]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 800034a:	f023 0302 	bic.w	r3, r3, #2
 800034e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000350:	e02a      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC){
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a1a      	ldr	r2, [pc, #104]	; (80003c0 <GPIO_PeriClockControl+0x130>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 800035c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035e:	4a16      	ldr	r2, [pc, #88]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 8000360:	f023 0304 	bic.w	r3, r3, #4
 8000364:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000366:	e01f      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a16      	ldr	r2, [pc, #88]	; (80003c4 <GPIO_PeriClockControl+0x134>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d106      	bne.n	800037e <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000374:	4a10      	ldr	r2, [pc, #64]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 8000376:	f023 0308 	bic.w	r3, r3, #8
 800037a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037c:	e014      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE){
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a11      	ldr	r2, [pc, #68]	; (80003c8 <GPIO_PeriClockControl+0x138>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038a:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 800038c:	f023 0310 	bic.w	r3, r3, #16
 8000390:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000392:	e009      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOH){
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <GPIO_PeriClockControl+0x13c>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d105      	bne.n	80003a8 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a0:	4a05      	ldr	r2, [pc, #20]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 80003a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	40020000 	.word	0x40020000
 80003b8:	40023800 	.word	0x40023800
 80003bc:	40020400 	.word	0x40020400
 80003c0:	40020800 	.word	0x40020800
 80003c4:	40020c00 	.word	0x40020c00
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40021c00 	.word	0x40021c00

080003d0 <GPIO_Init>:
 * @param[in]		-
 * @return 			- none
 *
 * @Note			- none
********************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	// Setting pin mode
	uint32_t temp =0;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE); //Enabling the clock peripheral inside init
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2101      	movs	r1, #1
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ff54 	bl	8000290 <GPIO_PeriClockControl>

	if(pGPIOHandle->GPIO_Config.GPIO_PinMode<=GPIO_MODE_ANALOG){
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	795b      	ldrb	r3, [r3, #5]
 80003ec:	2b03      	cmp	r3, #3
 80003ee:	d820      	bhi.n	8000432 <GPIO_Init+0x62>
		temp = (pGPIOHandle->GPIO_Config.GPIO_PinMode << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber));
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	795b      	ldrb	r3, [r3, #5]
 80003f4:	461a      	mov	r2, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	791b      	ldrb	r3, [r3, #4]
 80003fa:	005b      	lsls	r3, r3, #1
 80003fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000400:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber));
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	791b      	ldrb	r3, [r3, #4]
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	2103      	movs	r1, #3
 8000410:	fa01 f303 	lsl.w	r3, r1, r3
 8000414:	43db      	mvns	r3, r3
 8000416:	4619      	mov	r1, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	400a      	ands	r2, r1
 800041e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	6819      	ldr	r1, [r3, #0]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	430a      	orrs	r2, r1
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	e0c7      	b.n	80005c2 <GPIO_Init+0x1f2>
	}else{ //These are interrupt modes
		if(pGPIOHandle->GPIO_Config.GPIO_PinMode==GPIO_MODE_IT_FT){
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	795b      	ldrb	r3, [r3, #5]
 8000436:	2b04      	cmp	r3, #4
 8000438:	d123      	bne.n	8000482 <GPIO_Init+0xb2>
		//1. Configuring the FTSR
			EXTI->FTSR &= ~(0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 800043a:	4b4c      	ldr	r3, [pc, #304]	; (800056c <GPIO_Init+0x19c>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	7912      	ldrb	r2, [r2, #4]
 8000442:	4611      	mov	r1, r2
 8000444:	2201      	movs	r2, #1
 8000446:	408a      	lsls	r2, r1
 8000448:	43d2      	mvns	r2, r2
 800044a:	4611      	mov	r1, r2
 800044c:	4a47      	ldr	r2, [pc, #284]	; (800056c <GPIO_Init+0x19c>)
 800044e:	400b      	ands	r3, r1
 8000450:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 8000452:	4b46      	ldr	r3, [pc, #280]	; (800056c <GPIO_Init+0x19c>)
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	7912      	ldrb	r2, [r2, #4]
 800045a:	4611      	mov	r1, r2
 800045c:	2201      	movs	r2, #1
 800045e:	408a      	lsls	r2, r1
 8000460:	43d2      	mvns	r2, r2
 8000462:	4611      	mov	r1, r2
 8000464:	4a41      	ldr	r2, [pc, #260]	; (800056c <GPIO_Init+0x19c>)
 8000466:	400b      	ands	r3, r1
 8000468:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |=  (0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 800046a:	4b40      	ldr	r3, [pc, #256]	; (800056c <GPIO_Init+0x19c>)
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	7912      	ldrb	r2, [r2, #4]
 8000472:	4611      	mov	r1, r2
 8000474:	2201      	movs	r2, #1
 8000476:	408a      	lsls	r2, r1
 8000478:	4611      	mov	r1, r2
 800047a:	4a3c      	ldr	r2, [pc, #240]	; (800056c <GPIO_Init+0x19c>)
 800047c:	430b      	orrs	r3, r1
 800047e:	60d3      	str	r3, [r2, #12]
 8000480:	e041      	b.n	8000506 <GPIO_Init+0x136>
		}else if(pGPIOHandle->GPIO_Config.GPIO_PinMode==GPIO_MODE_IT_RT){
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	795b      	ldrb	r3, [r3, #5]
 8000486:	2b05      	cmp	r3, #5
 8000488:	d123      	bne.n	80004d2 <GPIO_Init+0x102>
		//1. Configuring the RTSR
			EXTI->FTSR &= ~(0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 800048a:	4b38      	ldr	r3, [pc, #224]	; (800056c <GPIO_Init+0x19c>)
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	7912      	ldrb	r2, [r2, #4]
 8000492:	4611      	mov	r1, r2
 8000494:	2201      	movs	r2, #1
 8000496:	408a      	lsls	r2, r1
 8000498:	43d2      	mvns	r2, r2
 800049a:	4611      	mov	r1, r2
 800049c:	4a33      	ldr	r2, [pc, #204]	; (800056c <GPIO_Init+0x19c>)
 800049e:	400b      	ands	r3, r1
 80004a0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 80004a2:	4b32      	ldr	r3, [pc, #200]	; (800056c <GPIO_Init+0x19c>)
 80004a4:	689b      	ldr	r3, [r3, #8]
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	7912      	ldrb	r2, [r2, #4]
 80004aa:	4611      	mov	r1, r2
 80004ac:	2201      	movs	r2, #1
 80004ae:	408a      	lsls	r2, r1
 80004b0:	43d2      	mvns	r2, r2
 80004b2:	4611      	mov	r1, r2
 80004b4:	4a2d      	ldr	r2, [pc, #180]	; (800056c <GPIO_Init+0x19c>)
 80004b6:	400b      	ands	r3, r1
 80004b8:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |=  (0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 80004ba:	4b2c      	ldr	r3, [pc, #176]	; (800056c <GPIO_Init+0x19c>)
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	7912      	ldrb	r2, [r2, #4]
 80004c2:	4611      	mov	r1, r2
 80004c4:	2201      	movs	r2, #1
 80004c6:	408a      	lsls	r2, r1
 80004c8:	4611      	mov	r1, r2
 80004ca:	4a28      	ldr	r2, [pc, #160]	; (800056c <GPIO_Init+0x19c>)
 80004cc:	430b      	orrs	r3, r1
 80004ce:	6093      	str	r3, [r2, #8]
 80004d0:	e019      	b.n	8000506 <GPIO_Init+0x136>
		}else if(pGPIOHandle->GPIO_Config.GPIO_PinMode==GPIO_MODE_IT_RFT){
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	795b      	ldrb	r3, [r3, #5]
 80004d6:	2b06      	cmp	r3, #6
 80004d8:	d115      	bne.n	8000506 <GPIO_Init+0x136>
		//1. Configuring the RFTS
			EXTI->RTSR |=  (0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 80004da:	4b24      	ldr	r3, [pc, #144]	; (800056c <GPIO_Init+0x19c>)
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	7912      	ldrb	r2, [r2, #4]
 80004e2:	4611      	mov	r1, r2
 80004e4:	2201      	movs	r2, #1
 80004e6:	408a      	lsls	r2, r1
 80004e8:	4611      	mov	r1, r2
 80004ea:	4a20      	ldr	r2, [pc, #128]	; (800056c <GPIO_Init+0x19c>)
 80004ec:	430b      	orrs	r3, r1
 80004ee:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |=  (0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <GPIO_Init+0x19c>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	7912      	ldrb	r2, [r2, #4]
 80004f8:	4611      	mov	r1, r2
 80004fa:	2201      	movs	r2, #1
 80004fc:	408a      	lsls	r2, r1
 80004fe:	4611      	mov	r1, r2
 8000500:	4a1a      	ldr	r2, [pc, #104]	; (800056c <GPIO_Init+0x19c>)
 8000502:	430b      	orrs	r3, r1
 8000504:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port. By default EXTI is configured to port A for every pin
		uint8_t temp1 = pGPIOHandle->GPIO_Config.GPIO_PinNumber/4;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	791b      	ldrb	r3, [r3, #4]
 800050a:	089b      	lsrs	r3, r3, #2
 800050c:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle->GPIO_Config.GPIO_PinNumber%4;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	791b      	ldrb	r3, [r3, #4]
 8000512:	f003 0303 	and.w	r3, r3, #3
 8000516:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a14      	ldr	r2, [pc, #80]	; (8000570 <GPIO_Init+0x1a0>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d032      	beq.n	8000588 <GPIO_Init+0x1b8>
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a13      	ldr	r2, [pc, #76]	; (8000574 <GPIO_Init+0x1a4>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d01d      	beq.n	8000568 <GPIO_Init+0x198>
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a11      	ldr	r2, [pc, #68]	; (8000578 <GPIO_Init+0x1a8>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d016      	beq.n	8000564 <GPIO_Init+0x194>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a10      	ldr	r2, [pc, #64]	; (800057c <GPIO_Init+0x1ac>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d00f      	beq.n	8000560 <GPIO_Init+0x190>
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <GPIO_Init+0x1b0>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d008      	beq.n	800055c <GPIO_Init+0x18c>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a0d      	ldr	r2, [pc, #52]	; (8000584 <GPIO_Init+0x1b4>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d101      	bne.n	8000558 <GPIO_Init+0x188>
 8000554:	2307      	movs	r3, #7
 8000556:	e018      	b.n	800058a <GPIO_Init+0x1ba>
 8000558:	2300      	movs	r3, #0
 800055a:	e016      	b.n	800058a <GPIO_Init+0x1ba>
 800055c:	2304      	movs	r3, #4
 800055e:	e014      	b.n	800058a <GPIO_Init+0x1ba>
 8000560:	2303      	movs	r3, #3
 8000562:	e012      	b.n	800058a <GPIO_Init+0x1ba>
 8000564:	2302      	movs	r3, #2
 8000566:	e010      	b.n	800058a <GPIO_Init+0x1ba>
 8000568:	2301      	movs	r3, #1
 800056a:	e00e      	b.n	800058a <GPIO_Init+0x1ba>
 800056c:	40013c00 	.word	0x40013c00
 8000570:	40020000 	.word	0x40020000
 8000574:	40020400 	.word	0x40020400
 8000578:	40020800 	.word	0x40020800
 800057c:	40020c00 	.word	0x40020c00
 8000580:	40021000 	.word	0x40021000
 8000584:	40021c00 	.word	0x40021c00
 8000588:	2300      	movs	r3, #0
 800058a:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 800058c:	4b64      	ldr	r3, [pc, #400]	; (8000720 <GPIO_Init+0x350>)
 800058e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000590:	4a63      	ldr	r2, [pc, #396]	; (8000720 <GPIO_Init+0x350>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2*4);
 8000598:	7a7a      	ldrb	r2, [r7, #9]
 800059a:	7abb      	ldrb	r3, [r7, #10]
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	fa02 f103 	lsl.w	r1, r2, r3
 80005a2:	4a60      	ldr	r2, [pc, #384]	; (8000724 <GPIO_Init+0x354>)
 80005a4:	7afb      	ldrb	r3, [r7, #11]
 80005a6:	3302      	adds	r3, #2
 80005a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enabling the EXTI interrupt delivery using IMR
		EXTI->IMR |=  (0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 80005ac:	4b5e      	ldr	r3, [pc, #376]	; (8000728 <GPIO_Init+0x358>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	7912      	ldrb	r2, [r2, #4]
 80005b4:	4611      	mov	r1, r2
 80005b6:	2201      	movs	r2, #1
 80005b8:	408a      	lsls	r2, r1
 80005ba:	4611      	mov	r1, r2
 80005bc:	4a5a      	ldr	r2, [pc, #360]	; (8000728 <GPIO_Init+0x358>)
 80005be:	430b      	orrs	r3, r1
 80005c0:	6013      	str	r3, [r2, #0]
	}

	// Setting pin speed
	temp = pGPIOHandle->GPIO_Config.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	799b      	ldrb	r3, [r3, #6]
 80005c6:	461a      	mov	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	791b      	ldrb	r3, [r3, #4]
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber));
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	689a      	ldr	r2, [r3, #8]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	791b      	ldrb	r3, [r3, #4]
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	2103      	movs	r1, #3
 80005e2:	fa01 f303 	lsl.w	r3, r1, r3
 80005e6:	43db      	mvns	r3, r3
 80005e8:	4619      	mov	r1, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	400a      	ands	r2, r1
 80005f0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	6899      	ldr	r1, [r3, #8]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	430a      	orrs	r2, r1
 8000600:	609a      	str	r2, [r3, #8]


	// Setting pin pull up/ pull down
	temp = pGPIOHandle->GPIO_Config.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	79db      	ldrb	r3, [r3, #7]
 8000606:	461a      	mov	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber));
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	68da      	ldr	r2, [r3, #12]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	2103      	movs	r1, #3
 8000622:	fa01 f303 	lsl.w	r3, r1, r3
 8000626:	43db      	mvns	r3, r3
 8000628:	4619      	mov	r1, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	400a      	ands	r2, r1
 8000630:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	68d9      	ldr	r1, [r3, #12]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	430a      	orrs	r2, r1
 8000640:	60da      	str	r2, [r3, #12]


	// Setting pin output type
	temp = pGPIOHandle->GPIO_Config.GPIO_PinOPType << (pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7a1b      	ldrb	r3, [r3, #8]
 8000646:	461a      	mov	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	fa02 f303 	lsl.w	r3, r2, r3
 8000650:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x03 << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber));
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	685a      	ldr	r2, [r3, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	2103      	movs	r1, #3
 8000660:	fa01 f303 	lsl.w	r3, r1, r3
 8000664:	43db      	mvns	r3, r3
 8000666:	4619      	mov	r1, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	400a      	ands	r2, r1
 800066e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	6859      	ldr	r1, [r3, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	430a      	orrs	r2, r1
 800067e:	605a      	str	r2, [r3, #4]


	// Setting pin alternate function
	if(pGPIOHandle->GPIO_Config.GPIO_PinMode==GPIO_MODE_ALTFN){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	795b      	ldrb	r3, [r3, #5]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d147      	bne.n	8000718 <GPIO_Init+0x348>

		if(pGPIOHandle->GPIO_Config.GPIO_PinNumber<8){
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	2b07      	cmp	r3, #7
 800068e:	d820      	bhi.n	80006d2 <GPIO_Init+0x302>
			temp = pGPIOHandle->GPIO_Config.GPIO_PinAltFunMode << (4 * pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	7a5b      	ldrb	r3, [r3, #9]
 8000694:	461a      	mov	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	fa02 f303 	lsl.w	r3, r2, r3
 80006a0:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFRL &= ~(0x0f << (4 * pGPIOHandle->GPIO_Config.GPIO_PinNumber));
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	6a1a      	ldr	r2, [r3, #32]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	210f      	movs	r1, #15
 80006b0:	fa01 f303 	lsl.w	r3, r1, r3
 80006b4:	43db      	mvns	r3, r3
 80006b6:	4619      	mov	r1, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	400a      	ands	r2, r1
 80006be:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= temp;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	6a19      	ldr	r1, [r3, #32]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	430a      	orrs	r2, r1
 80006ce:	621a      	str	r2, [r3, #32]
			temp = pGPIOHandle->GPIO_Config.GPIO_PinAltFunMode << (4 *(pGPIOHandle->GPIO_Config.GPIO_PinNumber - 8));
			pGPIOHandle->pGPIOx->AFRH &= ~(0x0f << (4 * (pGPIOHandle->GPIO_Config.GPIO_PinNumber%8)));
			pGPIOHandle->pGPIOx->AFRH |= temp;
		}
	}
}
 80006d0:	e022      	b.n	8000718 <GPIO_Init+0x348>
			temp = pGPIOHandle->GPIO_Config.GPIO_PinAltFunMode << (4 *(pGPIOHandle->GPIO_Config.GPIO_PinNumber - 8));
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	7a5b      	ldrb	r3, [r3, #9]
 80006d6:	461a      	mov	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	791b      	ldrb	r3, [r3, #4]
 80006dc:	3b08      	subs	r3, #8
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	fa02 f303 	lsl.w	r3, r2, r3
 80006e4:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFRH &= ~(0x0f << (4 * (pGPIOHandle->GPIO_Config.GPIO_PinNumber%8)));
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	791b      	ldrb	r3, [r3, #4]
 80006f0:	f003 0307 	and.w	r3, r3, #7
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	210f      	movs	r1, #15
 80006f8:	fa01 f303 	lsl.w	r3, r1, r3
 80006fc:	43db      	mvns	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	400a      	ands	r2, r1
 8000706:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= temp;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	430a      	orrs	r2, r1
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40013800 	.word	0x40013800
 8000728:	40013c00 	.word	0x40013c00

0800072c <GPIO_ReadFromInputPin>:
 * @param[in]		- GPIO PIN Number
 * @return 			- 0 or 1
 *
 * @Note			- none
********************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & (0x00000001));
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	691a      	ldr	r2, [r3, #16]
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	fa22 f303 	lsr.w	r3, r2, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	73fb      	strb	r3, [r7, #15]
	return value;
 800074a:	7bfb      	ldrb	r3, [r7, #15]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <RCC_GetLIOutputClock>:
#include "STM32F411RE_Driver_RCC.h"

uint16_t AHB_Prescalar[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint16_t APB_Prescalar[4] = {2, 4, 8, 16};

uint32_t RCC_GetLIOutputClock(){
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
	return 16000000; //Here implement the function to get the output of the PLI clock
 800075c:	4b02      	ldr	r3, [pc, #8]	; (8000768 <RCC_GetLIOutputClock+0x10>)
}
 800075e:	4618      	mov	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	00f42400 	.word	0x00f42400

0800076c <RCC_GetPCLK1Value>:

//APB1 clock frequency calculation based on all the programmed registers
uint32_t RCC_GetPCLK1Value(void){
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp;
	uint16_t AHBPreScalar, APB1PreScalar;
	clksrc = ((RCC->CFGR>>2) & 0x03); //Clock source status registered maintained by the hardware
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <RCC_GetPCLK1Value+0xa0>)
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	089b      	lsrs	r3, r3, #2
 8000778:	b2db      	uxtb	r3, r3
 800077a:	f003 0303 	and.w	r3, r3, #3
 800077e:	71fb      	strb	r3, [r7, #7]
	if(clksrc == 0){//HSI as system clock
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d102      	bne.n	800078c <RCC_GetPCLK1Value+0x20>
		SystemClk =  16000000;
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <RCC_GetPCLK1Value+0xa4>)
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	e00b      	b.n	80007a4 <RCC_GetPCLK1Value+0x38>
	} else if(clksrc == 1){//HSI as system clock
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d102      	bne.n	8000798 <RCC_GetPCLK1Value+0x2c>
		SystemClk =  8000000;
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <RCC_GetPCLK1Value+0xa8>)
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	e005      	b.n	80007a4 <RCC_GetPCLK1Value+0x38>
	} else if (clksrc == 2){//PLL as system clock
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d102      	bne.n	80007a4 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetLIOutputClock();
 800079e:	f7ff ffdb 	bl	8000758 <RCC_GetLIOutputClock>
 80007a2:	60f8      	str	r0, [r7, #12]
	}

	temp = ((RCC->CFGR>>4) & 0xf);
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <RCC_GetPCLK1Value+0xa0>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	091b      	lsrs	r3, r3, #4
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	f003 030f 	and.w	r3, r3, #15
 80007b0:	71bb      	strb	r3, [r7, #6]
	if(temp<8){
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	2b07      	cmp	r3, #7
 80007b6:	d802      	bhi.n	80007be <RCC_GetPCLK1Value+0x52>
		AHBPreScalar = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	817b      	strh	r3, [r7, #10]
 80007bc:	e005      	b.n	80007ca <RCC_GetPCLK1Value+0x5e>
	} else{
		AHBPreScalar = AHB_Prescalar[temp-8];
 80007be:	79bb      	ldrb	r3, [r7, #6]
 80007c0:	3b08      	subs	r3, #8
 80007c2:	4a15      	ldr	r2, [pc, #84]	; (8000818 <RCC_GetPCLK1Value+0xac>)
 80007c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007c8:	817b      	strh	r3, [r7, #10]
	}
	temp = ((RCC->CFGR>>10) & 0x7);
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <RCC_GetPCLK1Value+0xa0>)
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	0a9b      	lsrs	r3, r3, #10
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	71bb      	strb	r3, [r7, #6]
	if(temp<4){
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	2b03      	cmp	r3, #3
 80007dc:	d802      	bhi.n	80007e4 <RCC_GetPCLK1Value+0x78>
		APB1PreScalar = 1;
 80007de:	2301      	movs	r3, #1
 80007e0:	813b      	strh	r3, [r7, #8]
 80007e2:	e005      	b.n	80007f0 <RCC_GetPCLK1Value+0x84>
	} else {
		APB1PreScalar = APB_Prescalar[temp-4];
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	3b04      	subs	r3, #4
 80007e8:	4a0c      	ldr	r2, [pc, #48]	; (800081c <RCC_GetPCLK1Value+0xb0>)
 80007ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ee:	813b      	strh	r3, [r7, #8]
	}
	pclk1 = SystemClk/AHBPreScalar/APB1PreScalar;
 80007f0:	897b      	ldrh	r3, [r7, #10]
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80007f8:	893b      	ldrh	r3, [r7, #8]
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	603b      	str	r3, [r7, #0]

	return pclk1;
 8000800:	683b      	ldr	r3, [r7, #0]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	00f42400 	.word	0x00f42400
 8000814:	007a1200 	.word	0x007a1200
 8000818:	20000000 	.word	0x20000000
 800081c:	20000010 	.word	0x20000010

08000820 <RCC_GetPCLK2Value>:

//APB2 clock frequency calculation based on all the programmed registers
uint32_t RCC_GetPCLK2Value(void){
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
	uint32_t pclk2, SystemClk;
	uint8_t clksrc, temp;
	uint16_t AHBPreScalar, APB2PreScalar;
	clksrc = ((RCC->CFGR>>2) & 0x03); //Clock source status registered maintained by the hardware
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <RCC_GetPCLK2Value+0xa0>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	089b      	lsrs	r3, r3, #2
 800082c:	b2db      	uxtb	r3, r3
 800082e:	f003 0303 	and.w	r3, r3, #3
 8000832:	71fb      	strb	r3, [r7, #7]
	if(clksrc == 0){//HSI as system clock
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d102      	bne.n	8000840 <RCC_GetPCLK2Value+0x20>
		SystemClk =  16000000;
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <RCC_GetPCLK2Value+0xa4>)
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	e00b      	b.n	8000858 <RCC_GetPCLK2Value+0x38>
	} else if(clksrc == 1){//HSI as system clock
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d102      	bne.n	800084c <RCC_GetPCLK2Value+0x2c>
		SystemClk =  8000000;
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <RCC_GetPCLK2Value+0xa8>)
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	e005      	b.n	8000858 <RCC_GetPCLK2Value+0x38>
	} else if (clksrc == 2){//PLL as system clock
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d102      	bne.n	8000858 <RCC_GetPCLK2Value+0x38>
		SystemClk = RCC_GetLIOutputClock();
 8000852:	f7ff ff81 	bl	8000758 <RCC_GetLIOutputClock>
 8000856:	60f8      	str	r0, [r7, #12]
	}

	temp = ((RCC->CFGR>>4) & 0xf);
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <RCC_GetPCLK2Value+0xa0>)
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	091b      	lsrs	r3, r3, #4
 800085e:	b2db      	uxtb	r3, r3
 8000860:	f003 030f 	and.w	r3, r3, #15
 8000864:	71bb      	strb	r3, [r7, #6]
	if(temp<8){
 8000866:	79bb      	ldrb	r3, [r7, #6]
 8000868:	2b07      	cmp	r3, #7
 800086a:	d802      	bhi.n	8000872 <RCC_GetPCLK2Value+0x52>
		AHBPreScalar = 1;
 800086c:	2301      	movs	r3, #1
 800086e:	817b      	strh	r3, [r7, #10]
 8000870:	e005      	b.n	800087e <RCC_GetPCLK2Value+0x5e>
	} else{
		AHBPreScalar = AHB_Prescalar[temp-8];
 8000872:	79bb      	ldrb	r3, [r7, #6]
 8000874:	3b08      	subs	r3, #8
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <RCC_GetPCLK2Value+0xac>)
 8000878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800087c:	817b      	strh	r3, [r7, #10]
	}
	temp = ((RCC->CFGR>>10) & 0x7);
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <RCC_GetPCLK2Value+0xa0>)
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	0a9b      	lsrs	r3, r3, #10
 8000884:	b2db      	uxtb	r3, r3
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	71bb      	strb	r3, [r7, #6]
	if(temp<4){
 800088c:	79bb      	ldrb	r3, [r7, #6]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d802      	bhi.n	8000898 <RCC_GetPCLK2Value+0x78>
		APB2PreScalar = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	813b      	strh	r3, [r7, #8]
 8000896:	e005      	b.n	80008a4 <RCC_GetPCLK2Value+0x84>
	} else {
		APB2PreScalar = APB_Prescalar[temp-4];
 8000898:	79bb      	ldrb	r3, [r7, #6]
 800089a:	3b04      	subs	r3, #4
 800089c:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <RCC_GetPCLK2Value+0xb0>)
 800089e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a2:	813b      	strh	r3, [r7, #8]
	}
	pclk2 = SystemClk/AHBPreScalar/APB2PreScalar;
 80008a4:	897b      	ldrh	r3, [r7, #10]
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80008ac:	893b      	ldrh	r3, [r7, #8]
 80008ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b2:	603b      	str	r3, [r7, #0]

	return pclk2;
 80008b4:	683b      	ldr	r3, [r7, #0]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	00f42400 	.word	0x00f42400
 80008c8:	007a1200 	.word	0x007a1200
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000010 	.word	0x20000010

080008d4 <USART_PeriClockControl>:
#include "STM32F411RE_Driver_USART.h"
#define __weak __attribute__((weak))

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnORDi){
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
	if(EnORDi == ENABLE){
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d120      	bne.n	8000928 <USART_PeriClockControl+0x54>
		if(pUSARTx == USART1){
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a22      	ldr	r2, [pc, #136]	; (8000974 <USART_PeriClockControl+0xa0>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d106      	bne.n	80008fc <USART_PeriClockControl+0x28>
			USART1_PCLK_EN();
 80008ee:	4b22      	ldr	r3, [pc, #136]	; (8000978 <USART_PeriClockControl+0xa4>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a21      	ldr	r2, [pc, #132]	; (8000978 <USART_PeriClockControl+0xa4>)
 80008f4:	f043 0310 	orr.w	r3, r3, #16
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
		}
		else if(pUSARTx == USART6){
			USART6_PCLK_DI();
		}
	}
}
 80008fa:	e035      	b.n	8000968 <USART_PeriClockControl+0x94>
		else if(pUSARTx == USART2){
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a1f      	ldr	r2, [pc, #124]	; (800097c <USART_PeriClockControl+0xa8>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d106      	bne.n	8000912 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <USART_PeriClockControl+0xa4>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <USART_PeriClockControl+0xa4>)
 800090a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000910:	e02a      	b.n	8000968 <USART_PeriClockControl+0x94>
		else if(pUSARTx == USART6){
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a1a      	ldr	r2, [pc, #104]	; (8000980 <USART_PeriClockControl+0xac>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d126      	bne.n	8000968 <USART_PeriClockControl+0x94>
			USART6_PCLK_EN();
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <USART_PeriClockControl+0xa4>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	4a16      	ldr	r2, [pc, #88]	; (8000978 <USART_PeriClockControl+0xa4>)
 8000920:	f043 0320 	orr.w	r3, r3, #32
 8000924:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000926:	e01f      	b.n	8000968 <USART_PeriClockControl+0x94>
		if(pUSARTx == USART1){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <USART_PeriClockControl+0xa0>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d106      	bne.n	800093e <USART_PeriClockControl+0x6a>
			USART1_PCLK_DI();
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <USART_PeriClockControl+0xa4>)
 8000932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000934:	4a10      	ldr	r2, [pc, #64]	; (8000978 <USART_PeriClockControl+0xa4>)
 8000936:	f023 0310 	bic.w	r3, r3, #16
 800093a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800093c:	e014      	b.n	8000968 <USART_PeriClockControl+0x94>
		else if(pUSARTx == USART2){
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a0e      	ldr	r2, [pc, #56]	; (800097c <USART_PeriClockControl+0xa8>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d106      	bne.n	8000954 <USART_PeriClockControl+0x80>
			USART2_PCLK_DI();
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <USART_PeriClockControl+0xa4>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <USART_PeriClockControl+0xa4>)
 800094c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000952:	e009      	b.n	8000968 <USART_PeriClockControl+0x94>
		else if(pUSARTx == USART6){
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <USART_PeriClockControl+0xac>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d105      	bne.n	8000968 <USART_PeriClockControl+0x94>
			USART6_PCLK_DI();
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <USART_PeriClockControl+0xa4>)
 800095e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000960:	4a05      	ldr	r2, [pc, #20]	; (8000978 <USART_PeriClockControl+0xa4>)
 8000962:	f023 0320 	bic.w	r3, r3, #32
 8000966:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	40011000 	.word	0x40011000
 8000978:	40023800 	.word	0x40023800
 800097c:	40004400 	.word	0x40004400
 8000980:	40011400 	.word	0x40011400

08000984 <USART_Init>:

void USART_Init(USART_Handle_t *pUSARTHandle){
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	uint32_t tempReg = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2101      	movs	r1, #1
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff9c 	bl	80008d4 <USART_PeriClockControl>

	//Enabling the UART engine
	if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX){
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	791b      	ldrb	r3, [r3, #4]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d104      	bne.n	80009ae <USART_Init+0x2a>
		tempReg|=(1<<UASRT_CR1_RE);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e010      	b.n	80009d0 <USART_Init+0x4c>
	} else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX){
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	791b      	ldrb	r3, [r3, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d104      	bne.n	80009c0 <USART_Init+0x3c>
		tempReg|=(1<<UASRT_CR1_TE);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	e007      	b.n	80009d0 <USART_Init+0x4c>
	} else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX){
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	791b      	ldrb	r3, [r3, #4]
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d103      	bne.n	80009d0 <USART_Init+0x4c>
		tempReg|=((1<<UASRT_CR1_TE) | (1<<UASRT_CR1_RE));
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f043 030c 	orr.w	r3, r3, #12
 80009ce:	60fb      	str	r3, [r7, #12]
	}

	//Configuring the word length
	tempReg |=	pUSARTHandle->USART_Config.USART_WordLength<<UASRT_CR1_M;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7b5b      	ldrb	r3, [r3, #13]
 80009d4:	031b      	lsls	r3, r3, #12
 80009d6:	461a      	mov	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4313      	orrs	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]

	//Configuring the parity control bit field
	if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN){
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	7b9b      	ldrb	r3, [r3, #14]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d108      	bne.n	80009f8 <USART_Init+0x74>
		//Implement the code to enable parity control
		tempReg |=(1<<UASRT_CR1_PCE);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ec:	60fb      	str	r3, [r7, #12]
		tempReg &= ~(1<<UASRT_CR1_PS);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	e00b      	b.n	8000a10 <USART_Init+0x8c>
	}else if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD){
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7b9b      	ldrb	r3, [r3, #14]
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d107      	bne.n	8000a10 <USART_Init+0x8c>
		//Implement the code to enable parity control
		tempReg |=(1<<UASRT_CR1_PCE);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a06:	60fb      	str	r3, [r7, #12]
		tempReg |=(1<<UASRT_CR1_PS);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0e:	60fb      	str	r3, [r7, #12]
	}

	//Program the CR1 register
	pUSARTHandle->pUSARTx->USART_CR1 = tempReg;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	60da      	str	r2, [r3, #12]

	//Configuring the CR2 register
	tempReg=0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
	//Configuring the number of STOP bits
	tempReg |= pUSARTHandle->USART_Config.USART_NoOfStopBits<<UASRT_CR2_STOP;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	7b1b      	ldrb	r3, [r3, #12]
 8000a20:	031b      	lsls	r3, r3, #12
 8000a22:	461a      	mov	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
	pUSARTHandle->pUSARTx->USART_CR2 = tempReg;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	611a      	str	r2, [r3, #16]

	//Configuring the CR3 register
	tempReg=0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
	//Configuring USART hardware flow control
	if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS){
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7bdb      	ldrb	r3, [r3, #15]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d104      	bne.n	8000a48 <USART_Init+0xc4>
		tempReg |= (1<<UASRT_CR3_CTSE);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	e010      	b.n	8000a6a <USART_Init+0xe6>
	} else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS){
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7bdb      	ldrb	r3, [r3, #15]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d104      	bne.n	8000a5a <USART_Init+0xd6>
		tempReg |= (1<<UASRT_CR3_RTSE);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	e007      	b.n	8000a6a <USART_Init+0xe6>
	}	else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS){
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	7bdb      	ldrb	r3, [r3, #15]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d103      	bne.n	8000a6a <USART_Init+0xe6>
		tempReg |= ((1<<UASRT_CR3_RTSE) | (1<<UASRT_CR3_CTSE));
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000a68:	60fb      	str	r3, [r7, #12]
	}
	pUSARTHandle->pUSARTx->USART_CR3 = tempReg;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	615a      	str	r2, [r3, #20]

	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4610      	mov	r0, r2
 8000a7e:	f000 f835 	bl	8000aec <USART_SetBaudRate>
}
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <USART_GetFlagStatus>:
	else if(pUSARTx == USART6){
		USART6_REG_RESET();
	}
}

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName){
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	460b      	mov	r3, r1
 8000a94:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx->USART_SR & StatusFlagName){
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	78fb      	ldrb	r3, [r7, #3]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <USART_GetFlagStatus+0x1c>
			return 1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e000      	b.n	8000aa8 <USART_GetFlagStatus+0x1e>
		}
		return 0;
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <USART_PeripheralControl>:

void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint16_t StatusFlagName){
	pUSARTx->USART_SR &= ~StatusFlagName;
}

void USART_PeripheralControl(USART_RegDef_t *pUSARTx,  uint8_t EnORDi){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	70fb      	strb	r3, [r7, #3]
	if(EnORDi == ENABLE)
 8000ac0:	78fb      	ldrb	r3, [r7, #3]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d106      	bne.n	8000ad4 <USART_PeripheralControl+0x20>
		pUSARTx->USART_CR1 |= (1<<UASRT_CR1_UE);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	60da      	str	r2, [r3, #12]
	else
		pUSARTx->USART_CR1 &= ~(1<<UASRT_CR1_UE);
}
 8000ad2:	e005      	b.n	8000ae0 <USART_PeripheralControl+0x2c>
		pUSARTx->USART_CR1 &= ~(1<<UASRT_CR1_UE);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	60da      	str	r2, [r3, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <USART_SetBaudRate>:

void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
	uint32_t PCLKx;
	uint32_t usartDiv;
	uint32_t M_part, F_part;
	uint32_t tempReg=0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]

	if(pUSARTx == USART1 || pUSARTx == USART6){ //APB2
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a31      	ldr	r2, [pc, #196]	; (8000bc4 <USART_SetBaudRate+0xd8>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d003      	beq.n	8000b0a <USART_SetBaudRate+0x1e>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a30      	ldr	r2, [pc, #192]	; (8000bc8 <USART_SetBaudRate+0xdc>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d103      	bne.n	8000b12 <USART_SetBaudRate+0x26>
		PCLKx = RCC_GetPCLK2Value();
 8000b0a:	f7ff fe89 	bl	8000820 <RCC_GetPCLK2Value>
 8000b0e:	61f8      	str	r0, [r7, #28]
 8000b10:	e002      	b.n	8000b18 <USART_SetBaudRate+0x2c>
	} else{
		PCLKx = RCC_GetPCLK1Value();
 8000b12:	f7ff fe2b 	bl	800076c <RCC_GetPCLK1Value>
 8000b16:	61f8      	str	r0, [r7, #28]
	}
	if(pUSARTx->USART_CR1 & (1<<UASRT_CR1_OVER8)){
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00b      	beq.n	8000b3c <USART_SetBaudRate+0x50>
		usartDiv = ((25*PCLKx)/(2*BaudRate)); // (PCLKx/8/BaudRate)*100
 8000b24:	69fa      	ldr	r2, [r7, #28]
 8000b26:	4613      	mov	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	009a      	lsls	r2, r3, #2
 8000b2e:	441a      	add	r2, r3
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b38:	61bb      	str	r3, [r7, #24]
 8000b3a:	e00a      	b.n	8000b52 <USART_SetBaudRate+0x66>
	} else {
		usartDiv = ((25*PCLKx)/(4*BaudRate)); // (PCLKx/16/BaudRate)*100
 8000b3c:	69fa      	ldr	r2, [r7, #28]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4413      	add	r3, r2
 8000b44:	009a      	lsls	r2, r3, #2
 8000b46:	441a      	add	r2, r3
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b50:	61bb      	str	r3, [r7, #24]
	}
	M_part = (int)(usartDiv/100);
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <USART_SetBaudRate+0xe0>)
 8000b56:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	60fb      	str	r3, [r7, #12]
	tempReg|= (M_part<<4); //vacating the bytes for the fraction part
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
	F_part = (usartDiv - M_part*100);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2264      	movs	r2, #100	; 0x64
 8000b6c:	fb02 f303 	mul.w	r3, r2, r3
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	617b      	str	r3, [r7, #20]

	if (pUSARTx->USART_CR1 & (1<<UASRT_CR1_OVER8)){
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d00a      	beq.n	8000b98 <USART_SetBaudRate+0xac>
		F_part = ((F_part*8 + 50)/100) & (uint8_t)(0x07); //Last 3 bytes
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	3332      	adds	r3, #50	; 0x32
 8000b88:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <USART_SetBaudRate+0xe0>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	f003 0307 	and.w	r3, r3, #7
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e009      	b.n	8000bac <USART_SetBaudRate+0xc0>
	} else {
		F_part = ((F_part*16 + 50)/100) & (uint8_t)(0x0f); //Last 4 bytes
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	011b      	lsls	r3, r3, #4
 8000b9c:	3332      	adds	r3, #50	; 0x32
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <USART_SetBaudRate+0xe0>)
 8000ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba4:	095b      	lsrs	r3, r3, #5
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	617b      	str	r3, [r7, #20]
	}
	tempReg|=F_part;
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
	pUSARTx->USART_BRR = tempReg;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	609a      	str	r2, [r3, #8]
}
 8000bba:	bf00      	nop
 8000bbc:	3720      	adds	r7, #32
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40011000 	.word	0x40011000
 8000bc8:	40011400 	.word	0x40011400
 8000bcc:	51eb851f 	.word	0x51eb851f

08000bd0 <USART_SendData>:

void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;
	for (uint32_t i = 0; i<Len; i++){
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	e031      	b.n	8000c46 <USART_SendData+0x76>
		//Wait until TXE flag is set
		while(!USART_GetFlagStatus(pUSARTHandle->pUSARTx,UASRT_FLAG_TXE));
 8000be2:	bf00      	nop
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2180      	movs	r1, #128	; 0x80
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff4d 	bl	8000a8a <USART_GetFlagStatus>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0f6      	beq.n	8000be4 <USART_SendData+0x14>
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS){
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	7b5b      	ldrb	r3, [r3, #13]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d118      	bne.n	8000c30 <USART_SendData+0x60>
			//if the data length is 9 bits then load DR with 2 bytes masking the bits other than first 9 bits
			pdata = (uint16_t *)pTxBuffer;
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->USART_DR = ((*pdata) & (uint16_t)0x1FF);
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c10:	605a      	str	r2, [r3, #4]
			//Checking for USART parity control
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE){
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	7b9b      	ldrb	r3, [r3, #14]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d106      	bne.n	8000c28 <USART_SendData+0x58>
				//No parity is used in this transfer. So 9 bits of User data  will be sent
				pTxBuffer++; pTxBuffer++;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	3301      	adds	r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	e00b      	b.n	8000c40 <USART_SendData+0x70>
			} else {
				//The 9th bit will be replaced by the parity bit by the hardware
				pTxBuffer++;
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	e007      	b.n	8000c40 <USART_SendData+0x70>
			}
		} else {
			//8 bit of data transfer
			pUSARTHandle->pUSARTx->USART_DR = (uint32_t)(*pTxBuffer & (uint8_t)0xFF);
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	781a      	ldrb	r2, [r3, #0]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
			pTxBuffer++;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i<Len; i++){
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	3301      	adds	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d3c9      	bcc.n	8000be2 <USART_SendData+0x12>
		}
	}
	while(!USART_GetFlagStatus(pUSARTHandle->pUSARTx, UASRT_FLAG_TC));
 8000c4e:	bf00      	nop
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2140      	movs	r1, #64	; 0x40
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff17 	bl	8000a8a <USART_GetFlagStatus>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d0f6      	beq.n	8000c50 <USART_SendData+0x80>
}
 8000c62:	bf00      	nop
 8000c64:	bf00      	nop
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <USART_ReceiveDataIT>:
		pUSARTHandle->pUSARTx->USART_CR1 |= (1<<UASRT_CR1_TCIE);
	}
	return txState;
}

uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b087      	sub	sp, #28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
	uint8_t rxState = pUSARTHandle->RxBusyState;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c7e:	75fb      	strb	r3, [r7, #23]
	if(rxState != USART_BUSY_IN_RX){
 8000c80:	7dfb      	ldrb	r3, [r7, #23]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d014      	beq.n	8000cb0 <USART_ReceiveDataIT+0x44>
		pUSARTHandle->RxLen	= Len;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer	= pRxBuffer;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(void)pUSARTHandle->pUSARTx->USART_DR; // ???
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
		//Enabling the interrupt for RXNE
		pUSARTHandle->pUSARTx->USART_CR1 |= (1<<UASRT_CR1_RXNEIE);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	68da      	ldr	r2, [r3, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f042 0220 	orr.w	r2, r2, #32
 8000cae:	60da      	str	r2, [r3, #12]
	}
	return rxState;
 8000cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	371c      	adds	r7, #28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <USART_IRQ_Interrupt_Config>:
void USART_IRQ_Interrupt_Config(uint8_t IRQNumber, uint8_t EnORDi){
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	460a      	mov	r2, r1
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	71bb      	strb	r3, [r7, #6]
	if (EnORDi == ENABLE){
 8000cd0:	79bb      	ldrb	r3, [r7, #6]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d135      	bne.n	8000d42 <USART_IRQ_Interrupt_Config+0x82>
		if(IRQNumber<32){
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b1f      	cmp	r3, #31
 8000cda:	d80c      	bhi.n	8000cf6 <USART_IRQ_Interrupt_Config+0x36>
			//Program ISER0 register
			*NVIC_ISER0_ADDR |= (1<<IRQNumber%32);
 8000cdc:	4b37      	ldr	r3, [pc, #220]	; (8000dbc <USART_IRQ_Interrupt_Config+0xfc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	79fa      	ldrb	r2, [r7, #7]
 8000ce2:	f002 021f 	and.w	r2, r2, #31
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cec:	4611      	mov	r1, r2
 8000cee:	4a33      	ldr	r2, [pc, #204]	; (8000dbc <USART_IRQ_Interrupt_Config+0xfc>)
 8000cf0:	430b      	orrs	r3, r1
 8000cf2:	6013      	str	r3, [r2, #0]
		}else if (IRQNumber>63 && IRQNumber<96){
			//Program ICER2 register
			*NVIC_ICER0_ADDR |= (1<<IRQNumber%32);
		}
	}
}
 8000cf4:	e05b      	b.n	8000dae <USART_IRQ_Interrupt_Config+0xee>
		}else if (IRQNumber>31 && IRQNumber<64){
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b1f      	cmp	r3, #31
 8000cfa:	d90f      	bls.n	8000d1c <USART_IRQ_Interrupt_Config+0x5c>
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b3f      	cmp	r3, #63	; 0x3f
 8000d00:	d80c      	bhi.n	8000d1c <USART_IRQ_Interrupt_Config+0x5c>
			*NVIC_ISER1_ADDR |= (1<<IRQNumber%32);
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <USART_IRQ_Interrupt_Config+0x100>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	79fa      	ldrb	r2, [r7, #7]
 8000d08:	f002 021f 	and.w	r2, r2, #31
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d12:	4611      	mov	r1, r2
 8000d14:	4a2a      	ldr	r2, [pc, #168]	; (8000dc0 <USART_IRQ_Interrupt_Config+0x100>)
 8000d16:	430b      	orrs	r3, r1
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e048      	b.n	8000dae <USART_IRQ_Interrupt_Config+0xee>
		}else if (IRQNumber>63 && IRQNumber<96){
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000d20:	d945      	bls.n	8000dae <USART_IRQ_Interrupt_Config+0xee>
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b5f      	cmp	r3, #95	; 0x5f
 8000d26:	d842      	bhi.n	8000dae <USART_IRQ_Interrupt_Config+0xee>
			*NVIC_ISER0_ADDR |= (1<<IRQNumber%32);
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <USART_IRQ_Interrupt_Config+0xfc>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	79fa      	ldrb	r2, [r7, #7]
 8000d2e:	f002 021f 	and.w	r2, r2, #31
 8000d32:	2101      	movs	r1, #1
 8000d34:	fa01 f202 	lsl.w	r2, r1, r2
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4a20      	ldr	r2, [pc, #128]	; (8000dbc <USART_IRQ_Interrupt_Config+0xfc>)
 8000d3c:	430b      	orrs	r3, r1
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	e035      	b.n	8000dae <USART_IRQ_Interrupt_Config+0xee>
		if(IRQNumber<32){
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	2b1f      	cmp	r3, #31
 8000d46:	d80c      	bhi.n	8000d62 <USART_IRQ_Interrupt_Config+0xa2>
			*NVIC_ICER0_ADDR |= (1<<IRQNumber%32);
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <USART_IRQ_Interrupt_Config+0x104>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	f002 021f 	and.w	r2, r2, #31
 8000d52:	2101      	movs	r1, #1
 8000d54:	fa01 f202 	lsl.w	r2, r1, r2
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4a1a      	ldr	r2, [pc, #104]	; (8000dc4 <USART_IRQ_Interrupt_Config+0x104>)
 8000d5c:	430b      	orrs	r3, r1
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	e025      	b.n	8000dae <USART_IRQ_Interrupt_Config+0xee>
		}else if (IRQNumber>31 && IRQNumber<64){
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b1f      	cmp	r3, #31
 8000d66:	d90f      	bls.n	8000d88 <USART_IRQ_Interrupt_Config+0xc8>
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d6c:	d80c      	bhi.n	8000d88 <USART_IRQ_Interrupt_Config+0xc8>
			*NVIC_ICER1_ADDR |= (1<<IRQNumber%32);
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <USART_IRQ_Interrupt_Config+0x108>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	79fa      	ldrb	r2, [r7, #7]
 8000d74:	f002 021f 	and.w	r2, r2, #31
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4a11      	ldr	r2, [pc, #68]	; (8000dc8 <USART_IRQ_Interrupt_Config+0x108>)
 8000d82:	430b      	orrs	r3, r1
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e012      	b.n	8000dae <USART_IRQ_Interrupt_Config+0xee>
		}else if (IRQNumber>63 && IRQNumber<96){
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d8c:	d90f      	bls.n	8000dae <USART_IRQ_Interrupt_Config+0xee>
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b5f      	cmp	r3, #95	; 0x5f
 8000d92:	d80c      	bhi.n	8000dae <USART_IRQ_Interrupt_Config+0xee>
			*NVIC_ICER0_ADDR |= (1<<IRQNumber%32);
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <USART_IRQ_Interrupt_Config+0x104>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	79fa      	ldrb	r2, [r7, #7]
 8000d9a:	f002 021f 	and.w	r2, r2, #31
 8000d9e:	2101      	movs	r1, #1
 8000da0:	fa01 f202 	lsl.w	r2, r1, r2
 8000da4:	4611      	mov	r1, r2
 8000da6:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <USART_IRQ_Interrupt_Config+0x104>)
 8000da8:	430b      	orrs	r3, r1
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	e7ff      	b.n	8000dae <USART_IRQ_Interrupt_Config+0xee>
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000e104 	.word	0xe000e104
 8000dc4:	e000e180 	.word	0xe000e180
 8000dc8:	e000e184 	.word	0xe000e184

08000dcc <USART_IRQHandling>:
	uint8_t RegNum = IRQNumber/4;
	uint8_t RegOffest = IRQNumber%4;
	*(NVIC_IPR0_ADDR + RegNum) |= (IRQPriority<<((RegOffest*8) + (8-NO_PR_BITS_IMPL)));
}

void USART_IRQHandling(USART_Handle_t *pUSARTHandle){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint32_t temp1, temp2, temp3;
	uint16_t *pData;
	//Check for TC flag
	temp1 = pUSARTHandle->pUSARTx->USART_SR & (1<<UASRT_SR_TC);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dde:	61fb      	str	r3, [r7, #28]
	temp2 = pUSARTHandle->pUSARTx->USART_CR1 & (1<<UASRT_CR1_TCIE);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dea:	61bb      	str	r3, [r7, #24]
	if(temp1 && temp2){
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d029      	beq.n	8000e46 <USART_IRQHandling+0x7a>
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d026      	beq.n	8000e46 <USART_IRQHandling+0x7a>
		//Interrupt because of the transmission complete
		if(pUSARTHandle->TxBusyState == I2C_BUSY_IN_TX){
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d121      	bne.n	8000e46 <USART_IRQHandling+0x7a>
			if(!pUSARTHandle->TxLen){
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d11d      	bne.n	8000e46 <USART_IRQHandling+0x7a>
				//Clearing the TC flag
				pUSARTHandle->pUSARTx->USART_SR &= ~UASRT_FLAG_TC;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e18:	601a      	str	r2, [r3, #0]
				//Clearing the TCIE control bit
				pUSARTHandle->pUSARTx->USART_CR1 &= ~(1<<UASRT_CR1_TCIE);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e28:	60da      	str	r2, [r3, #12]
				//Reset the application state
				pUSARTHandle->TxBusyState = USART_BUSY_READY;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2020 	strb.w	r2, [r3, #32]
				//Reset the buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
				//Reset the length of the buffer
				pUSARTHandle->TxLen = 0;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
				//Call the application call back with the event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_TX_CMPLT);
 8000e3e:	2100      	movs	r1, #0
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 fa5f 	bl	8001304 <USART_ApplicationEventCallback>
			}
		}
	}

	//Check for TXE flag
	temp1 = pUSARTHandle->pUSARTx->USART_SR & UASRT_FLAG_TXE;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e50:	61fb      	str	r3, [r7, #28]
	temp2 = pUSARTHandle->pUSARTx->USART_CR1 & (1<<UASRT_CR1_TXEIE);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5c:	61bb      	str	r3, [r7, #24]
	if(temp1 && temp2){
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d050      	beq.n	8000f06 <USART_IRQHandling+0x13a>
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d04d      	beq.n	8000f06 <USART_IRQHandling+0x13a>
		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX){
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d148      	bne.n	8000f06 <USART_IRQHandling+0x13a>
			if(pUSARTHandle->TxLen>0){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d038      	beq.n	8000eee <USART_IRQHandling+0x122>
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS){
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	7b5b      	ldrb	r3, [r3, #13]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d124      	bne.n	8000ece <USART_IRQHandling+0x102>
					pData = (uint16_t*)pUSARTHandle->pTxBuffer;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	617b      	str	r3, [r7, #20]
					pUSARTHandle->pUSARTx->USART_DR = (*pData & (uint16_t)0x01FF);
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e98:	605a      	str	r2, [r3, #4]
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE){
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7b9b      	ldrb	r3, [r3, #14]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10a      	bne.n	8000eb8 <USART_IRQHandling+0xec>
						pUSARTHandle->pTxBuffer += 2;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	1c9a      	adds	r2, r3, #2
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen -= 2;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	1e9a      	subs	r2, r3, #2
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	619a      	str	r2, [r3, #24]
 8000eb6:	e01a      	b.n	8000eee <USART_IRQHandling+0x122>
					} else {
						pUSARTHandle->pTxBuffer += 1;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen -= 1;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	1e5a      	subs	r2, r3, #1
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	619a      	str	r2, [r3, #24]
 8000ecc:	e00f      	b.n	8000eee <USART_IRQHandling+0x122>
					}
				} else {
					pUSARTHandle->pUSARTx->USART_DR = (*pUSARTHandle->pTxBuffer & (uint8_t)0xFF);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	781a      	ldrb	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
					pUSARTHandle->pTxBuffer += 1;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen -= 1;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	1e5a      	subs	r2, r3, #1
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	619a      	str	r2, [r3, #24]
				}
			}
			if (pUSARTHandle->TxLen==0){
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d107      	bne.n	8000f06 <USART_IRQHandling+0x13a>
				pUSARTHandle->pUSARTx->USART_CR1 &= ~(1<<UASRT_CR1_TXEIE);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f04:	60da      	str	r2, [r3, #12]
			}
		}
	}

	//Check for the RXNE
	temp1 = pUSARTHandle->pUSARTx->USART_SR & UASRT_FLAG_RXNE;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0320 	and.w	r3, r3, #32
 8000f10:	61fb      	str	r3, [r7, #28]
	temp2 = pUSARTHandle->pUSARTx->USART_CR1 & (1<<UASRT_CR1_RXNEIE);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	f003 0320 	and.w	r3, r3, #32
 8000f1c:	61bb      	str	r3, [r7, #24]
	if(temp1 && temp2){
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d070      	beq.n	8001006 <USART_IRQHandling+0x23a>
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d06d      	beq.n	8001006 <USART_IRQHandling+0x23a>
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX){
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d168      	bne.n	8001006 <USART_IRQHandling+0x23a>
			if(pUSARTHandle->RxLen > 0){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d058      	beq.n	8000fee <USART_IRQHandling+0x222>
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7b5b      	ldrb	r3, [r3, #13]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d12a      	bne.n	8000f9a <USART_IRQHandling+0x1ce>
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE){
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7b9b      	ldrb	r3, [r3, #14]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d114      	bne.n	8000f76 <USART_IRQHandling+0x1aa>
						*(uint16_t*)pUSARTHandle->pRxBuffer = pUSARTHandle->pUSARTx->USART_DR & (uint16_t)0x1FF;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f5c:	b292      	uxth	r2, r2
 8000f5e:	801a      	strh	r2, [r3, #0]
						pUSARTHandle->pRxBuffer += 2;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	1c9a      	adds	r2, r3, #2
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen -= 2;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	1e9a      	subs	r2, r3, #2
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	61da      	str	r2, [r3, #28]
 8000f74:	e03b      	b.n	8000fee <USART_IRQHandling+0x222>
					} else {
						*pUSARTHandle->pRxBuffer = pUSARTHandle->pUSARTx->USART_DR & (uint8_t)0xFF;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	701a      	strb	r2, [r3, #0]
						pUSARTHandle->pRxBuffer += 1;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen -= 1;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	1e5a      	subs	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	61da      	str	r2, [r3, #28]
 8000f98:	e029      	b.n	8000fee <USART_IRQHandling+0x222>
					}
				} else {
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE){
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7b9b      	ldrb	r3, [r3, #14]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d111      	bne.n	8000fc6 <USART_IRQHandling+0x1fa>
						*pUSARTHandle->pRxBuffer = pUSARTHandle->pUSARTx->USART_DR & (uint8_t)0xFF;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	701a      	strb	r2, [r3, #0]
						pUSARTHandle->pRxBuffer += 1;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	1c5a      	adds	r2, r3, #1
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen -= 1;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	1e5a      	subs	r2, r3, #1
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	61da      	str	r2, [r3, #28]
 8000fc4:	e013      	b.n	8000fee <USART_IRQHandling+0x222>
					} else {
						*pUSARTHandle->pRxBuffer = pUSARTHandle->pUSARTx->USART_DR & (uint8_t)0x7F;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	701a      	strb	r2, [r3, #0]
						pUSARTHandle->pRxBuffer += 1;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen -= 1;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	1e5a      	subs	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	61da      	str	r2, [r3, #28]
					}
				}
			}
			if(pUSARTHandle->RxLen == 0){
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d107      	bne.n	8001006 <USART_IRQHandling+0x23a>
				//pUSARTHandle->pUSARTx->USART_CR1 &= ~(1<<1<<UASRT_CR1_RXNEIE);
				pUSARTHandle->RxBusyState = USART_BUSY_READY;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_RX_CMPLT);
 8000ffe:	2101      	movs	r1, #1
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f97f 	bl	8001304 <USART_ApplicationEventCallback>
			}
		}
	}

	//Check for CTS status
	temp1 = pUSARTHandle->pUSARTx->USART_SR & UASRT_FLAG_CTS;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001010:	61fb      	str	r3, [r7, #28]
	temp2 = pUSARTHandle->pUSARTx->USART_CR3 & (1<<UASRT_CR3_CTSE);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800101c:	61bb      	str	r3, [r7, #24]
	temp3 = pUSARTHandle->pUSARTx->USART_CR3 & (1<<UASRT_CR3_CTSIE);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001028:	613b      	str	r3, [r7, #16]
	if(temp1 && temp2 && temp3){
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d011      	beq.n	8001054 <USART_IRQHandling+0x288>
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00e      	beq.n	8001054 <USART_IRQHandling+0x288>
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00b      	beq.n	8001054 <USART_IRQHandling+0x288>
		pUSARTHandle->pUSARTx->USART_SR &= ~UASRT_FLAG_RXNE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0220 	bic.w	r2, r2, #32
 800104a:	601a      	str	r2, [r3, #0]
		USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_CTS);
 800104c:	2103      	movs	r1, #3
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f958 	bl	8001304 <USART_ApplicationEventCallback>
	}

	//Check for Idle Detection
	temp1 = pUSARTHandle->pUSARTx->USART_SR & UASRT_FLAG_IDLE;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	61fb      	str	r3, [r7, #28]
	temp2 =	pUSARTHandle->pUSARTx->USART_CR1 & (1<<UASRT_CR1_IDLEIE);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	61bb      	str	r3, [r7, #24]
	uint32_t temp;
	if(temp1 && temp2){
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00e      	beq.n	8001090 <USART_IRQHandling+0x2c4>
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00b      	beq.n	8001090 <USART_IRQHandling+0x2c4>
		temp = pUSARTHandle->pUSARTx->USART_SR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	60fb      	str	r3, [r7, #12]
		temp = pUSARTHandle->pUSARTx->USART_DR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	60fb      	str	r3, [r7, #12]
		USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_IDLE);
 8001088:	2102      	movs	r1, #2
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f93a 	bl	8001304 <USART_ApplicationEventCallback>
	}

	//Check for overrun Detection
	temp1 = pUSARTHandle->pUSARTx->USART_SR & UASRT_FLAG_OVR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	61fb      	str	r3, [r7, #28]
	temp2 = pUSARTHandle->pUSARTx->USART_CR1 & (1<<UASRT_CR1_RXNEIE);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	f003 0320 	and.w	r3, r3, #32
 80010a6:	61bb      	str	r3, [r7, #24]
	if(temp1 && temp2){
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d006      	beq.n	80010bc <USART_IRQHandling+0x2f0>
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <USART_IRQHandling+0x2f0>
		/*temp = pUSARTHandle->pUSARTx->USART_SR;
		temp = pUSARTHandle->pUSARTx->USART_DR;*/ //This can be cleared by the application
		USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_ORE);
 80010b4:	2107      	movs	r1, #7
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f924 	bl	8001304 <USART_ApplicationEventCallback>
	}

	//Error in multi-buffer case
	//Check for Idle Detection
	temp2 =	pUSARTHandle->pUSARTx->USART_CR3 & (1<<UASRT_CR3_EIE);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
	if(temp2){
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d01e      	beq.n	800110c <USART_IRQHandling+0x340>
		temp1 = pUSARTHandle->pUSARTx->USART_SR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61fb      	str	r3, [r7, #28]
		if(temp1 & UASRT_FLAG_FE){//Set by hardware when a break character is detected.
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <USART_IRQHandling+0x31c>
			USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_IDLE);
 80010e0:	2102      	movs	r1, #2
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f90e 	bl	8001304 <USART_ApplicationEventCallback>
		}
		if(temp1 & UASRT_FLAG_NF){//Hardware noise is detected on the receive frame
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <USART_IRQHandling+0x32e>
			USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_IDLE);
 80010f2:	2102      	movs	r1, #2
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 f905 	bl	8001304 <USART_ApplicationEventCallback>
		}
		if(temp1 & UASRT_FLAG_OVR){
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <USART_IRQHandling+0x340>
			USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_IDLE);
 8001104:	2102      	movs	r1, #2
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f8fc 	bl	8001304 <USART_ApplicationEventCallback>
		}
	}
}
 800110c:	bf00      	nop
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <delay>:
USART_Handle_t USART1Handle;
uint8_t rxCmplt = RESET;
uint8_t g_data	= 0;
extern void initialise_monitor_handles();

void delay(void){
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<500000; i++);
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	e002      	b.n	8001126 <delay+0x12>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3301      	adds	r3, #1
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <delay+0x28>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d9f8      	bls.n	8001120 <delay+0xc>
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	0007a11f 	.word	0x0007a11f

08001140 <main>:

int main(void)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b08b      	sub	sp, #44	; 0x2c
 8001144:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
	initialise_monitor_handles();
 800114a:	f000 fb75 	bl	8001838 <initialise_monitor_handles>

	//GPIO Button for message sending
	GPIO_Handle_t GPIOButton;
	GPIOButton.pGPIOx= GPIOC;
 800114e:	4b5e      	ldr	r3, [pc, #376]	; (80012c8 <main+0x188>)
 8001150:	61bb      	str	r3, [r7, #24]
	GPIOButton.GPIO_Config.GPIO_PinNumber=GPIO_PIN_NUM_13;
 8001152:	230d      	movs	r3, #13
 8001154:	773b      	strb	r3, [r7, #28]
	GPIOButton.GPIO_Config.GPIO_PinMode=GPIO_MODE_IN;
 8001156:	2300      	movs	r3, #0
 8001158:	777b      	strb	r3, [r7, #29]
	GPIOButton.GPIO_Config.GPIO_PinOPType=GPIO_OP_TYPES_PP;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 3020 	strb.w	r3, [r7, #32]
	GPIOButton.GPIO_Config.GPIO_PinSpeed=GPIO_OP_SPEED_FAST;
 8001160:	2302      	movs	r3, #2
 8001162:	77bb      	strb	r3, [r7, #30]
	GPIOButton.GPIO_Config.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8001164:	2300      	movs	r3, #0
 8001166:	77fb      	strb	r3, [r7, #31]
	GPIO_PeriClockControl(GPIOC, ENABLE);
 8001168:	2101      	movs	r1, #1
 800116a:	4857      	ldr	r0, [pc, #348]	; (80012c8 <main+0x188>)
 800116c:	f7ff f890 	bl	8000290 <GPIO_PeriClockControl>
	GPIO_Init(&GPIOButton);
 8001170:	f107 0318 	add.w	r3, r7, #24
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f92b 	bl	80003d0 <GPIO_Init>

	//LED
	GPIO_Handle_t InternalLED;
	InternalLED.pGPIOx= GPIOA;
 800117a:	4b54      	ldr	r3, [pc, #336]	; (80012cc <main+0x18c>)
 800117c:	60fb      	str	r3, [r7, #12]
	InternalLED.GPIO_Config.GPIO_PinNumber=GPIO_PIN_NUM_5;
 800117e:	2305      	movs	r3, #5
 8001180:	743b      	strb	r3, [r7, #16]
	InternalLED.GPIO_Config.GPIO_PinMode=GPIO_MODE_OUT;
 8001182:	2301      	movs	r3, #1
 8001184:	747b      	strb	r3, [r7, #17]
	InternalLED.GPIO_Config.GPIO_PinOPType=GPIO_OP_TYPES_PP;
 8001186:	2300      	movs	r3, #0
 8001188:	753b      	strb	r3, [r7, #20]
	InternalLED.GPIO_Config.GPIO_PinSpeed=GPIO_OP_SPEED_FAST;
 800118a:	2302      	movs	r3, #2
 800118c:	74bb      	strb	r3, [r7, #18]
	InternalLED.GPIO_Config.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 800118e:	2300      	movs	r3, #0
 8001190:	74fb      	strb	r3, [r7, #19]
	GPIO_PeriClockControl(GPIOA, ENABLE);
 8001192:	2101      	movs	r1, #1
 8001194:	484d      	ldr	r0, [pc, #308]	; (80012cc <main+0x18c>)
 8001196:	f7ff f87b 	bl	8000290 <GPIO_PeriClockControl>
	GPIO_Init(&InternalLED);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f916 	bl	80003d0 <GPIO_Init>

	//GPIO INIT FOR USART
	//PA2 - USART1_Tx
	//PA3 - USART1_Rx
	GPIO_Handle_t USARTPins;
	USARTPins.pGPIOx = GPIOA;
 80011a4:	4b49      	ldr	r3, [pc, #292]	; (80012cc <main+0x18c>)
 80011a6:	603b      	str	r3, [r7, #0]
	USARTPins.GPIO_Config.GPIO_PinMode = GPIO_MODE_ALTFN;
 80011a8:	2302      	movs	r3, #2
 80011aa:	717b      	strb	r3, [r7, #5]
	USARTPins.GPIO_Config.GPIO_PinAltFunMode = 7;
 80011ac:	2307      	movs	r3, #7
 80011ae:	727b      	strb	r3, [r7, #9]
	USARTPins.GPIO_Config.GPIO_PinOPType = GPIO_OP_TYPES_PP;
 80011b0:	2300      	movs	r3, #0
 80011b2:	723b      	strb	r3, [r7, #8]
	USARTPins.GPIO_Config.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80011b4:	2301      	movs	r3, #1
 80011b6:	71fb      	strb	r3, [r7, #7]
	USARTPins.GPIO_Config.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 80011b8:	2302      	movs	r3, #2
 80011ba:	71bb      	strb	r3, [r7, #6]

	USARTPins.GPIO_Config.GPIO_PinNumber = 9; //USART1_Tx
 80011bc:	2309      	movs	r3, #9
 80011be:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&USARTPins);
 80011c0:	463b      	mov	r3, r7
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f904 	bl	80003d0 <GPIO_Init>

	USARTPins.GPIO_Config.GPIO_PinNumber = 10; //USART1_Rx
 80011c8:	230a      	movs	r3, #10
 80011ca:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&USARTPins);
 80011cc:	463b      	mov	r3, r7
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f8fe 	bl	80003d0 <GPIO_Init>

	//USARTInit
	USART1Handle.pUSARTx = USART1;
 80011d4:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <main+0x190>)
 80011d6:	4a3f      	ldr	r2, [pc, #252]	; (80012d4 <main+0x194>)
 80011d8:	601a      	str	r2, [r3, #0]
	USART1Handle.USART_Config.USART_Baud = USASRT_STD_BAUD_9600;
 80011da:	4b3d      	ldr	r3, [pc, #244]	; (80012d0 <main+0x190>)
 80011dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011e0:	609a      	str	r2, [r3, #8]
	USART1Handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 80011e2:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <main+0x190>)
 80011e4:	2202      	movs	r2, #2
 80011e6:	711a      	strb	r2, [r3, #4]
	USART1Handle.USART_Config.USART_NoOfStopBits =  USART_STOPBITS_1;
 80011e8:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <main+0x190>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	731a      	strb	r2, [r3, #12]
	USART1Handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80011ee:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <main+0x190>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	739a      	strb	r2, [r3, #14]
	USART1Handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80011f4:	4b36      	ldr	r3, [pc, #216]	; (80012d0 <main+0x190>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	73da      	strb	r2, [r3, #15]
	USART1Handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80011fa:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <main+0x190>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	735a      	strb	r2, [r3, #13]
	USART_Init(&USART1Handle);
 8001200:	4833      	ldr	r0, [pc, #204]	; (80012d0 <main+0x190>)
 8001202:	f7ff fbbf 	bl	8000984 <USART_Init>

	//Enabling interrupt for the peripheral
	USART_IRQ_Interrupt_Config(IRQ_NO_USART1, ENABLE);
 8001206:	2101      	movs	r1, #1
 8001208:	2025      	movs	r0, #37	; 0x25
 800120a:	f7ff fd59 	bl	8000cc0 <USART_IRQ_Interrupt_Config>
	//Enable peripheral
	USART_PeripheralControl(USART1, ENABLE);
 800120e:	2101      	movs	r1, #1
 8001210:	4830      	ldr	r0, [pc, #192]	; (80012d4 <main+0x194>)
 8001212:	f7ff fc4f 	bl	8000ab4 <USART_PeripheralControl>
	printf("Application is running \n");
 8001216:	4830      	ldr	r0, [pc, #192]	; (80012d8 <main+0x198>)
 8001218:	f000 fcb2 	bl	8001b80 <puts>

	for(;;){
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NUM_13)==PRESSED);
 800121c:	bf00      	nop
 800121e:	210d      	movs	r1, #13
 8001220:	4829      	ldr	r0, [pc, #164]	; (80012c8 <main+0x188>)
 8001222:	f7ff fa83 	bl	800072c <GPIO_ReadFromInputPin>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d0f8      	beq.n	800121e <main+0xde>

		delay();
 800122c:	f7ff ff72 	bl	8001114 <delay>
		if(cnt == 3){
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	2b03      	cmp	r3, #3
 8001234:	d101      	bne.n	800123a <main+0xfa>
			cnt = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
		}
		while(USART_ReceiveDataIT(&USART1Handle, (uint8_t*)RecBuf, strlen(Message[cnt])) != USART_BUSY_READY);
 800123a:	bf00      	nop
 800123c:	4a27      	ldr	r2, [pc, #156]	; (80012dc <main+0x19c>)
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001244:	4618      	mov	r0, r3
 8001246:	f7fe ffcb 	bl	80001e0 <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	4924      	ldr	r1, [pc, #144]	; (80012e0 <main+0x1a0>)
 8001250:	481f      	ldr	r0, [pc, #124]	; (80012d0 <main+0x190>)
 8001252:	f7ff fd0b 	bl	8000c6c <USART_ReceiveDataIT>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1ef      	bne.n	800123c <main+0xfc>
		//while(USART_ReceiveDataIT(&USART1Handle, (uint8_t*)RecBuf, 17) != USART_BUSY_READY);

		USART_SendData(&USART1Handle, (uint8_t*)Message[cnt], strlen(Message[cnt]));
 800125c:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <main+0x19c>)
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001264:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <main+0x19c>)
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126c:	4618      	mov	r0, r3
 800126e:	f7fe ffb7 	bl	80001e0 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	4621      	mov	r1, r4
 8001278:	4815      	ldr	r0, [pc, #84]	; (80012d0 <main+0x190>)
 800127a:	f7ff fca9 	bl	8000bd0 <USART_SendData>
		printf("Transmitted : %s\n", Message[cnt]);
 800127e:	4a17      	ldr	r2, [pc, #92]	; (80012dc <main+0x19c>)
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001286:	4619      	mov	r1, r3
 8001288:	4816      	ldr	r0, [pc, #88]	; (80012e4 <main+0x1a4>)
 800128a:	f000 fc13 	bl	8001ab4 <iprintf>

		while(rxCmplt == RESET);
 800128e:	bf00      	nop
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <main+0x1a8>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0fb      	beq.n	8001290 <main+0x150>
		RecBuf[ strlen(Message[cnt]) + 1] = '\0';
 8001298:	4a10      	ldr	r2, [pc, #64]	; (80012dc <main+0x19c>)
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7fe ff9d 	bl	80001e0 <strlen>
 80012a6:	4603      	mov	r3, r0
 80012a8:	3301      	adds	r3, #1
 80012aa:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <main+0x1a0>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	54d1      	strb	r1, [r2, r3]
		printf("Received: %s\n", RecBuf);
 80012b0:	490b      	ldr	r1, [pc, #44]	; (80012e0 <main+0x1a0>)
 80012b2:	480e      	ldr	r0, [pc, #56]	; (80012ec <main+0x1ac>)
 80012b4:	f000 fbfe 	bl	8001ab4 <iprintf>
		rxCmplt = RESET;
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <main+0x1a8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
		cnt++;
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	3301      	adds	r3, #1
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NUM_13)==PRESSED);
 80012c4:	e7aa      	b.n	800121c <main+0xdc>
 80012c6:	bf00      	nop
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	200004a4 	.word	0x200004a4
 80012d4:	40011000 	.word	0x40011000
 80012d8:	080028b0 	.word	0x080028b0
 80012dc:	20000018 	.word	0x20000018
 80012e0:	200000a4 	.word	0x200000a4
 80012e4:	080028c8 	.word	0x080028c8
 80012e8:	200004c8 	.word	0x200004c8
 80012ec:	080028dc 	.word	0x080028dc

080012f0 <USART1_IRQHandler>:
	}
	return 0;
}
void USART1_IRQHandler(void){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	USART_IRQHandling(&USART1Handle);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <USART1_IRQHandler+0x10>)
 80012f6:	f7ff fd69 	bl	8000dcc <USART_IRQHandling>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200004a4 	.word	0x200004a4

08001304 <USART_ApplicationEventCallback>:

void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle, uint8_t ApEv){
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
	if(ApEv == USART_EVENT_RX_CMPLT){
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d102      	bne.n	800131c <USART_ApplicationEventCallback+0x18>
		rxCmplt = SET;
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <USART_ApplicationEventCallback+0x24>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
	} else if(ApEv == USART_EVENT_TX_CMPLT){
		;
	}
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	200004c8 	.word	0x200004c8

0800132c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <_sbrk+0x5c>)
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <_sbrk+0x60>)
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <_sbrk+0x64>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <_sbrk+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	429a      	cmp	r2, r3
 800135a:	d207      	bcs.n	800136c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800135c:	f000 fd3e 	bl	8001ddc <__errno>
 8001360:	4603      	mov	r3, r0
 8001362:	220c      	movs	r2, #12
 8001364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e009      	b.n	8001380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <_sbrk+0x64>)
 800137c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20020000 	.word	0x20020000
 800138c:	00000400 	.word	0x00000400
 8001390:	200004cc 	.word	0x200004cc
 8001394:	200006c8 	.word	0x200006c8

08001398 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001398:	480d      	ldr	r0, [pc, #52]	; (80013d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800139a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800139c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	; (80013d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <LoopForever+0xe>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	; (80013e4 <LoopForever+0x16>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013c6:	f000 fd0f 	bl	8001de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ca:	f7ff feb9 	bl	8001140 <main>

080013ce <LoopForever>:

LoopForever:
  b LoopForever
 80013ce:	e7fe      	b.n	80013ce <LoopForever>
  ldr   r0, =_estack
 80013d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80013dc:	08002940 	.word	0x08002940
  ldr r2, =_sbss
 80013e0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80013e4:	200006c8 	.word	0x200006c8

080013e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC_IRQHandler>
	...

080013ec <findslot>:
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <findslot+0x2c>)
 80013ee:	b510      	push	{r4, lr}
 80013f0:	4604      	mov	r4, r0
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	b118      	cbz	r0, 80013fe <findslot+0x12>
 80013f6:	6a03      	ldr	r3, [r0, #32]
 80013f8:	b90b      	cbnz	r3, 80013fe <findslot+0x12>
 80013fa:	f000 fb25 	bl	8001a48 <__sinit>
 80013fe:	2c13      	cmp	r4, #19
 8001400:	d807      	bhi.n	8001412 <findslot+0x26>
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <findslot+0x30>)
 8001404:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001408:	3201      	adds	r2, #1
 800140a:	d002      	beq.n	8001412 <findslot+0x26>
 800140c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001410:	bd10      	pop	{r4, pc}
 8001412:	2000      	movs	r0, #0
 8001414:	e7fc      	b.n	8001410 <findslot+0x24>
 8001416:	bf00      	nop
 8001418:	20000084 	.word	0x20000084
 800141c:	200004dc 	.word	0x200004dc

08001420 <error>:
 8001420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001422:	4604      	mov	r4, r0
 8001424:	f000 fcda 	bl	8001ddc <__errno>
 8001428:	2613      	movs	r6, #19
 800142a:	4605      	mov	r5, r0
 800142c:	2700      	movs	r7, #0
 800142e:	4630      	mov	r0, r6
 8001430:	4639      	mov	r1, r7
 8001432:	beab      	bkpt	0x00ab
 8001434:	4606      	mov	r6, r0
 8001436:	602e      	str	r6, [r5, #0]
 8001438:	4620      	mov	r0, r4
 800143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800143c <checkerror>:
 800143c:	1c43      	adds	r3, r0, #1
 800143e:	d101      	bne.n	8001444 <checkerror+0x8>
 8001440:	f7ff bfee 	b.w	8001420 <error>
 8001444:	4770      	bx	lr

08001446 <_swiread>:
 8001446:	b530      	push	{r4, r5, lr}
 8001448:	b085      	sub	sp, #20
 800144a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800144e:	9203      	str	r2, [sp, #12]
 8001450:	2406      	movs	r4, #6
 8001452:	ad01      	add	r5, sp, #4
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	beab      	bkpt	0x00ab
 800145a:	4604      	mov	r4, r0
 800145c:	4620      	mov	r0, r4
 800145e:	f7ff ffed 	bl	800143c <checkerror>
 8001462:	b005      	add	sp, #20
 8001464:	bd30      	pop	{r4, r5, pc}

08001466 <_read>:
 8001466:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001468:	4615      	mov	r5, r2
 800146a:	9101      	str	r1, [sp, #4]
 800146c:	f7ff ffbe 	bl	80013ec <findslot>
 8001470:	9901      	ldr	r1, [sp, #4]
 8001472:	4604      	mov	r4, r0
 8001474:	b938      	cbnz	r0, 8001486 <_read+0x20>
 8001476:	f000 fcb1 	bl	8001ddc <__errno>
 800147a:	2309      	movs	r3, #9
 800147c:	6003      	str	r3, [r0, #0]
 800147e:	f04f 30ff 	mov.w	r0, #4294967295
 8001482:	b003      	add	sp, #12
 8001484:	bd30      	pop	{r4, r5, pc}
 8001486:	6800      	ldr	r0, [r0, #0]
 8001488:	462a      	mov	r2, r5
 800148a:	f7ff ffdc 	bl	8001446 <_swiread>
 800148e:	1c43      	adds	r3, r0, #1
 8001490:	d0f7      	beq.n	8001482 <_read+0x1c>
 8001492:	6863      	ldr	r3, [r4, #4]
 8001494:	1a2a      	subs	r2, r5, r0
 8001496:	4413      	add	r3, r2
 8001498:	6063      	str	r3, [r4, #4]
 800149a:	4610      	mov	r0, r2
 800149c:	e7f1      	b.n	8001482 <_read+0x1c>

0800149e <_swilseek>:
 800149e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014a0:	460c      	mov	r4, r1
 80014a2:	4616      	mov	r6, r2
 80014a4:	f7ff ffa2 	bl	80013ec <findslot>
 80014a8:	4605      	mov	r5, r0
 80014aa:	b940      	cbnz	r0, 80014be <_swilseek+0x20>
 80014ac:	f000 fc96 	bl	8001ddc <__errno>
 80014b0:	2309      	movs	r3, #9
 80014b2:	6003      	str	r3, [r0, #0]
 80014b4:	f04f 34ff 	mov.w	r4, #4294967295
 80014b8:	4620      	mov	r0, r4
 80014ba:	b003      	add	sp, #12
 80014bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014be:	2e02      	cmp	r6, #2
 80014c0:	d903      	bls.n	80014ca <_swilseek+0x2c>
 80014c2:	f000 fc8b 	bl	8001ddc <__errno>
 80014c6:	2316      	movs	r3, #22
 80014c8:	e7f3      	b.n	80014b2 <_swilseek+0x14>
 80014ca:	2e01      	cmp	r6, #1
 80014cc:	d112      	bne.n	80014f4 <_swilseek+0x56>
 80014ce:	6843      	ldr	r3, [r0, #4]
 80014d0:	18e4      	adds	r4, r4, r3
 80014d2:	d4f6      	bmi.n	80014c2 <_swilseek+0x24>
 80014d4:	682b      	ldr	r3, [r5, #0]
 80014d6:	260a      	movs	r6, #10
 80014d8:	e9cd 3400 	strd	r3, r4, [sp]
 80014dc:	466f      	mov	r7, sp
 80014de:	4630      	mov	r0, r6
 80014e0:	4639      	mov	r1, r7
 80014e2:	beab      	bkpt	0x00ab
 80014e4:	4606      	mov	r6, r0
 80014e6:	4630      	mov	r0, r6
 80014e8:	f7ff ffa8 	bl	800143c <checkerror>
 80014ec:	2800      	cmp	r0, #0
 80014ee:	dbe1      	blt.n	80014b4 <_swilseek+0x16>
 80014f0:	606c      	str	r4, [r5, #4]
 80014f2:	e7e1      	b.n	80014b8 <_swilseek+0x1a>
 80014f4:	2e02      	cmp	r6, #2
 80014f6:	6803      	ldr	r3, [r0, #0]
 80014f8:	d1ec      	bne.n	80014d4 <_swilseek+0x36>
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	260c      	movs	r6, #12
 80014fe:	466f      	mov	r7, sp
 8001500:	4630      	mov	r0, r6
 8001502:	4639      	mov	r1, r7
 8001504:	beab      	bkpt	0x00ab
 8001506:	4606      	mov	r6, r0
 8001508:	4630      	mov	r0, r6
 800150a:	f7ff ff97 	bl	800143c <checkerror>
 800150e:	1c43      	adds	r3, r0, #1
 8001510:	d0d0      	beq.n	80014b4 <_swilseek+0x16>
 8001512:	4404      	add	r4, r0
 8001514:	e7de      	b.n	80014d4 <_swilseek+0x36>

08001516 <_lseek>:
 8001516:	f7ff bfc2 	b.w	800149e <_swilseek>

0800151a <_swiwrite>:
 800151a:	b530      	push	{r4, r5, lr}
 800151c:	b085      	sub	sp, #20
 800151e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001522:	9203      	str	r2, [sp, #12]
 8001524:	2405      	movs	r4, #5
 8001526:	ad01      	add	r5, sp, #4
 8001528:	4620      	mov	r0, r4
 800152a:	4629      	mov	r1, r5
 800152c:	beab      	bkpt	0x00ab
 800152e:	4604      	mov	r4, r0
 8001530:	4620      	mov	r0, r4
 8001532:	f7ff ff83 	bl	800143c <checkerror>
 8001536:	b005      	add	sp, #20
 8001538:	bd30      	pop	{r4, r5, pc}

0800153a <_write>:
 800153a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800153c:	4615      	mov	r5, r2
 800153e:	9101      	str	r1, [sp, #4]
 8001540:	f7ff ff54 	bl	80013ec <findslot>
 8001544:	9901      	ldr	r1, [sp, #4]
 8001546:	4604      	mov	r4, r0
 8001548:	b930      	cbnz	r0, 8001558 <_write+0x1e>
 800154a:	f000 fc47 	bl	8001ddc <__errno>
 800154e:	2309      	movs	r3, #9
 8001550:	6003      	str	r3, [r0, #0]
 8001552:	f04f 30ff 	mov.w	r0, #4294967295
 8001556:	e012      	b.n	800157e <_write+0x44>
 8001558:	6800      	ldr	r0, [r0, #0]
 800155a:	462a      	mov	r2, r5
 800155c:	f7ff ffdd 	bl	800151a <_swiwrite>
 8001560:	2800      	cmp	r0, #0
 8001562:	dbf6      	blt.n	8001552 <_write+0x18>
 8001564:	6862      	ldr	r2, [r4, #4]
 8001566:	1a2b      	subs	r3, r5, r0
 8001568:	441a      	add	r2, r3
 800156a:	42a8      	cmp	r0, r5
 800156c:	6062      	str	r2, [r4, #4]
 800156e:	d105      	bne.n	800157c <_write+0x42>
 8001570:	2000      	movs	r0, #0
 8001572:	b003      	add	sp, #12
 8001574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001578:	f7ff bf52 	b.w	8001420 <error>
 800157c:	4618      	mov	r0, r3
 800157e:	b003      	add	sp, #12
 8001580:	bd30      	pop	{r4, r5, pc}

08001582 <_swiclose>:
 8001582:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001584:	2402      	movs	r4, #2
 8001586:	9001      	str	r0, [sp, #4]
 8001588:	ad01      	add	r5, sp, #4
 800158a:	4620      	mov	r0, r4
 800158c:	4629      	mov	r1, r5
 800158e:	beab      	bkpt	0x00ab
 8001590:	4604      	mov	r4, r0
 8001592:	4620      	mov	r0, r4
 8001594:	f7ff ff52 	bl	800143c <checkerror>
 8001598:	b003      	add	sp, #12
 800159a:	bd30      	pop	{r4, r5, pc}

0800159c <_close>:
 800159c:	b538      	push	{r3, r4, r5, lr}
 800159e:	4605      	mov	r5, r0
 80015a0:	f7ff ff24 	bl	80013ec <findslot>
 80015a4:	4604      	mov	r4, r0
 80015a6:	b930      	cbnz	r0, 80015b6 <_close+0x1a>
 80015a8:	f000 fc18 	bl	8001ddc <__errno>
 80015ac:	2309      	movs	r3, #9
 80015ae:	6003      	str	r3, [r0, #0]
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	bd38      	pop	{r3, r4, r5, pc}
 80015b6:	3d01      	subs	r5, #1
 80015b8:	2d01      	cmp	r5, #1
 80015ba:	d809      	bhi.n	80015d0 <_close+0x34>
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <_close+0x48>)
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d104      	bne.n	80015d0 <_close+0x34>
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	6003      	str	r3, [r0, #0]
 80015cc:	2000      	movs	r0, #0
 80015ce:	e7f1      	b.n	80015b4 <_close+0x18>
 80015d0:	6820      	ldr	r0, [r4, #0]
 80015d2:	f7ff ffd6 	bl	8001582 <_swiclose>
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d1ec      	bne.n	80015b4 <_close+0x18>
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	6023      	str	r3, [r4, #0]
 80015e0:	e7e8      	b.n	80015b4 <_close+0x18>
 80015e2:	bf00      	nop
 80015e4:	200004dc 	.word	0x200004dc

080015e8 <_swistat>:
 80015e8:	b570      	push	{r4, r5, r6, lr}
 80015ea:	460c      	mov	r4, r1
 80015ec:	f7ff fefe 	bl	80013ec <findslot>
 80015f0:	4605      	mov	r5, r0
 80015f2:	b930      	cbnz	r0, 8001602 <_swistat+0x1a>
 80015f4:	f000 fbf2 	bl	8001ddc <__errno>
 80015f8:	2309      	movs	r3, #9
 80015fa:	6003      	str	r3, [r0, #0]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	bd70      	pop	{r4, r5, r6, pc}
 8001602:	6863      	ldr	r3, [r4, #4]
 8001604:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001608:	6063      	str	r3, [r4, #4]
 800160a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800160e:	64a3      	str	r3, [r4, #72]	; 0x48
 8001610:	260c      	movs	r6, #12
 8001612:	4630      	mov	r0, r6
 8001614:	4629      	mov	r1, r5
 8001616:	beab      	bkpt	0x00ab
 8001618:	4605      	mov	r5, r0
 800161a:	4628      	mov	r0, r5
 800161c:	f7ff ff0e 	bl	800143c <checkerror>
 8001620:	1c43      	adds	r3, r0, #1
 8001622:	bf1c      	itt	ne
 8001624:	6120      	strne	r0, [r4, #16]
 8001626:	2000      	movne	r0, #0
 8001628:	e7ea      	b.n	8001600 <_swistat+0x18>

0800162a <_fstat>:
 800162a:	460b      	mov	r3, r1
 800162c:	b510      	push	{r4, lr}
 800162e:	2100      	movs	r1, #0
 8001630:	4604      	mov	r4, r0
 8001632:	2258      	movs	r2, #88	; 0x58
 8001634:	4618      	mov	r0, r3
 8001636:	f000 fb83 	bl	8001d40 <memset>
 800163a:	4601      	mov	r1, r0
 800163c:	4620      	mov	r0, r4
 800163e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001642:	f7ff bfd1 	b.w	80015e8 <_swistat>

08001646 <_stat>:
 8001646:	b538      	push	{r3, r4, r5, lr}
 8001648:	460d      	mov	r5, r1
 800164a:	4604      	mov	r4, r0
 800164c:	2258      	movs	r2, #88	; 0x58
 800164e:	2100      	movs	r1, #0
 8001650:	4628      	mov	r0, r5
 8001652:	f000 fb75 	bl	8001d40 <memset>
 8001656:	4620      	mov	r0, r4
 8001658:	2100      	movs	r1, #0
 800165a:	f000 f811 	bl	8001680 <_swiopen>
 800165e:	1c43      	adds	r3, r0, #1
 8001660:	4604      	mov	r4, r0
 8001662:	d00b      	beq.n	800167c <_stat+0x36>
 8001664:	686b      	ldr	r3, [r5, #4]
 8001666:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800166a:	606b      	str	r3, [r5, #4]
 800166c:	4629      	mov	r1, r5
 800166e:	f7ff ffbb 	bl	80015e8 <_swistat>
 8001672:	4605      	mov	r5, r0
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff ff91 	bl	800159c <_close>
 800167a:	462c      	mov	r4, r5
 800167c:	4620      	mov	r0, r4
 800167e:	bd38      	pop	{r3, r4, r5, pc}

08001680 <_swiopen>:
 8001680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001684:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001730 <_swiopen+0xb0>
 8001688:	b097      	sub	sp, #92	; 0x5c
 800168a:	4607      	mov	r7, r0
 800168c:	460e      	mov	r6, r1
 800168e:	2500      	movs	r5, #0
 8001690:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8001694:	1c61      	adds	r1, r4, #1
 8001696:	d037      	beq.n	8001708 <_swiopen+0x88>
 8001698:	3501      	adds	r5, #1
 800169a:	2d14      	cmp	r5, #20
 800169c:	d1f8      	bne.n	8001690 <_swiopen+0x10>
 800169e:	f000 fb9d 	bl	8001ddc <__errno>
 80016a2:	2318      	movs	r3, #24
 80016a4:	6003      	str	r3, [r0, #0]
 80016a6:	f04f 34ff 	mov.w	r4, #4294967295
 80016aa:	e03d      	b.n	8001728 <_swiopen+0xa8>
 80016ac:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80016b0:	f240 6301 	movw	r3, #1537	; 0x601
 80016b4:	07b2      	lsls	r2, r6, #30
 80016b6:	bf48      	it	mi
 80016b8:	f044 0402 	orrmi.w	r4, r4, #2
 80016bc:	421e      	tst	r6, r3
 80016be:	bf18      	it	ne
 80016c0:	f044 0404 	orrne.w	r4, r4, #4
 80016c4:	0733      	lsls	r3, r6, #28
 80016c6:	bf48      	it	mi
 80016c8:	f024 0404 	bicmi.w	r4, r4, #4
 80016cc:	4638      	mov	r0, r7
 80016ce:	bf48      	it	mi
 80016d0:	f044 0408 	orrmi.w	r4, r4, #8
 80016d4:	9700      	str	r7, [sp, #0]
 80016d6:	f7fe fd83 	bl	80001e0 <strlen>
 80016da:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80016de:	2401      	movs	r4, #1
 80016e0:	4620      	mov	r0, r4
 80016e2:	4649      	mov	r1, r9
 80016e4:	beab      	bkpt	0x00ab
 80016e6:	4604      	mov	r4, r0
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	db08      	blt.n	80016fe <_swiopen+0x7e>
 80016ec:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80016f0:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c8 3004 	str.w	r3, [r8, #4]
 80016fa:	462c      	mov	r4, r5
 80016fc:	e014      	b.n	8001728 <_swiopen+0xa8>
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff fe8e 	bl	8001420 <error>
 8001704:	4604      	mov	r4, r0
 8001706:	e00f      	b.n	8001728 <_swiopen+0xa8>
 8001708:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800170c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001710:	46e9      	mov	r9, sp
 8001712:	d1cb      	bne.n	80016ac <_swiopen+0x2c>
 8001714:	4649      	mov	r1, r9
 8001716:	4638      	mov	r0, r7
 8001718:	f7ff ff95 	bl	8001646 <_stat>
 800171c:	3001      	adds	r0, #1
 800171e:	d0c5      	beq.n	80016ac <_swiopen+0x2c>
 8001720:	f000 fb5c 	bl	8001ddc <__errno>
 8001724:	2311      	movs	r3, #17
 8001726:	6003      	str	r3, [r0, #0]
 8001728:	4620      	mov	r0, r4
 800172a:	b017      	add	sp, #92	; 0x5c
 800172c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001730:	200004dc 	.word	0x200004dc

08001734 <_get_semihosting_exts>:
 8001734:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001738:	4606      	mov	r6, r0
 800173a:	460f      	mov	r7, r1
 800173c:	482a      	ldr	r0, [pc, #168]	; (80017e8 <_get_semihosting_exts+0xb4>)
 800173e:	2100      	movs	r1, #0
 8001740:	4615      	mov	r5, r2
 8001742:	f7ff ff9d 	bl	8001680 <_swiopen>
 8001746:	462a      	mov	r2, r5
 8001748:	4604      	mov	r4, r0
 800174a:	2100      	movs	r1, #0
 800174c:	4630      	mov	r0, r6
 800174e:	f000 faf7 	bl	8001d40 <memset>
 8001752:	1c63      	adds	r3, r4, #1
 8001754:	d016      	beq.n	8001784 <_get_semihosting_exts+0x50>
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff fe48 	bl	80013ec <findslot>
 800175c:	f04f 080c 	mov.w	r8, #12
 8001760:	4681      	mov	r9, r0
 8001762:	4640      	mov	r0, r8
 8001764:	4649      	mov	r1, r9
 8001766:	beab      	bkpt	0x00ab
 8001768:	4680      	mov	r8, r0
 800176a:	4640      	mov	r0, r8
 800176c:	f7ff fe66 	bl	800143c <checkerror>
 8001770:	2803      	cmp	r0, #3
 8001772:	dd02      	ble.n	800177a <_get_semihosting_exts+0x46>
 8001774:	1ec3      	subs	r3, r0, #3
 8001776:	42ab      	cmp	r3, r5
 8001778:	dc08      	bgt.n	800178c <_get_semihosting_exts+0x58>
 800177a:	4620      	mov	r0, r4
 800177c:	f7ff ff0e 	bl	800159c <_close>
 8001780:	f04f 34ff 	mov.w	r4, #4294967295
 8001784:	4620      	mov	r0, r4
 8001786:	b003      	add	sp, #12
 8001788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800178c:	2204      	movs	r2, #4
 800178e:	eb0d 0102 	add.w	r1, sp, r2
 8001792:	4620      	mov	r0, r4
 8001794:	f7ff fe67 	bl	8001466 <_read>
 8001798:	2803      	cmp	r0, #3
 800179a:	ddee      	ble.n	800177a <_get_semihosting_exts+0x46>
 800179c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80017a0:	2b53      	cmp	r3, #83	; 0x53
 80017a2:	d1ea      	bne.n	800177a <_get_semihosting_exts+0x46>
 80017a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80017a8:	2b48      	cmp	r3, #72	; 0x48
 80017aa:	d1e6      	bne.n	800177a <_get_semihosting_exts+0x46>
 80017ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80017b0:	2b46      	cmp	r3, #70	; 0x46
 80017b2:	d1e2      	bne.n	800177a <_get_semihosting_exts+0x46>
 80017b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017b8:	2b42      	cmp	r3, #66	; 0x42
 80017ba:	d1de      	bne.n	800177a <_get_semihosting_exts+0x46>
 80017bc:	2201      	movs	r2, #1
 80017be:	4639      	mov	r1, r7
 80017c0:	4620      	mov	r0, r4
 80017c2:	f7ff fe6c 	bl	800149e <_swilseek>
 80017c6:	2800      	cmp	r0, #0
 80017c8:	dbd7      	blt.n	800177a <_get_semihosting_exts+0x46>
 80017ca:	462a      	mov	r2, r5
 80017cc:	4631      	mov	r1, r6
 80017ce:	4620      	mov	r0, r4
 80017d0:	f7ff fe49 	bl	8001466 <_read>
 80017d4:	4605      	mov	r5, r0
 80017d6:	4620      	mov	r0, r4
 80017d8:	f7ff fee0 	bl	800159c <_close>
 80017dc:	4628      	mov	r0, r5
 80017de:	f7ff fe2d 	bl	800143c <checkerror>
 80017e2:	4604      	mov	r4, r0
 80017e4:	e7ce      	b.n	8001784 <_get_semihosting_exts+0x50>
 80017e6:	bf00      	nop
 80017e8:	080028ea 	.word	0x080028ea

080017ec <initialise_semihosting_exts>:
 80017ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80017ee:	4d0a      	ldr	r5, [pc, #40]	; (8001818 <initialise_semihosting_exts+0x2c>)
 80017f0:	4c0a      	ldr	r4, [pc, #40]	; (800181c <initialise_semihosting_exts+0x30>)
 80017f2:	2100      	movs	r1, #0
 80017f4:	2201      	movs	r2, #1
 80017f6:	a801      	add	r0, sp, #4
 80017f8:	6029      	str	r1, [r5, #0]
 80017fa:	6022      	str	r2, [r4, #0]
 80017fc:	f7ff ff9a 	bl	8001734 <_get_semihosting_exts>
 8001800:	2800      	cmp	r0, #0
 8001802:	dd07      	ble.n	8001814 <initialise_semihosting_exts+0x28>
 8001804:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001808:	f003 0201 	and.w	r2, r3, #1
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	602a      	str	r2, [r5, #0]
 8001812:	6023      	str	r3, [r4, #0]
 8001814:	b003      	add	sp, #12
 8001816:	bd30      	pop	{r4, r5, pc}
 8001818:	20000024 	.word	0x20000024
 800181c:	20000028 	.word	0x20000028

08001820 <_has_ext_stdout_stderr>:
 8001820:	b510      	push	{r4, lr}
 8001822:	4c04      	ldr	r4, [pc, #16]	; (8001834 <_has_ext_stdout_stderr+0x14>)
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	da01      	bge.n	800182e <_has_ext_stdout_stderr+0xe>
 800182a:	f7ff ffdf 	bl	80017ec <initialise_semihosting_exts>
 800182e:	6820      	ldr	r0, [r4, #0]
 8001830:	bd10      	pop	{r4, pc}
 8001832:	bf00      	nop
 8001834:	20000028 	.word	0x20000028

08001838 <initialise_monitor_handles>:
 8001838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800183c:	b085      	sub	sp, #20
 800183e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80018f0 <initialise_monitor_handles+0xb8>
 8001842:	f8cd 9004 	str.w	r9, [sp, #4]
 8001846:	2303      	movs	r3, #3
 8001848:	2400      	movs	r4, #0
 800184a:	9303      	str	r3, [sp, #12]
 800184c:	af01      	add	r7, sp, #4
 800184e:	9402      	str	r4, [sp, #8]
 8001850:	2501      	movs	r5, #1
 8001852:	4628      	mov	r0, r5
 8001854:	4639      	mov	r1, r7
 8001856:	beab      	bkpt	0x00ab
 8001858:	4605      	mov	r5, r0
 800185a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80018f4 <initialise_monitor_handles+0xbc>
 800185e:	4623      	mov	r3, r4
 8001860:	4c20      	ldr	r4, [pc, #128]	; (80018e4 <initialise_monitor_handles+0xac>)
 8001862:	f8c8 5000 	str.w	r5, [r8]
 8001866:	f04f 32ff 	mov.w	r2, #4294967295
 800186a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800186e:	3301      	adds	r3, #1
 8001870:	2b14      	cmp	r3, #20
 8001872:	d1fa      	bne.n	800186a <initialise_monitor_handles+0x32>
 8001874:	f7ff ffd4 	bl	8001820 <_has_ext_stdout_stderr>
 8001878:	4d1b      	ldr	r5, [pc, #108]	; (80018e8 <initialise_monitor_handles+0xb0>)
 800187a:	b1d0      	cbz	r0, 80018b2 <initialise_monitor_handles+0x7a>
 800187c:	f04f 0a03 	mov.w	sl, #3
 8001880:	2304      	movs	r3, #4
 8001882:	f8cd 9004 	str.w	r9, [sp, #4]
 8001886:	2601      	movs	r6, #1
 8001888:	f8cd a00c 	str.w	sl, [sp, #12]
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	4630      	mov	r0, r6
 8001890:	4639      	mov	r1, r7
 8001892:	beab      	bkpt	0x00ab
 8001894:	4683      	mov	fp, r0
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <initialise_monitor_handles+0xb4>)
 8001898:	f8cd 9004 	str.w	r9, [sp, #4]
 800189c:	f8c3 b000 	str.w	fp, [r3]
 80018a0:	2308      	movs	r3, #8
 80018a2:	f8cd a00c 	str.w	sl, [sp, #12]
 80018a6:	9302      	str	r3, [sp, #8]
 80018a8:	4630      	mov	r0, r6
 80018aa:	4639      	mov	r1, r7
 80018ac:	beab      	bkpt	0x00ab
 80018ae:	4606      	mov	r6, r0
 80018b0:	602e      	str	r6, [r5, #0]
 80018b2:	682b      	ldr	r3, [r5, #0]
 80018b4:	3301      	adds	r3, #1
 80018b6:	bf02      	ittt	eq
 80018b8:	4b0c      	ldreq	r3, [pc, #48]	; (80018ec <initialise_monitor_handles+0xb4>)
 80018ba:	681b      	ldreq	r3, [r3, #0]
 80018bc:	602b      	streq	r3, [r5, #0]
 80018be:	2600      	movs	r6, #0
 80018c0:	f8d8 3000 	ldr.w	r3, [r8]
 80018c4:	6023      	str	r3, [r4, #0]
 80018c6:	6066      	str	r6, [r4, #4]
 80018c8:	f7ff ffaa 	bl	8001820 <_has_ext_stdout_stderr>
 80018cc:	b130      	cbz	r0, 80018dc <initialise_monitor_handles+0xa4>
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <initialise_monitor_handles+0xb4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80018d6:	682b      	ldr	r3, [r5, #0]
 80018d8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80018dc:	b005      	add	sp, #20
 80018de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018e2:	bf00      	nop
 80018e4:	200004dc 	.word	0x200004dc
 80018e8:	200004d0 	.word	0x200004d0
 80018ec:	200004d8 	.word	0x200004d8
 80018f0:	08002900 	.word	0x08002900
 80018f4:	200004d4 	.word	0x200004d4

080018f8 <_isatty>:
 80018f8:	b570      	push	{r4, r5, r6, lr}
 80018fa:	f7ff fd77 	bl	80013ec <findslot>
 80018fe:	2509      	movs	r5, #9
 8001900:	4604      	mov	r4, r0
 8001902:	b920      	cbnz	r0, 800190e <_isatty+0x16>
 8001904:	f000 fa6a 	bl	8001ddc <__errno>
 8001908:	6005      	str	r5, [r0, #0]
 800190a:	4620      	mov	r0, r4
 800190c:	bd70      	pop	{r4, r5, r6, pc}
 800190e:	4628      	mov	r0, r5
 8001910:	4621      	mov	r1, r4
 8001912:	beab      	bkpt	0x00ab
 8001914:	4604      	mov	r4, r0
 8001916:	2c01      	cmp	r4, #1
 8001918:	d0f7      	beq.n	800190a <_isatty+0x12>
 800191a:	f000 fa5f 	bl	8001ddc <__errno>
 800191e:	2400      	movs	r4, #0
 8001920:	4605      	mov	r5, r0
 8001922:	2613      	movs	r6, #19
 8001924:	4630      	mov	r0, r6
 8001926:	4621      	mov	r1, r4
 8001928:	beab      	bkpt	0x00ab
 800192a:	4606      	mov	r6, r0
 800192c:	602e      	str	r6, [r5, #0]
 800192e:	e7ec      	b.n	800190a <_isatty+0x12>

08001930 <std>:
 8001930:	2300      	movs	r3, #0
 8001932:	b510      	push	{r4, lr}
 8001934:	4604      	mov	r4, r0
 8001936:	e9c0 3300 	strd	r3, r3, [r0]
 800193a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800193e:	6083      	str	r3, [r0, #8]
 8001940:	8181      	strh	r1, [r0, #12]
 8001942:	6643      	str	r3, [r0, #100]	; 0x64
 8001944:	81c2      	strh	r2, [r0, #14]
 8001946:	6183      	str	r3, [r0, #24]
 8001948:	4619      	mov	r1, r3
 800194a:	2208      	movs	r2, #8
 800194c:	305c      	adds	r0, #92	; 0x5c
 800194e:	f000 f9f7 	bl	8001d40 <memset>
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <std+0x58>)
 8001954:	6263      	str	r3, [r4, #36]	; 0x24
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <std+0x5c>)
 8001958:	62a3      	str	r3, [r4, #40]	; 0x28
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <std+0x60>)
 800195c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <std+0x64>)
 8001960:	6323      	str	r3, [r4, #48]	; 0x30
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <std+0x68>)
 8001964:	6224      	str	r4, [r4, #32]
 8001966:	429c      	cmp	r4, r3
 8001968:	d006      	beq.n	8001978 <std+0x48>
 800196a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800196e:	4294      	cmp	r4, r2
 8001970:	d002      	beq.n	8001978 <std+0x48>
 8001972:	33d0      	adds	r3, #208	; 0xd0
 8001974:	429c      	cmp	r4, r3
 8001976:	d105      	bne.n	8001984 <std+0x54>
 8001978:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800197c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001980:	f000 ba56 	b.w	8001e30 <__retarget_lock_init_recursive>
 8001984:	bd10      	pop	{r4, pc}
 8001986:	bf00      	nop
 8001988:	08001b91 	.word	0x08001b91
 800198c:	08001bb3 	.word	0x08001bb3
 8001990:	08001beb 	.word	0x08001beb
 8001994:	08001c0f 	.word	0x08001c0f
 8001998:	2000057c 	.word	0x2000057c

0800199c <stdio_exit_handler>:
 800199c:	4a02      	ldr	r2, [pc, #8]	; (80019a8 <stdio_exit_handler+0xc>)
 800199e:	4903      	ldr	r1, [pc, #12]	; (80019ac <stdio_exit_handler+0x10>)
 80019a0:	4803      	ldr	r0, [pc, #12]	; (80019b0 <stdio_exit_handler+0x14>)
 80019a2:	f000 b869 	b.w	8001a78 <_fwalk_sglue>
 80019a6:	bf00      	nop
 80019a8:	2000002c 	.word	0x2000002c
 80019ac:	080026dd 	.word	0x080026dd
 80019b0:	20000038 	.word	0x20000038

080019b4 <cleanup_stdio>:
 80019b4:	6841      	ldr	r1, [r0, #4]
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <cleanup_stdio+0x34>)
 80019b8:	4299      	cmp	r1, r3
 80019ba:	b510      	push	{r4, lr}
 80019bc:	4604      	mov	r4, r0
 80019be:	d001      	beq.n	80019c4 <cleanup_stdio+0x10>
 80019c0:	f000 fe8c 	bl	80026dc <_fflush_r>
 80019c4:	68a1      	ldr	r1, [r4, #8]
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <cleanup_stdio+0x38>)
 80019c8:	4299      	cmp	r1, r3
 80019ca:	d002      	beq.n	80019d2 <cleanup_stdio+0x1e>
 80019cc:	4620      	mov	r0, r4
 80019ce:	f000 fe85 	bl	80026dc <_fflush_r>
 80019d2:	68e1      	ldr	r1, [r4, #12]
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <cleanup_stdio+0x3c>)
 80019d6:	4299      	cmp	r1, r3
 80019d8:	d004      	beq.n	80019e4 <cleanup_stdio+0x30>
 80019da:	4620      	mov	r0, r4
 80019dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019e0:	f000 be7c 	b.w	80026dc <_fflush_r>
 80019e4:	bd10      	pop	{r4, pc}
 80019e6:	bf00      	nop
 80019e8:	2000057c 	.word	0x2000057c
 80019ec:	200005e4 	.word	0x200005e4
 80019f0:	2000064c 	.word	0x2000064c

080019f4 <global_stdio_init.part.0>:
 80019f4:	b510      	push	{r4, lr}
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <global_stdio_init.part.0+0x30>)
 80019f8:	4c0b      	ldr	r4, [pc, #44]	; (8001a28 <global_stdio_init.part.0+0x34>)
 80019fa:	4a0c      	ldr	r2, [pc, #48]	; (8001a2c <global_stdio_init.part.0+0x38>)
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	4620      	mov	r0, r4
 8001a00:	2200      	movs	r2, #0
 8001a02:	2104      	movs	r1, #4
 8001a04:	f7ff ff94 	bl	8001930 <std>
 8001a08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2109      	movs	r1, #9
 8001a10:	f7ff ff8e 	bl	8001930 <std>
 8001a14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001a18:	2202      	movs	r2, #2
 8001a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a1e:	2112      	movs	r1, #18
 8001a20:	f7ff bf86 	b.w	8001930 <std>
 8001a24:	200006b4 	.word	0x200006b4
 8001a28:	2000057c 	.word	0x2000057c
 8001a2c:	0800199d 	.word	0x0800199d

08001a30 <__sfp_lock_acquire>:
 8001a30:	4801      	ldr	r0, [pc, #4]	; (8001a38 <__sfp_lock_acquire+0x8>)
 8001a32:	f000 b9fe 	b.w	8001e32 <__retarget_lock_acquire_recursive>
 8001a36:	bf00      	nop
 8001a38:	200006bd 	.word	0x200006bd

08001a3c <__sfp_lock_release>:
 8001a3c:	4801      	ldr	r0, [pc, #4]	; (8001a44 <__sfp_lock_release+0x8>)
 8001a3e:	f000 b9f9 	b.w	8001e34 <__retarget_lock_release_recursive>
 8001a42:	bf00      	nop
 8001a44:	200006bd 	.word	0x200006bd

08001a48 <__sinit>:
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	f7ff fff0 	bl	8001a30 <__sfp_lock_acquire>
 8001a50:	6a23      	ldr	r3, [r4, #32]
 8001a52:	b11b      	cbz	r3, 8001a5c <__sinit+0x14>
 8001a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a58:	f7ff bff0 	b.w	8001a3c <__sfp_lock_release>
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <__sinit+0x28>)
 8001a5e:	6223      	str	r3, [r4, #32]
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <__sinit+0x2c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f5      	bne.n	8001a54 <__sinit+0xc>
 8001a68:	f7ff ffc4 	bl	80019f4 <global_stdio_init.part.0>
 8001a6c:	e7f2      	b.n	8001a54 <__sinit+0xc>
 8001a6e:	bf00      	nop
 8001a70:	080019b5 	.word	0x080019b5
 8001a74:	200006b4 	.word	0x200006b4

08001a78 <_fwalk_sglue>:
 8001a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a7c:	4607      	mov	r7, r0
 8001a7e:	4688      	mov	r8, r1
 8001a80:	4614      	mov	r4, r2
 8001a82:	2600      	movs	r6, #0
 8001a84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a88:	f1b9 0901 	subs.w	r9, r9, #1
 8001a8c:	d505      	bpl.n	8001a9a <_fwalk_sglue+0x22>
 8001a8e:	6824      	ldr	r4, [r4, #0]
 8001a90:	2c00      	cmp	r4, #0
 8001a92:	d1f7      	bne.n	8001a84 <_fwalk_sglue+0xc>
 8001a94:	4630      	mov	r0, r6
 8001a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a9a:	89ab      	ldrh	r3, [r5, #12]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d907      	bls.n	8001ab0 <_fwalk_sglue+0x38>
 8001aa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	d003      	beq.n	8001ab0 <_fwalk_sglue+0x38>
 8001aa8:	4629      	mov	r1, r5
 8001aaa:	4638      	mov	r0, r7
 8001aac:	47c0      	blx	r8
 8001aae:	4306      	orrs	r6, r0
 8001ab0:	3568      	adds	r5, #104	; 0x68
 8001ab2:	e7e9      	b.n	8001a88 <_fwalk_sglue+0x10>

08001ab4 <iprintf>:
 8001ab4:	b40f      	push	{r0, r1, r2, r3}
 8001ab6:	b507      	push	{r0, r1, r2, lr}
 8001ab8:	4906      	ldr	r1, [pc, #24]	; (8001ad4 <iprintf+0x20>)
 8001aba:	ab04      	add	r3, sp, #16
 8001abc:	6808      	ldr	r0, [r1, #0]
 8001abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ac2:	6881      	ldr	r1, [r0, #8]
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	f000 fad9 	bl	800207c <_vfiprintf_r>
 8001aca:	b003      	add	sp, #12
 8001acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ad0:	b004      	add	sp, #16
 8001ad2:	4770      	bx	lr
 8001ad4:	20000084 	.word	0x20000084

08001ad8 <_puts_r>:
 8001ad8:	6a03      	ldr	r3, [r0, #32]
 8001ada:	b570      	push	{r4, r5, r6, lr}
 8001adc:	6884      	ldr	r4, [r0, #8]
 8001ade:	4605      	mov	r5, r0
 8001ae0:	460e      	mov	r6, r1
 8001ae2:	b90b      	cbnz	r3, 8001ae8 <_puts_r+0x10>
 8001ae4:	f7ff ffb0 	bl	8001a48 <__sinit>
 8001ae8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001aea:	07db      	lsls	r3, r3, #31
 8001aec:	d405      	bmi.n	8001afa <_puts_r+0x22>
 8001aee:	89a3      	ldrh	r3, [r4, #12]
 8001af0:	0598      	lsls	r0, r3, #22
 8001af2:	d402      	bmi.n	8001afa <_puts_r+0x22>
 8001af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001af6:	f000 f99c 	bl	8001e32 <__retarget_lock_acquire_recursive>
 8001afa:	89a3      	ldrh	r3, [r4, #12]
 8001afc:	0719      	lsls	r1, r3, #28
 8001afe:	d513      	bpl.n	8001b28 <_puts_r+0x50>
 8001b00:	6923      	ldr	r3, [r4, #16]
 8001b02:	b18b      	cbz	r3, 8001b28 <_puts_r+0x50>
 8001b04:	3e01      	subs	r6, #1
 8001b06:	68a3      	ldr	r3, [r4, #8]
 8001b08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60a3      	str	r3, [r4, #8]
 8001b10:	b9e9      	cbnz	r1, 8001b4e <_puts_r+0x76>
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	da2e      	bge.n	8001b74 <_puts_r+0x9c>
 8001b16:	4622      	mov	r2, r4
 8001b18:	210a      	movs	r1, #10
 8001b1a:	4628      	mov	r0, r5
 8001b1c:	f000 f87b 	bl	8001c16 <__swbuf_r>
 8001b20:	3001      	adds	r0, #1
 8001b22:	d007      	beq.n	8001b34 <_puts_r+0x5c>
 8001b24:	250a      	movs	r5, #10
 8001b26:	e007      	b.n	8001b38 <_puts_r+0x60>
 8001b28:	4621      	mov	r1, r4
 8001b2a:	4628      	mov	r0, r5
 8001b2c:	f000 f8b0 	bl	8001c90 <__swsetup_r>
 8001b30:	2800      	cmp	r0, #0
 8001b32:	d0e7      	beq.n	8001b04 <_puts_r+0x2c>
 8001b34:	f04f 35ff 	mov.w	r5, #4294967295
 8001b38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b3a:	07da      	lsls	r2, r3, #31
 8001b3c:	d405      	bmi.n	8001b4a <_puts_r+0x72>
 8001b3e:	89a3      	ldrh	r3, [r4, #12]
 8001b40:	059b      	lsls	r3, r3, #22
 8001b42:	d402      	bmi.n	8001b4a <_puts_r+0x72>
 8001b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b46:	f000 f975 	bl	8001e34 <__retarget_lock_release_recursive>
 8001b4a:	4628      	mov	r0, r5
 8001b4c:	bd70      	pop	{r4, r5, r6, pc}
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	da04      	bge.n	8001b5c <_puts_r+0x84>
 8001b52:	69a2      	ldr	r2, [r4, #24]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	dc06      	bgt.n	8001b66 <_puts_r+0x8e>
 8001b58:	290a      	cmp	r1, #10
 8001b5a:	d004      	beq.n	8001b66 <_puts_r+0x8e>
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	6022      	str	r2, [r4, #0]
 8001b62:	7019      	strb	r1, [r3, #0]
 8001b64:	e7cf      	b.n	8001b06 <_puts_r+0x2e>
 8001b66:	4622      	mov	r2, r4
 8001b68:	4628      	mov	r0, r5
 8001b6a:	f000 f854 	bl	8001c16 <__swbuf_r>
 8001b6e:	3001      	adds	r0, #1
 8001b70:	d1c9      	bne.n	8001b06 <_puts_r+0x2e>
 8001b72:	e7df      	b.n	8001b34 <_puts_r+0x5c>
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	250a      	movs	r5, #10
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	6022      	str	r2, [r4, #0]
 8001b7c:	701d      	strb	r5, [r3, #0]
 8001b7e:	e7db      	b.n	8001b38 <_puts_r+0x60>

08001b80 <puts>:
 8001b80:	4b02      	ldr	r3, [pc, #8]	; (8001b8c <puts+0xc>)
 8001b82:	4601      	mov	r1, r0
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	f7ff bfa7 	b.w	8001ad8 <_puts_r>
 8001b8a:	bf00      	nop
 8001b8c:	20000084 	.word	0x20000084

08001b90 <__sread>:
 8001b90:	b510      	push	{r4, lr}
 8001b92:	460c      	mov	r4, r1
 8001b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b98:	f000 f8fc 	bl	8001d94 <_read_r>
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	bfab      	itete	ge
 8001ba0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001ba2:	89a3      	ldrhlt	r3, [r4, #12]
 8001ba4:	181b      	addge	r3, r3, r0
 8001ba6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001baa:	bfac      	ite	ge
 8001bac:	6563      	strge	r3, [r4, #84]	; 0x54
 8001bae:	81a3      	strhlt	r3, [r4, #12]
 8001bb0:	bd10      	pop	{r4, pc}

08001bb2 <__swrite>:
 8001bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb6:	461f      	mov	r7, r3
 8001bb8:	898b      	ldrh	r3, [r1, #12]
 8001bba:	05db      	lsls	r3, r3, #23
 8001bbc:	4605      	mov	r5, r0
 8001bbe:	460c      	mov	r4, r1
 8001bc0:	4616      	mov	r6, r2
 8001bc2:	d505      	bpl.n	8001bd0 <__swrite+0x1e>
 8001bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bc8:	2302      	movs	r3, #2
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f000 f8d0 	bl	8001d70 <_lseek_r>
 8001bd0:	89a3      	ldrh	r3, [r4, #12]
 8001bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bda:	81a3      	strh	r3, [r4, #12]
 8001bdc:	4632      	mov	r2, r6
 8001bde:	463b      	mov	r3, r7
 8001be0:	4628      	mov	r0, r5
 8001be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001be6:	f000 b8e7 	b.w	8001db8 <_write_r>

08001bea <__sseek>:
 8001bea:	b510      	push	{r4, lr}
 8001bec:	460c      	mov	r4, r1
 8001bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bf2:	f000 f8bd 	bl	8001d70 <_lseek_r>
 8001bf6:	1c43      	adds	r3, r0, #1
 8001bf8:	89a3      	ldrh	r3, [r4, #12]
 8001bfa:	bf15      	itete	ne
 8001bfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8001bfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c06:	81a3      	strheq	r3, [r4, #12]
 8001c08:	bf18      	it	ne
 8001c0a:	81a3      	strhne	r3, [r4, #12]
 8001c0c:	bd10      	pop	{r4, pc}

08001c0e <__sclose>:
 8001c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c12:	f000 b89d 	b.w	8001d50 <_close_r>

08001c16 <__swbuf_r>:
 8001c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c18:	460e      	mov	r6, r1
 8001c1a:	4614      	mov	r4, r2
 8001c1c:	4605      	mov	r5, r0
 8001c1e:	b118      	cbz	r0, 8001c28 <__swbuf_r+0x12>
 8001c20:	6a03      	ldr	r3, [r0, #32]
 8001c22:	b90b      	cbnz	r3, 8001c28 <__swbuf_r+0x12>
 8001c24:	f7ff ff10 	bl	8001a48 <__sinit>
 8001c28:	69a3      	ldr	r3, [r4, #24]
 8001c2a:	60a3      	str	r3, [r4, #8]
 8001c2c:	89a3      	ldrh	r3, [r4, #12]
 8001c2e:	071a      	lsls	r2, r3, #28
 8001c30:	d525      	bpl.n	8001c7e <__swbuf_r+0x68>
 8001c32:	6923      	ldr	r3, [r4, #16]
 8001c34:	b31b      	cbz	r3, 8001c7e <__swbuf_r+0x68>
 8001c36:	6823      	ldr	r3, [r4, #0]
 8001c38:	6922      	ldr	r2, [r4, #16]
 8001c3a:	1a98      	subs	r0, r3, r2
 8001c3c:	6963      	ldr	r3, [r4, #20]
 8001c3e:	b2f6      	uxtb	r6, r6
 8001c40:	4283      	cmp	r3, r0
 8001c42:	4637      	mov	r7, r6
 8001c44:	dc04      	bgt.n	8001c50 <__swbuf_r+0x3a>
 8001c46:	4621      	mov	r1, r4
 8001c48:	4628      	mov	r0, r5
 8001c4a:	f000 fd47 	bl	80026dc <_fflush_r>
 8001c4e:	b9e0      	cbnz	r0, 8001c8a <__swbuf_r+0x74>
 8001c50:	68a3      	ldr	r3, [r4, #8]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	60a3      	str	r3, [r4, #8]
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	6022      	str	r2, [r4, #0]
 8001c5c:	701e      	strb	r6, [r3, #0]
 8001c5e:	6962      	ldr	r2, [r4, #20]
 8001c60:	1c43      	adds	r3, r0, #1
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d004      	beq.n	8001c70 <__swbuf_r+0x5a>
 8001c66:	89a3      	ldrh	r3, [r4, #12]
 8001c68:	07db      	lsls	r3, r3, #31
 8001c6a:	d506      	bpl.n	8001c7a <__swbuf_r+0x64>
 8001c6c:	2e0a      	cmp	r6, #10
 8001c6e:	d104      	bne.n	8001c7a <__swbuf_r+0x64>
 8001c70:	4621      	mov	r1, r4
 8001c72:	4628      	mov	r0, r5
 8001c74:	f000 fd32 	bl	80026dc <_fflush_r>
 8001c78:	b938      	cbnz	r0, 8001c8a <__swbuf_r+0x74>
 8001c7a:	4638      	mov	r0, r7
 8001c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c7e:	4621      	mov	r1, r4
 8001c80:	4628      	mov	r0, r5
 8001c82:	f000 f805 	bl	8001c90 <__swsetup_r>
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d0d5      	beq.n	8001c36 <__swbuf_r+0x20>
 8001c8a:	f04f 37ff 	mov.w	r7, #4294967295
 8001c8e:	e7f4      	b.n	8001c7a <__swbuf_r+0x64>

08001c90 <__swsetup_r>:
 8001c90:	b538      	push	{r3, r4, r5, lr}
 8001c92:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <__swsetup_r+0xac>)
 8001c94:	4605      	mov	r5, r0
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	460c      	mov	r4, r1
 8001c9a:	b118      	cbz	r0, 8001ca4 <__swsetup_r+0x14>
 8001c9c:	6a03      	ldr	r3, [r0, #32]
 8001c9e:	b90b      	cbnz	r3, 8001ca4 <__swsetup_r+0x14>
 8001ca0:	f7ff fed2 	bl	8001a48 <__sinit>
 8001ca4:	89a3      	ldrh	r3, [r4, #12]
 8001ca6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001caa:	0718      	lsls	r0, r3, #28
 8001cac:	d422      	bmi.n	8001cf4 <__swsetup_r+0x64>
 8001cae:	06d9      	lsls	r1, r3, #27
 8001cb0:	d407      	bmi.n	8001cc2 <__swsetup_r+0x32>
 8001cb2:	2309      	movs	r3, #9
 8001cb4:	602b      	str	r3, [r5, #0]
 8001cb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001cba:	81a3      	strh	r3, [r4, #12]
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	e034      	b.n	8001d2c <__swsetup_r+0x9c>
 8001cc2:	0758      	lsls	r0, r3, #29
 8001cc4:	d512      	bpl.n	8001cec <__swsetup_r+0x5c>
 8001cc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cc8:	b141      	cbz	r1, 8001cdc <__swsetup_r+0x4c>
 8001cca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cce:	4299      	cmp	r1, r3
 8001cd0:	d002      	beq.n	8001cd8 <__swsetup_r+0x48>
 8001cd2:	4628      	mov	r0, r5
 8001cd4:	f000 f8b0 	bl	8001e38 <_free_r>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	6363      	str	r3, [r4, #52]	; 0x34
 8001cdc:	89a3      	ldrh	r3, [r4, #12]
 8001cde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ce2:	81a3      	strh	r3, [r4, #12]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	6063      	str	r3, [r4, #4]
 8001ce8:	6923      	ldr	r3, [r4, #16]
 8001cea:	6023      	str	r3, [r4, #0]
 8001cec:	89a3      	ldrh	r3, [r4, #12]
 8001cee:	f043 0308 	orr.w	r3, r3, #8
 8001cf2:	81a3      	strh	r3, [r4, #12]
 8001cf4:	6923      	ldr	r3, [r4, #16]
 8001cf6:	b94b      	cbnz	r3, 8001d0c <__swsetup_r+0x7c>
 8001cf8:	89a3      	ldrh	r3, [r4, #12]
 8001cfa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d02:	d003      	beq.n	8001d0c <__swsetup_r+0x7c>
 8001d04:	4621      	mov	r1, r4
 8001d06:	4628      	mov	r0, r5
 8001d08:	f000 fd36 	bl	8002778 <__smakebuf_r>
 8001d0c:	89a0      	ldrh	r0, [r4, #12]
 8001d0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d12:	f010 0301 	ands.w	r3, r0, #1
 8001d16:	d00a      	beq.n	8001d2e <__swsetup_r+0x9e>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60a3      	str	r3, [r4, #8]
 8001d1c:	6963      	ldr	r3, [r4, #20]
 8001d1e:	425b      	negs	r3, r3
 8001d20:	61a3      	str	r3, [r4, #24]
 8001d22:	6923      	ldr	r3, [r4, #16]
 8001d24:	b943      	cbnz	r3, 8001d38 <__swsetup_r+0xa8>
 8001d26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001d2a:	d1c4      	bne.n	8001cb6 <__swsetup_r+0x26>
 8001d2c:	bd38      	pop	{r3, r4, r5, pc}
 8001d2e:	0781      	lsls	r1, r0, #30
 8001d30:	bf58      	it	pl
 8001d32:	6963      	ldrpl	r3, [r4, #20]
 8001d34:	60a3      	str	r3, [r4, #8]
 8001d36:	e7f4      	b.n	8001d22 <__swsetup_r+0x92>
 8001d38:	2000      	movs	r0, #0
 8001d3a:	e7f7      	b.n	8001d2c <__swsetup_r+0x9c>
 8001d3c:	20000084 	.word	0x20000084

08001d40 <memset>:
 8001d40:	4402      	add	r2, r0
 8001d42:	4603      	mov	r3, r0
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d100      	bne.n	8001d4a <memset+0xa>
 8001d48:	4770      	bx	lr
 8001d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d4e:	e7f9      	b.n	8001d44 <memset+0x4>

08001d50 <_close_r>:
 8001d50:	b538      	push	{r3, r4, r5, lr}
 8001d52:	4d06      	ldr	r5, [pc, #24]	; (8001d6c <_close_r+0x1c>)
 8001d54:	2300      	movs	r3, #0
 8001d56:	4604      	mov	r4, r0
 8001d58:	4608      	mov	r0, r1
 8001d5a:	602b      	str	r3, [r5, #0]
 8001d5c:	f7ff fc1e 	bl	800159c <_close>
 8001d60:	1c43      	adds	r3, r0, #1
 8001d62:	d102      	bne.n	8001d6a <_close_r+0x1a>
 8001d64:	682b      	ldr	r3, [r5, #0]
 8001d66:	b103      	cbz	r3, 8001d6a <_close_r+0x1a>
 8001d68:	6023      	str	r3, [r4, #0]
 8001d6a:	bd38      	pop	{r3, r4, r5, pc}
 8001d6c:	200006b8 	.word	0x200006b8

08001d70 <_lseek_r>:
 8001d70:	b538      	push	{r3, r4, r5, lr}
 8001d72:	4d07      	ldr	r5, [pc, #28]	; (8001d90 <_lseek_r+0x20>)
 8001d74:	4604      	mov	r4, r0
 8001d76:	4608      	mov	r0, r1
 8001d78:	4611      	mov	r1, r2
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	602a      	str	r2, [r5, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f7ff fbc9 	bl	8001516 <_lseek>
 8001d84:	1c43      	adds	r3, r0, #1
 8001d86:	d102      	bne.n	8001d8e <_lseek_r+0x1e>
 8001d88:	682b      	ldr	r3, [r5, #0]
 8001d8a:	b103      	cbz	r3, 8001d8e <_lseek_r+0x1e>
 8001d8c:	6023      	str	r3, [r4, #0]
 8001d8e:	bd38      	pop	{r3, r4, r5, pc}
 8001d90:	200006b8 	.word	0x200006b8

08001d94 <_read_r>:
 8001d94:	b538      	push	{r3, r4, r5, lr}
 8001d96:	4d07      	ldr	r5, [pc, #28]	; (8001db4 <_read_r+0x20>)
 8001d98:	4604      	mov	r4, r0
 8001d9a:	4608      	mov	r0, r1
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	2200      	movs	r2, #0
 8001da0:	602a      	str	r2, [r5, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	f7ff fb5f 	bl	8001466 <_read>
 8001da8:	1c43      	adds	r3, r0, #1
 8001daa:	d102      	bne.n	8001db2 <_read_r+0x1e>
 8001dac:	682b      	ldr	r3, [r5, #0]
 8001dae:	b103      	cbz	r3, 8001db2 <_read_r+0x1e>
 8001db0:	6023      	str	r3, [r4, #0]
 8001db2:	bd38      	pop	{r3, r4, r5, pc}
 8001db4:	200006b8 	.word	0x200006b8

08001db8 <_write_r>:
 8001db8:	b538      	push	{r3, r4, r5, lr}
 8001dba:	4d07      	ldr	r5, [pc, #28]	; (8001dd8 <_write_r+0x20>)
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	4608      	mov	r0, r1
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	602a      	str	r2, [r5, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	f7ff fbb7 	bl	800153a <_write>
 8001dcc:	1c43      	adds	r3, r0, #1
 8001dce:	d102      	bne.n	8001dd6 <_write_r+0x1e>
 8001dd0:	682b      	ldr	r3, [r5, #0]
 8001dd2:	b103      	cbz	r3, 8001dd6 <_write_r+0x1e>
 8001dd4:	6023      	str	r3, [r4, #0]
 8001dd6:	bd38      	pop	{r3, r4, r5, pc}
 8001dd8:	200006b8 	.word	0x200006b8

08001ddc <__errno>:
 8001ddc:	4b01      	ldr	r3, [pc, #4]	; (8001de4 <__errno+0x8>)
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000084 	.word	0x20000084

08001de8 <__libc_init_array>:
 8001de8:	b570      	push	{r4, r5, r6, lr}
 8001dea:	4d0d      	ldr	r5, [pc, #52]	; (8001e20 <__libc_init_array+0x38>)
 8001dec:	4c0d      	ldr	r4, [pc, #52]	; (8001e24 <__libc_init_array+0x3c>)
 8001dee:	1b64      	subs	r4, r4, r5
 8001df0:	10a4      	asrs	r4, r4, #2
 8001df2:	2600      	movs	r6, #0
 8001df4:	42a6      	cmp	r6, r4
 8001df6:	d109      	bne.n	8001e0c <__libc_init_array+0x24>
 8001df8:	4d0b      	ldr	r5, [pc, #44]	; (8001e28 <__libc_init_array+0x40>)
 8001dfa:	4c0c      	ldr	r4, [pc, #48]	; (8001e2c <__libc_init_array+0x44>)
 8001dfc:	f000 fd2a 	bl	8002854 <_init>
 8001e00:	1b64      	subs	r4, r4, r5
 8001e02:	10a4      	asrs	r4, r4, #2
 8001e04:	2600      	movs	r6, #0
 8001e06:	42a6      	cmp	r6, r4
 8001e08:	d105      	bne.n	8001e16 <__libc_init_array+0x2e>
 8001e0a:	bd70      	pop	{r4, r5, r6, pc}
 8001e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e10:	4798      	blx	r3
 8001e12:	3601      	adds	r6, #1
 8001e14:	e7ee      	b.n	8001df4 <__libc_init_array+0xc>
 8001e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e1a:	4798      	blx	r3
 8001e1c:	3601      	adds	r6, #1
 8001e1e:	e7f2      	b.n	8001e06 <__libc_init_array+0x1e>
 8001e20:	08002938 	.word	0x08002938
 8001e24:	08002938 	.word	0x08002938
 8001e28:	08002938 	.word	0x08002938
 8001e2c:	0800293c 	.word	0x0800293c

08001e30 <__retarget_lock_init_recursive>:
 8001e30:	4770      	bx	lr

08001e32 <__retarget_lock_acquire_recursive>:
 8001e32:	4770      	bx	lr

08001e34 <__retarget_lock_release_recursive>:
 8001e34:	4770      	bx	lr
	...

08001e38 <_free_r>:
 8001e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e3a:	2900      	cmp	r1, #0
 8001e3c:	d044      	beq.n	8001ec8 <_free_r+0x90>
 8001e3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e42:	9001      	str	r0, [sp, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f1a1 0404 	sub.w	r4, r1, #4
 8001e4a:	bfb8      	it	lt
 8001e4c:	18e4      	addlt	r4, r4, r3
 8001e4e:	f000 f8df 	bl	8002010 <__malloc_lock>
 8001e52:	4a1e      	ldr	r2, [pc, #120]	; (8001ecc <_free_r+0x94>)
 8001e54:	9801      	ldr	r0, [sp, #4]
 8001e56:	6813      	ldr	r3, [r2, #0]
 8001e58:	b933      	cbnz	r3, 8001e68 <_free_r+0x30>
 8001e5a:	6063      	str	r3, [r4, #4]
 8001e5c:	6014      	str	r4, [r2, #0]
 8001e5e:	b003      	add	sp, #12
 8001e60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001e64:	f000 b8da 	b.w	800201c <__malloc_unlock>
 8001e68:	42a3      	cmp	r3, r4
 8001e6a:	d908      	bls.n	8001e7e <_free_r+0x46>
 8001e6c:	6825      	ldr	r5, [r4, #0]
 8001e6e:	1961      	adds	r1, r4, r5
 8001e70:	428b      	cmp	r3, r1
 8001e72:	bf01      	itttt	eq
 8001e74:	6819      	ldreq	r1, [r3, #0]
 8001e76:	685b      	ldreq	r3, [r3, #4]
 8001e78:	1949      	addeq	r1, r1, r5
 8001e7a:	6021      	streq	r1, [r4, #0]
 8001e7c:	e7ed      	b.n	8001e5a <_free_r+0x22>
 8001e7e:	461a      	mov	r2, r3
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	b10b      	cbz	r3, 8001e88 <_free_r+0x50>
 8001e84:	42a3      	cmp	r3, r4
 8001e86:	d9fa      	bls.n	8001e7e <_free_r+0x46>
 8001e88:	6811      	ldr	r1, [r2, #0]
 8001e8a:	1855      	adds	r5, r2, r1
 8001e8c:	42a5      	cmp	r5, r4
 8001e8e:	d10b      	bne.n	8001ea8 <_free_r+0x70>
 8001e90:	6824      	ldr	r4, [r4, #0]
 8001e92:	4421      	add	r1, r4
 8001e94:	1854      	adds	r4, r2, r1
 8001e96:	42a3      	cmp	r3, r4
 8001e98:	6011      	str	r1, [r2, #0]
 8001e9a:	d1e0      	bne.n	8001e5e <_free_r+0x26>
 8001e9c:	681c      	ldr	r4, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	6053      	str	r3, [r2, #4]
 8001ea2:	440c      	add	r4, r1
 8001ea4:	6014      	str	r4, [r2, #0]
 8001ea6:	e7da      	b.n	8001e5e <_free_r+0x26>
 8001ea8:	d902      	bls.n	8001eb0 <_free_r+0x78>
 8001eaa:	230c      	movs	r3, #12
 8001eac:	6003      	str	r3, [r0, #0]
 8001eae:	e7d6      	b.n	8001e5e <_free_r+0x26>
 8001eb0:	6825      	ldr	r5, [r4, #0]
 8001eb2:	1961      	adds	r1, r4, r5
 8001eb4:	428b      	cmp	r3, r1
 8001eb6:	bf04      	itt	eq
 8001eb8:	6819      	ldreq	r1, [r3, #0]
 8001eba:	685b      	ldreq	r3, [r3, #4]
 8001ebc:	6063      	str	r3, [r4, #4]
 8001ebe:	bf04      	itt	eq
 8001ec0:	1949      	addeq	r1, r1, r5
 8001ec2:	6021      	streq	r1, [r4, #0]
 8001ec4:	6054      	str	r4, [r2, #4]
 8001ec6:	e7ca      	b.n	8001e5e <_free_r+0x26>
 8001ec8:	b003      	add	sp, #12
 8001eca:	bd30      	pop	{r4, r5, pc}
 8001ecc:	200006c0 	.word	0x200006c0

08001ed0 <sbrk_aligned>:
 8001ed0:	b570      	push	{r4, r5, r6, lr}
 8001ed2:	4e0e      	ldr	r6, [pc, #56]	; (8001f0c <sbrk_aligned+0x3c>)
 8001ed4:	460c      	mov	r4, r1
 8001ed6:	6831      	ldr	r1, [r6, #0]
 8001ed8:	4605      	mov	r5, r0
 8001eda:	b911      	cbnz	r1, 8001ee2 <sbrk_aligned+0x12>
 8001edc:	f000 fcaa 	bl	8002834 <_sbrk_r>
 8001ee0:	6030      	str	r0, [r6, #0]
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	4628      	mov	r0, r5
 8001ee6:	f000 fca5 	bl	8002834 <_sbrk_r>
 8001eea:	1c43      	adds	r3, r0, #1
 8001eec:	d00a      	beq.n	8001f04 <sbrk_aligned+0x34>
 8001eee:	1cc4      	adds	r4, r0, #3
 8001ef0:	f024 0403 	bic.w	r4, r4, #3
 8001ef4:	42a0      	cmp	r0, r4
 8001ef6:	d007      	beq.n	8001f08 <sbrk_aligned+0x38>
 8001ef8:	1a21      	subs	r1, r4, r0
 8001efa:	4628      	mov	r0, r5
 8001efc:	f000 fc9a 	bl	8002834 <_sbrk_r>
 8001f00:	3001      	adds	r0, #1
 8001f02:	d101      	bne.n	8001f08 <sbrk_aligned+0x38>
 8001f04:	f04f 34ff 	mov.w	r4, #4294967295
 8001f08:	4620      	mov	r0, r4
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}
 8001f0c:	200006c4 	.word	0x200006c4

08001f10 <_malloc_r>:
 8001f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f14:	1ccd      	adds	r5, r1, #3
 8001f16:	f025 0503 	bic.w	r5, r5, #3
 8001f1a:	3508      	adds	r5, #8
 8001f1c:	2d0c      	cmp	r5, #12
 8001f1e:	bf38      	it	cc
 8001f20:	250c      	movcc	r5, #12
 8001f22:	2d00      	cmp	r5, #0
 8001f24:	4607      	mov	r7, r0
 8001f26:	db01      	blt.n	8001f2c <_malloc_r+0x1c>
 8001f28:	42a9      	cmp	r1, r5
 8001f2a:	d905      	bls.n	8001f38 <_malloc_r+0x28>
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	2600      	movs	r6, #0
 8001f32:	4630      	mov	r0, r6
 8001f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800200c <_malloc_r+0xfc>
 8001f3c:	f000 f868 	bl	8002010 <__malloc_lock>
 8001f40:	f8d8 3000 	ldr.w	r3, [r8]
 8001f44:	461c      	mov	r4, r3
 8001f46:	bb5c      	cbnz	r4, 8001fa0 <_malloc_r+0x90>
 8001f48:	4629      	mov	r1, r5
 8001f4a:	4638      	mov	r0, r7
 8001f4c:	f7ff ffc0 	bl	8001ed0 <sbrk_aligned>
 8001f50:	1c43      	adds	r3, r0, #1
 8001f52:	4604      	mov	r4, r0
 8001f54:	d155      	bne.n	8002002 <_malloc_r+0xf2>
 8001f56:	f8d8 4000 	ldr.w	r4, [r8]
 8001f5a:	4626      	mov	r6, r4
 8001f5c:	2e00      	cmp	r6, #0
 8001f5e:	d145      	bne.n	8001fec <_malloc_r+0xdc>
 8001f60:	2c00      	cmp	r4, #0
 8001f62:	d048      	beq.n	8001ff6 <_malloc_r+0xe6>
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	4631      	mov	r1, r6
 8001f68:	4638      	mov	r0, r7
 8001f6a:	eb04 0903 	add.w	r9, r4, r3
 8001f6e:	f000 fc61 	bl	8002834 <_sbrk_r>
 8001f72:	4581      	cmp	r9, r0
 8001f74:	d13f      	bne.n	8001ff6 <_malloc_r+0xe6>
 8001f76:	6821      	ldr	r1, [r4, #0]
 8001f78:	1a6d      	subs	r5, r5, r1
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	4638      	mov	r0, r7
 8001f7e:	f7ff ffa7 	bl	8001ed0 <sbrk_aligned>
 8001f82:	3001      	adds	r0, #1
 8001f84:	d037      	beq.n	8001ff6 <_malloc_r+0xe6>
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	442b      	add	r3, r5
 8001f8a:	6023      	str	r3, [r4, #0]
 8001f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d038      	beq.n	8002006 <_malloc_r+0xf6>
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	42a2      	cmp	r2, r4
 8001f98:	d12b      	bne.n	8001ff2 <_malloc_r+0xe2>
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	e00f      	b.n	8001fc0 <_malloc_r+0xb0>
 8001fa0:	6822      	ldr	r2, [r4, #0]
 8001fa2:	1b52      	subs	r2, r2, r5
 8001fa4:	d41f      	bmi.n	8001fe6 <_malloc_r+0xd6>
 8001fa6:	2a0b      	cmp	r2, #11
 8001fa8:	d917      	bls.n	8001fda <_malloc_r+0xca>
 8001faa:	1961      	adds	r1, r4, r5
 8001fac:	42a3      	cmp	r3, r4
 8001fae:	6025      	str	r5, [r4, #0]
 8001fb0:	bf18      	it	ne
 8001fb2:	6059      	strne	r1, [r3, #4]
 8001fb4:	6863      	ldr	r3, [r4, #4]
 8001fb6:	bf08      	it	eq
 8001fb8:	f8c8 1000 	streq.w	r1, [r8]
 8001fbc:	5162      	str	r2, [r4, r5]
 8001fbe:	604b      	str	r3, [r1, #4]
 8001fc0:	4638      	mov	r0, r7
 8001fc2:	f104 060b 	add.w	r6, r4, #11
 8001fc6:	f000 f829 	bl	800201c <__malloc_unlock>
 8001fca:	f026 0607 	bic.w	r6, r6, #7
 8001fce:	1d23      	adds	r3, r4, #4
 8001fd0:	1af2      	subs	r2, r6, r3
 8001fd2:	d0ae      	beq.n	8001f32 <_malloc_r+0x22>
 8001fd4:	1b9b      	subs	r3, r3, r6
 8001fd6:	50a3      	str	r3, [r4, r2]
 8001fd8:	e7ab      	b.n	8001f32 <_malloc_r+0x22>
 8001fda:	42a3      	cmp	r3, r4
 8001fdc:	6862      	ldr	r2, [r4, #4]
 8001fde:	d1dd      	bne.n	8001f9c <_malloc_r+0x8c>
 8001fe0:	f8c8 2000 	str.w	r2, [r8]
 8001fe4:	e7ec      	b.n	8001fc0 <_malloc_r+0xb0>
 8001fe6:	4623      	mov	r3, r4
 8001fe8:	6864      	ldr	r4, [r4, #4]
 8001fea:	e7ac      	b.n	8001f46 <_malloc_r+0x36>
 8001fec:	4634      	mov	r4, r6
 8001fee:	6876      	ldr	r6, [r6, #4]
 8001ff0:	e7b4      	b.n	8001f5c <_malloc_r+0x4c>
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	e7cc      	b.n	8001f90 <_malloc_r+0x80>
 8001ff6:	230c      	movs	r3, #12
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	4638      	mov	r0, r7
 8001ffc:	f000 f80e 	bl	800201c <__malloc_unlock>
 8002000:	e797      	b.n	8001f32 <_malloc_r+0x22>
 8002002:	6025      	str	r5, [r4, #0]
 8002004:	e7dc      	b.n	8001fc0 <_malloc_r+0xb0>
 8002006:	605b      	str	r3, [r3, #4]
 8002008:	deff      	udf	#255	; 0xff
 800200a:	bf00      	nop
 800200c:	200006c0 	.word	0x200006c0

08002010 <__malloc_lock>:
 8002010:	4801      	ldr	r0, [pc, #4]	; (8002018 <__malloc_lock+0x8>)
 8002012:	f7ff bf0e 	b.w	8001e32 <__retarget_lock_acquire_recursive>
 8002016:	bf00      	nop
 8002018:	200006bc 	.word	0x200006bc

0800201c <__malloc_unlock>:
 800201c:	4801      	ldr	r0, [pc, #4]	; (8002024 <__malloc_unlock+0x8>)
 800201e:	f7ff bf09 	b.w	8001e34 <__retarget_lock_release_recursive>
 8002022:	bf00      	nop
 8002024:	200006bc 	.word	0x200006bc

08002028 <__sfputc_r>:
 8002028:	6893      	ldr	r3, [r2, #8]
 800202a:	3b01      	subs	r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	b410      	push	{r4}
 8002030:	6093      	str	r3, [r2, #8]
 8002032:	da08      	bge.n	8002046 <__sfputc_r+0x1e>
 8002034:	6994      	ldr	r4, [r2, #24]
 8002036:	42a3      	cmp	r3, r4
 8002038:	db01      	blt.n	800203e <__sfputc_r+0x16>
 800203a:	290a      	cmp	r1, #10
 800203c:	d103      	bne.n	8002046 <__sfputc_r+0x1e>
 800203e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002042:	f7ff bde8 	b.w	8001c16 <__swbuf_r>
 8002046:	6813      	ldr	r3, [r2, #0]
 8002048:	1c58      	adds	r0, r3, #1
 800204a:	6010      	str	r0, [r2, #0]
 800204c:	7019      	strb	r1, [r3, #0]
 800204e:	4608      	mov	r0, r1
 8002050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002054:	4770      	bx	lr

08002056 <__sfputs_r>:
 8002056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002058:	4606      	mov	r6, r0
 800205a:	460f      	mov	r7, r1
 800205c:	4614      	mov	r4, r2
 800205e:	18d5      	adds	r5, r2, r3
 8002060:	42ac      	cmp	r4, r5
 8002062:	d101      	bne.n	8002068 <__sfputs_r+0x12>
 8002064:	2000      	movs	r0, #0
 8002066:	e007      	b.n	8002078 <__sfputs_r+0x22>
 8002068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800206c:	463a      	mov	r2, r7
 800206e:	4630      	mov	r0, r6
 8002070:	f7ff ffda 	bl	8002028 <__sfputc_r>
 8002074:	1c43      	adds	r3, r0, #1
 8002076:	d1f3      	bne.n	8002060 <__sfputs_r+0xa>
 8002078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800207c <_vfiprintf_r>:
 800207c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002080:	460d      	mov	r5, r1
 8002082:	b09d      	sub	sp, #116	; 0x74
 8002084:	4614      	mov	r4, r2
 8002086:	4698      	mov	r8, r3
 8002088:	4606      	mov	r6, r0
 800208a:	b118      	cbz	r0, 8002094 <_vfiprintf_r+0x18>
 800208c:	6a03      	ldr	r3, [r0, #32]
 800208e:	b90b      	cbnz	r3, 8002094 <_vfiprintf_r+0x18>
 8002090:	f7ff fcda 	bl	8001a48 <__sinit>
 8002094:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002096:	07d9      	lsls	r1, r3, #31
 8002098:	d405      	bmi.n	80020a6 <_vfiprintf_r+0x2a>
 800209a:	89ab      	ldrh	r3, [r5, #12]
 800209c:	059a      	lsls	r2, r3, #22
 800209e:	d402      	bmi.n	80020a6 <_vfiprintf_r+0x2a>
 80020a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020a2:	f7ff fec6 	bl	8001e32 <__retarget_lock_acquire_recursive>
 80020a6:	89ab      	ldrh	r3, [r5, #12]
 80020a8:	071b      	lsls	r3, r3, #28
 80020aa:	d501      	bpl.n	80020b0 <_vfiprintf_r+0x34>
 80020ac:	692b      	ldr	r3, [r5, #16]
 80020ae:	b99b      	cbnz	r3, 80020d8 <_vfiprintf_r+0x5c>
 80020b0:	4629      	mov	r1, r5
 80020b2:	4630      	mov	r0, r6
 80020b4:	f7ff fdec 	bl	8001c90 <__swsetup_r>
 80020b8:	b170      	cbz	r0, 80020d8 <_vfiprintf_r+0x5c>
 80020ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020bc:	07dc      	lsls	r4, r3, #31
 80020be:	d504      	bpl.n	80020ca <_vfiprintf_r+0x4e>
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	b01d      	add	sp, #116	; 0x74
 80020c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020ca:	89ab      	ldrh	r3, [r5, #12]
 80020cc:	0598      	lsls	r0, r3, #22
 80020ce:	d4f7      	bmi.n	80020c0 <_vfiprintf_r+0x44>
 80020d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020d2:	f7ff feaf 	bl	8001e34 <__retarget_lock_release_recursive>
 80020d6:	e7f3      	b.n	80020c0 <_vfiprintf_r+0x44>
 80020d8:	2300      	movs	r3, #0
 80020da:	9309      	str	r3, [sp, #36]	; 0x24
 80020dc:	2320      	movs	r3, #32
 80020de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80020e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80020e6:	2330      	movs	r3, #48	; 0x30
 80020e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800229c <_vfiprintf_r+0x220>
 80020ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80020f0:	f04f 0901 	mov.w	r9, #1
 80020f4:	4623      	mov	r3, r4
 80020f6:	469a      	mov	sl, r3
 80020f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020fc:	b10a      	cbz	r2, 8002102 <_vfiprintf_r+0x86>
 80020fe:	2a25      	cmp	r2, #37	; 0x25
 8002100:	d1f9      	bne.n	80020f6 <_vfiprintf_r+0x7a>
 8002102:	ebba 0b04 	subs.w	fp, sl, r4
 8002106:	d00b      	beq.n	8002120 <_vfiprintf_r+0xa4>
 8002108:	465b      	mov	r3, fp
 800210a:	4622      	mov	r2, r4
 800210c:	4629      	mov	r1, r5
 800210e:	4630      	mov	r0, r6
 8002110:	f7ff ffa1 	bl	8002056 <__sfputs_r>
 8002114:	3001      	adds	r0, #1
 8002116:	f000 80a9 	beq.w	800226c <_vfiprintf_r+0x1f0>
 800211a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800211c:	445a      	add	r2, fp
 800211e:	9209      	str	r2, [sp, #36]	; 0x24
 8002120:	f89a 3000 	ldrb.w	r3, [sl]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a1 	beq.w	800226c <_vfiprintf_r+0x1f0>
 800212a:	2300      	movs	r3, #0
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002134:	f10a 0a01 	add.w	sl, sl, #1
 8002138:	9304      	str	r3, [sp, #16]
 800213a:	9307      	str	r3, [sp, #28]
 800213c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002140:	931a      	str	r3, [sp, #104]	; 0x68
 8002142:	4654      	mov	r4, sl
 8002144:	2205      	movs	r2, #5
 8002146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800214a:	4854      	ldr	r0, [pc, #336]	; (800229c <_vfiprintf_r+0x220>)
 800214c:	f7fe f850 	bl	80001f0 <memchr>
 8002150:	9a04      	ldr	r2, [sp, #16]
 8002152:	b9d8      	cbnz	r0, 800218c <_vfiprintf_r+0x110>
 8002154:	06d1      	lsls	r1, r2, #27
 8002156:	bf44      	itt	mi
 8002158:	2320      	movmi	r3, #32
 800215a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800215e:	0713      	lsls	r3, r2, #28
 8002160:	bf44      	itt	mi
 8002162:	232b      	movmi	r3, #43	; 0x2b
 8002164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002168:	f89a 3000 	ldrb.w	r3, [sl]
 800216c:	2b2a      	cmp	r3, #42	; 0x2a
 800216e:	d015      	beq.n	800219c <_vfiprintf_r+0x120>
 8002170:	9a07      	ldr	r2, [sp, #28]
 8002172:	4654      	mov	r4, sl
 8002174:	2000      	movs	r0, #0
 8002176:	f04f 0c0a 	mov.w	ip, #10
 800217a:	4621      	mov	r1, r4
 800217c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002180:	3b30      	subs	r3, #48	; 0x30
 8002182:	2b09      	cmp	r3, #9
 8002184:	d94d      	bls.n	8002222 <_vfiprintf_r+0x1a6>
 8002186:	b1b0      	cbz	r0, 80021b6 <_vfiprintf_r+0x13a>
 8002188:	9207      	str	r2, [sp, #28]
 800218a:	e014      	b.n	80021b6 <_vfiprintf_r+0x13a>
 800218c:	eba0 0308 	sub.w	r3, r0, r8
 8002190:	fa09 f303 	lsl.w	r3, r9, r3
 8002194:	4313      	orrs	r3, r2
 8002196:	9304      	str	r3, [sp, #16]
 8002198:	46a2      	mov	sl, r4
 800219a:	e7d2      	b.n	8002142 <_vfiprintf_r+0xc6>
 800219c:	9b03      	ldr	r3, [sp, #12]
 800219e:	1d19      	adds	r1, r3, #4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	9103      	str	r1, [sp, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bfbb      	ittet	lt
 80021a8:	425b      	neglt	r3, r3
 80021aa:	f042 0202 	orrlt.w	r2, r2, #2
 80021ae:	9307      	strge	r3, [sp, #28]
 80021b0:	9307      	strlt	r3, [sp, #28]
 80021b2:	bfb8      	it	lt
 80021b4:	9204      	strlt	r2, [sp, #16]
 80021b6:	7823      	ldrb	r3, [r4, #0]
 80021b8:	2b2e      	cmp	r3, #46	; 0x2e
 80021ba:	d10c      	bne.n	80021d6 <_vfiprintf_r+0x15a>
 80021bc:	7863      	ldrb	r3, [r4, #1]
 80021be:	2b2a      	cmp	r3, #42	; 0x2a
 80021c0:	d134      	bne.n	800222c <_vfiprintf_r+0x1b0>
 80021c2:	9b03      	ldr	r3, [sp, #12]
 80021c4:	1d1a      	adds	r2, r3, #4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	9203      	str	r2, [sp, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bfb8      	it	lt
 80021ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80021d2:	3402      	adds	r4, #2
 80021d4:	9305      	str	r3, [sp, #20]
 80021d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80022ac <_vfiprintf_r+0x230>
 80021da:	7821      	ldrb	r1, [r4, #0]
 80021dc:	2203      	movs	r2, #3
 80021de:	4650      	mov	r0, sl
 80021e0:	f7fe f806 	bl	80001f0 <memchr>
 80021e4:	b138      	cbz	r0, 80021f6 <_vfiprintf_r+0x17a>
 80021e6:	9b04      	ldr	r3, [sp, #16]
 80021e8:	eba0 000a 	sub.w	r0, r0, sl
 80021ec:	2240      	movs	r2, #64	; 0x40
 80021ee:	4082      	lsls	r2, r0
 80021f0:	4313      	orrs	r3, r2
 80021f2:	3401      	adds	r4, #1
 80021f4:	9304      	str	r3, [sp, #16]
 80021f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021fa:	4829      	ldr	r0, [pc, #164]	; (80022a0 <_vfiprintf_r+0x224>)
 80021fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002200:	2206      	movs	r2, #6
 8002202:	f7fd fff5 	bl	80001f0 <memchr>
 8002206:	2800      	cmp	r0, #0
 8002208:	d03f      	beq.n	800228a <_vfiprintf_r+0x20e>
 800220a:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <_vfiprintf_r+0x228>)
 800220c:	bb1b      	cbnz	r3, 8002256 <_vfiprintf_r+0x1da>
 800220e:	9b03      	ldr	r3, [sp, #12]
 8002210:	3307      	adds	r3, #7
 8002212:	f023 0307 	bic.w	r3, r3, #7
 8002216:	3308      	adds	r3, #8
 8002218:	9303      	str	r3, [sp, #12]
 800221a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800221c:	443b      	add	r3, r7
 800221e:	9309      	str	r3, [sp, #36]	; 0x24
 8002220:	e768      	b.n	80020f4 <_vfiprintf_r+0x78>
 8002222:	fb0c 3202 	mla	r2, ip, r2, r3
 8002226:	460c      	mov	r4, r1
 8002228:	2001      	movs	r0, #1
 800222a:	e7a6      	b.n	800217a <_vfiprintf_r+0xfe>
 800222c:	2300      	movs	r3, #0
 800222e:	3401      	adds	r4, #1
 8002230:	9305      	str	r3, [sp, #20]
 8002232:	4619      	mov	r1, r3
 8002234:	f04f 0c0a 	mov.w	ip, #10
 8002238:	4620      	mov	r0, r4
 800223a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800223e:	3a30      	subs	r2, #48	; 0x30
 8002240:	2a09      	cmp	r2, #9
 8002242:	d903      	bls.n	800224c <_vfiprintf_r+0x1d0>
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0c6      	beq.n	80021d6 <_vfiprintf_r+0x15a>
 8002248:	9105      	str	r1, [sp, #20]
 800224a:	e7c4      	b.n	80021d6 <_vfiprintf_r+0x15a>
 800224c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002250:	4604      	mov	r4, r0
 8002252:	2301      	movs	r3, #1
 8002254:	e7f0      	b.n	8002238 <_vfiprintf_r+0x1bc>
 8002256:	ab03      	add	r3, sp, #12
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	462a      	mov	r2, r5
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <_vfiprintf_r+0x22c>)
 800225e:	a904      	add	r1, sp, #16
 8002260:	4630      	mov	r0, r6
 8002262:	f3af 8000 	nop.w
 8002266:	4607      	mov	r7, r0
 8002268:	1c78      	adds	r0, r7, #1
 800226a:	d1d6      	bne.n	800221a <_vfiprintf_r+0x19e>
 800226c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800226e:	07d9      	lsls	r1, r3, #31
 8002270:	d405      	bmi.n	800227e <_vfiprintf_r+0x202>
 8002272:	89ab      	ldrh	r3, [r5, #12]
 8002274:	059a      	lsls	r2, r3, #22
 8002276:	d402      	bmi.n	800227e <_vfiprintf_r+0x202>
 8002278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800227a:	f7ff fddb 	bl	8001e34 <__retarget_lock_release_recursive>
 800227e:	89ab      	ldrh	r3, [r5, #12]
 8002280:	065b      	lsls	r3, r3, #25
 8002282:	f53f af1d 	bmi.w	80020c0 <_vfiprintf_r+0x44>
 8002286:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002288:	e71c      	b.n	80020c4 <_vfiprintf_r+0x48>
 800228a:	ab03      	add	r3, sp, #12
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	462a      	mov	r2, r5
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <_vfiprintf_r+0x22c>)
 8002292:	a904      	add	r1, sp, #16
 8002294:	4630      	mov	r0, r6
 8002296:	f000 f879 	bl	800238c <_printf_i>
 800229a:	e7e4      	b.n	8002266 <_vfiprintf_r+0x1ea>
 800229c:	08002904 	.word	0x08002904
 80022a0:	0800290e 	.word	0x0800290e
 80022a4:	00000000 	.word	0x00000000
 80022a8:	08002057 	.word	0x08002057
 80022ac:	0800290a 	.word	0x0800290a

080022b0 <_printf_common>:
 80022b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022b4:	4616      	mov	r6, r2
 80022b6:	4699      	mov	r9, r3
 80022b8:	688a      	ldr	r2, [r1, #8]
 80022ba:	690b      	ldr	r3, [r1, #16]
 80022bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80022c0:	4293      	cmp	r3, r2
 80022c2:	bfb8      	it	lt
 80022c4:	4613      	movlt	r3, r2
 80022c6:	6033      	str	r3, [r6, #0]
 80022c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022cc:	4607      	mov	r7, r0
 80022ce:	460c      	mov	r4, r1
 80022d0:	b10a      	cbz	r2, 80022d6 <_printf_common+0x26>
 80022d2:	3301      	adds	r3, #1
 80022d4:	6033      	str	r3, [r6, #0]
 80022d6:	6823      	ldr	r3, [r4, #0]
 80022d8:	0699      	lsls	r1, r3, #26
 80022da:	bf42      	ittt	mi
 80022dc:	6833      	ldrmi	r3, [r6, #0]
 80022de:	3302      	addmi	r3, #2
 80022e0:	6033      	strmi	r3, [r6, #0]
 80022e2:	6825      	ldr	r5, [r4, #0]
 80022e4:	f015 0506 	ands.w	r5, r5, #6
 80022e8:	d106      	bne.n	80022f8 <_printf_common+0x48>
 80022ea:	f104 0a19 	add.w	sl, r4, #25
 80022ee:	68e3      	ldr	r3, [r4, #12]
 80022f0:	6832      	ldr	r2, [r6, #0]
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	42ab      	cmp	r3, r5
 80022f6:	dc26      	bgt.n	8002346 <_printf_common+0x96>
 80022f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80022fc:	1e13      	subs	r3, r2, #0
 80022fe:	6822      	ldr	r2, [r4, #0]
 8002300:	bf18      	it	ne
 8002302:	2301      	movne	r3, #1
 8002304:	0692      	lsls	r2, r2, #26
 8002306:	d42b      	bmi.n	8002360 <_printf_common+0xb0>
 8002308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800230c:	4649      	mov	r1, r9
 800230e:	4638      	mov	r0, r7
 8002310:	47c0      	blx	r8
 8002312:	3001      	adds	r0, #1
 8002314:	d01e      	beq.n	8002354 <_printf_common+0xa4>
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	6922      	ldr	r2, [r4, #16]
 800231a:	f003 0306 	and.w	r3, r3, #6
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf02      	ittt	eq
 8002322:	68e5      	ldreq	r5, [r4, #12]
 8002324:	6833      	ldreq	r3, [r6, #0]
 8002326:	1aed      	subeq	r5, r5, r3
 8002328:	68a3      	ldr	r3, [r4, #8]
 800232a:	bf0c      	ite	eq
 800232c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002330:	2500      	movne	r5, #0
 8002332:	4293      	cmp	r3, r2
 8002334:	bfc4      	itt	gt
 8002336:	1a9b      	subgt	r3, r3, r2
 8002338:	18ed      	addgt	r5, r5, r3
 800233a:	2600      	movs	r6, #0
 800233c:	341a      	adds	r4, #26
 800233e:	42b5      	cmp	r5, r6
 8002340:	d11a      	bne.n	8002378 <_printf_common+0xc8>
 8002342:	2000      	movs	r0, #0
 8002344:	e008      	b.n	8002358 <_printf_common+0xa8>
 8002346:	2301      	movs	r3, #1
 8002348:	4652      	mov	r2, sl
 800234a:	4649      	mov	r1, r9
 800234c:	4638      	mov	r0, r7
 800234e:	47c0      	blx	r8
 8002350:	3001      	adds	r0, #1
 8002352:	d103      	bne.n	800235c <_printf_common+0xac>
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800235c:	3501      	adds	r5, #1
 800235e:	e7c6      	b.n	80022ee <_printf_common+0x3e>
 8002360:	18e1      	adds	r1, r4, r3
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	2030      	movs	r0, #48	; 0x30
 8002366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800236a:	4422      	add	r2, r4
 800236c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002374:	3302      	adds	r3, #2
 8002376:	e7c7      	b.n	8002308 <_printf_common+0x58>
 8002378:	2301      	movs	r3, #1
 800237a:	4622      	mov	r2, r4
 800237c:	4649      	mov	r1, r9
 800237e:	4638      	mov	r0, r7
 8002380:	47c0      	blx	r8
 8002382:	3001      	adds	r0, #1
 8002384:	d0e6      	beq.n	8002354 <_printf_common+0xa4>
 8002386:	3601      	adds	r6, #1
 8002388:	e7d9      	b.n	800233e <_printf_common+0x8e>
	...

0800238c <_printf_i>:
 800238c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002390:	7e0f      	ldrb	r7, [r1, #24]
 8002392:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002394:	2f78      	cmp	r7, #120	; 0x78
 8002396:	4691      	mov	r9, r2
 8002398:	4680      	mov	r8, r0
 800239a:	460c      	mov	r4, r1
 800239c:	469a      	mov	sl, r3
 800239e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80023a2:	d807      	bhi.n	80023b4 <_printf_i+0x28>
 80023a4:	2f62      	cmp	r7, #98	; 0x62
 80023a6:	d80a      	bhi.n	80023be <_printf_i+0x32>
 80023a8:	2f00      	cmp	r7, #0
 80023aa:	f000 80d4 	beq.w	8002556 <_printf_i+0x1ca>
 80023ae:	2f58      	cmp	r7, #88	; 0x58
 80023b0:	f000 80c0 	beq.w	8002534 <_printf_i+0x1a8>
 80023b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80023bc:	e03a      	b.n	8002434 <_printf_i+0xa8>
 80023be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80023c2:	2b15      	cmp	r3, #21
 80023c4:	d8f6      	bhi.n	80023b4 <_printf_i+0x28>
 80023c6:	a101      	add	r1, pc, #4	; (adr r1, 80023cc <_printf_i+0x40>)
 80023c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80023cc:	08002425 	.word	0x08002425
 80023d0:	08002439 	.word	0x08002439
 80023d4:	080023b5 	.word	0x080023b5
 80023d8:	080023b5 	.word	0x080023b5
 80023dc:	080023b5 	.word	0x080023b5
 80023e0:	080023b5 	.word	0x080023b5
 80023e4:	08002439 	.word	0x08002439
 80023e8:	080023b5 	.word	0x080023b5
 80023ec:	080023b5 	.word	0x080023b5
 80023f0:	080023b5 	.word	0x080023b5
 80023f4:	080023b5 	.word	0x080023b5
 80023f8:	0800253d 	.word	0x0800253d
 80023fc:	08002465 	.word	0x08002465
 8002400:	080024f7 	.word	0x080024f7
 8002404:	080023b5 	.word	0x080023b5
 8002408:	080023b5 	.word	0x080023b5
 800240c:	0800255f 	.word	0x0800255f
 8002410:	080023b5 	.word	0x080023b5
 8002414:	08002465 	.word	0x08002465
 8002418:	080023b5 	.word	0x080023b5
 800241c:	080023b5 	.word	0x080023b5
 8002420:	080024ff 	.word	0x080024ff
 8002424:	682b      	ldr	r3, [r5, #0]
 8002426:	1d1a      	adds	r2, r3, #4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	602a      	str	r2, [r5, #0]
 800242c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002434:	2301      	movs	r3, #1
 8002436:	e09f      	b.n	8002578 <_printf_i+0x1ec>
 8002438:	6820      	ldr	r0, [r4, #0]
 800243a:	682b      	ldr	r3, [r5, #0]
 800243c:	0607      	lsls	r7, r0, #24
 800243e:	f103 0104 	add.w	r1, r3, #4
 8002442:	6029      	str	r1, [r5, #0]
 8002444:	d501      	bpl.n	800244a <_printf_i+0xbe>
 8002446:	681e      	ldr	r6, [r3, #0]
 8002448:	e003      	b.n	8002452 <_printf_i+0xc6>
 800244a:	0646      	lsls	r6, r0, #25
 800244c:	d5fb      	bpl.n	8002446 <_printf_i+0xba>
 800244e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002452:	2e00      	cmp	r6, #0
 8002454:	da03      	bge.n	800245e <_printf_i+0xd2>
 8002456:	232d      	movs	r3, #45	; 0x2d
 8002458:	4276      	negs	r6, r6
 800245a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800245e:	485a      	ldr	r0, [pc, #360]	; (80025c8 <_printf_i+0x23c>)
 8002460:	230a      	movs	r3, #10
 8002462:	e012      	b.n	800248a <_printf_i+0xfe>
 8002464:	682b      	ldr	r3, [r5, #0]
 8002466:	6820      	ldr	r0, [r4, #0]
 8002468:	1d19      	adds	r1, r3, #4
 800246a:	6029      	str	r1, [r5, #0]
 800246c:	0605      	lsls	r5, r0, #24
 800246e:	d501      	bpl.n	8002474 <_printf_i+0xe8>
 8002470:	681e      	ldr	r6, [r3, #0]
 8002472:	e002      	b.n	800247a <_printf_i+0xee>
 8002474:	0641      	lsls	r1, r0, #25
 8002476:	d5fb      	bpl.n	8002470 <_printf_i+0xe4>
 8002478:	881e      	ldrh	r6, [r3, #0]
 800247a:	4853      	ldr	r0, [pc, #332]	; (80025c8 <_printf_i+0x23c>)
 800247c:	2f6f      	cmp	r7, #111	; 0x6f
 800247e:	bf0c      	ite	eq
 8002480:	2308      	moveq	r3, #8
 8002482:	230a      	movne	r3, #10
 8002484:	2100      	movs	r1, #0
 8002486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800248a:	6865      	ldr	r5, [r4, #4]
 800248c:	60a5      	str	r5, [r4, #8]
 800248e:	2d00      	cmp	r5, #0
 8002490:	bfa2      	ittt	ge
 8002492:	6821      	ldrge	r1, [r4, #0]
 8002494:	f021 0104 	bicge.w	r1, r1, #4
 8002498:	6021      	strge	r1, [r4, #0]
 800249a:	b90e      	cbnz	r6, 80024a0 <_printf_i+0x114>
 800249c:	2d00      	cmp	r5, #0
 800249e:	d04b      	beq.n	8002538 <_printf_i+0x1ac>
 80024a0:	4615      	mov	r5, r2
 80024a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80024a6:	fb03 6711 	mls	r7, r3, r1, r6
 80024aa:	5dc7      	ldrb	r7, [r0, r7]
 80024ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80024b0:	4637      	mov	r7, r6
 80024b2:	42bb      	cmp	r3, r7
 80024b4:	460e      	mov	r6, r1
 80024b6:	d9f4      	bls.n	80024a2 <_printf_i+0x116>
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d10b      	bne.n	80024d4 <_printf_i+0x148>
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	07de      	lsls	r6, r3, #31
 80024c0:	d508      	bpl.n	80024d4 <_printf_i+0x148>
 80024c2:	6923      	ldr	r3, [r4, #16]
 80024c4:	6861      	ldr	r1, [r4, #4]
 80024c6:	4299      	cmp	r1, r3
 80024c8:	bfde      	ittt	le
 80024ca:	2330      	movle	r3, #48	; 0x30
 80024cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80024d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80024d4:	1b52      	subs	r2, r2, r5
 80024d6:	6122      	str	r2, [r4, #16]
 80024d8:	f8cd a000 	str.w	sl, [sp]
 80024dc:	464b      	mov	r3, r9
 80024de:	aa03      	add	r2, sp, #12
 80024e0:	4621      	mov	r1, r4
 80024e2:	4640      	mov	r0, r8
 80024e4:	f7ff fee4 	bl	80022b0 <_printf_common>
 80024e8:	3001      	adds	r0, #1
 80024ea:	d14a      	bne.n	8002582 <_printf_i+0x1f6>
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	b004      	add	sp, #16
 80024f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	f043 0320 	orr.w	r3, r3, #32
 80024fc:	6023      	str	r3, [r4, #0]
 80024fe:	4833      	ldr	r0, [pc, #204]	; (80025cc <_printf_i+0x240>)
 8002500:	2778      	movs	r7, #120	; 0x78
 8002502:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	6829      	ldr	r1, [r5, #0]
 800250a:	061f      	lsls	r7, r3, #24
 800250c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002510:	d402      	bmi.n	8002518 <_printf_i+0x18c>
 8002512:	065f      	lsls	r7, r3, #25
 8002514:	bf48      	it	mi
 8002516:	b2b6      	uxthmi	r6, r6
 8002518:	07df      	lsls	r7, r3, #31
 800251a:	bf48      	it	mi
 800251c:	f043 0320 	orrmi.w	r3, r3, #32
 8002520:	6029      	str	r1, [r5, #0]
 8002522:	bf48      	it	mi
 8002524:	6023      	strmi	r3, [r4, #0]
 8002526:	b91e      	cbnz	r6, 8002530 <_printf_i+0x1a4>
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	f023 0320 	bic.w	r3, r3, #32
 800252e:	6023      	str	r3, [r4, #0]
 8002530:	2310      	movs	r3, #16
 8002532:	e7a7      	b.n	8002484 <_printf_i+0xf8>
 8002534:	4824      	ldr	r0, [pc, #144]	; (80025c8 <_printf_i+0x23c>)
 8002536:	e7e4      	b.n	8002502 <_printf_i+0x176>
 8002538:	4615      	mov	r5, r2
 800253a:	e7bd      	b.n	80024b8 <_printf_i+0x12c>
 800253c:	682b      	ldr	r3, [r5, #0]
 800253e:	6826      	ldr	r6, [r4, #0]
 8002540:	6961      	ldr	r1, [r4, #20]
 8002542:	1d18      	adds	r0, r3, #4
 8002544:	6028      	str	r0, [r5, #0]
 8002546:	0635      	lsls	r5, r6, #24
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	d501      	bpl.n	8002550 <_printf_i+0x1c4>
 800254c:	6019      	str	r1, [r3, #0]
 800254e:	e002      	b.n	8002556 <_printf_i+0x1ca>
 8002550:	0670      	lsls	r0, r6, #25
 8002552:	d5fb      	bpl.n	800254c <_printf_i+0x1c0>
 8002554:	8019      	strh	r1, [r3, #0]
 8002556:	2300      	movs	r3, #0
 8002558:	6123      	str	r3, [r4, #16]
 800255a:	4615      	mov	r5, r2
 800255c:	e7bc      	b.n	80024d8 <_printf_i+0x14c>
 800255e:	682b      	ldr	r3, [r5, #0]
 8002560:	1d1a      	adds	r2, r3, #4
 8002562:	602a      	str	r2, [r5, #0]
 8002564:	681d      	ldr	r5, [r3, #0]
 8002566:	6862      	ldr	r2, [r4, #4]
 8002568:	2100      	movs	r1, #0
 800256a:	4628      	mov	r0, r5
 800256c:	f7fd fe40 	bl	80001f0 <memchr>
 8002570:	b108      	cbz	r0, 8002576 <_printf_i+0x1ea>
 8002572:	1b40      	subs	r0, r0, r5
 8002574:	6060      	str	r0, [r4, #4]
 8002576:	6863      	ldr	r3, [r4, #4]
 8002578:	6123      	str	r3, [r4, #16]
 800257a:	2300      	movs	r3, #0
 800257c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002580:	e7aa      	b.n	80024d8 <_printf_i+0x14c>
 8002582:	6923      	ldr	r3, [r4, #16]
 8002584:	462a      	mov	r2, r5
 8002586:	4649      	mov	r1, r9
 8002588:	4640      	mov	r0, r8
 800258a:	47d0      	blx	sl
 800258c:	3001      	adds	r0, #1
 800258e:	d0ad      	beq.n	80024ec <_printf_i+0x160>
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	079b      	lsls	r3, r3, #30
 8002594:	d413      	bmi.n	80025be <_printf_i+0x232>
 8002596:	68e0      	ldr	r0, [r4, #12]
 8002598:	9b03      	ldr	r3, [sp, #12]
 800259a:	4298      	cmp	r0, r3
 800259c:	bfb8      	it	lt
 800259e:	4618      	movlt	r0, r3
 80025a0:	e7a6      	b.n	80024f0 <_printf_i+0x164>
 80025a2:	2301      	movs	r3, #1
 80025a4:	4632      	mov	r2, r6
 80025a6:	4649      	mov	r1, r9
 80025a8:	4640      	mov	r0, r8
 80025aa:	47d0      	blx	sl
 80025ac:	3001      	adds	r0, #1
 80025ae:	d09d      	beq.n	80024ec <_printf_i+0x160>
 80025b0:	3501      	adds	r5, #1
 80025b2:	68e3      	ldr	r3, [r4, #12]
 80025b4:	9903      	ldr	r1, [sp, #12]
 80025b6:	1a5b      	subs	r3, r3, r1
 80025b8:	42ab      	cmp	r3, r5
 80025ba:	dcf2      	bgt.n	80025a2 <_printf_i+0x216>
 80025bc:	e7eb      	b.n	8002596 <_printf_i+0x20a>
 80025be:	2500      	movs	r5, #0
 80025c0:	f104 0619 	add.w	r6, r4, #25
 80025c4:	e7f5      	b.n	80025b2 <_printf_i+0x226>
 80025c6:	bf00      	nop
 80025c8:	08002915 	.word	0x08002915
 80025cc:	08002926 	.word	0x08002926

080025d0 <__sflush_r>:
 80025d0:	898a      	ldrh	r2, [r1, #12]
 80025d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025d6:	4605      	mov	r5, r0
 80025d8:	0710      	lsls	r0, r2, #28
 80025da:	460c      	mov	r4, r1
 80025dc:	d458      	bmi.n	8002690 <__sflush_r+0xc0>
 80025de:	684b      	ldr	r3, [r1, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	dc05      	bgt.n	80025f0 <__sflush_r+0x20>
 80025e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	dc02      	bgt.n	80025f0 <__sflush_r+0x20>
 80025ea:	2000      	movs	r0, #0
 80025ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025f2:	2e00      	cmp	r6, #0
 80025f4:	d0f9      	beq.n	80025ea <__sflush_r+0x1a>
 80025f6:	2300      	movs	r3, #0
 80025f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80025fc:	682f      	ldr	r7, [r5, #0]
 80025fe:	6a21      	ldr	r1, [r4, #32]
 8002600:	602b      	str	r3, [r5, #0]
 8002602:	d032      	beq.n	800266a <__sflush_r+0x9a>
 8002604:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002606:	89a3      	ldrh	r3, [r4, #12]
 8002608:	075a      	lsls	r2, r3, #29
 800260a:	d505      	bpl.n	8002618 <__sflush_r+0x48>
 800260c:	6863      	ldr	r3, [r4, #4]
 800260e:	1ac0      	subs	r0, r0, r3
 8002610:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002612:	b10b      	cbz	r3, 8002618 <__sflush_r+0x48>
 8002614:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002616:	1ac0      	subs	r0, r0, r3
 8002618:	2300      	movs	r3, #0
 800261a:	4602      	mov	r2, r0
 800261c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800261e:	6a21      	ldr	r1, [r4, #32]
 8002620:	4628      	mov	r0, r5
 8002622:	47b0      	blx	r6
 8002624:	1c43      	adds	r3, r0, #1
 8002626:	89a3      	ldrh	r3, [r4, #12]
 8002628:	d106      	bne.n	8002638 <__sflush_r+0x68>
 800262a:	6829      	ldr	r1, [r5, #0]
 800262c:	291d      	cmp	r1, #29
 800262e:	d82b      	bhi.n	8002688 <__sflush_r+0xb8>
 8002630:	4a29      	ldr	r2, [pc, #164]	; (80026d8 <__sflush_r+0x108>)
 8002632:	410a      	asrs	r2, r1
 8002634:	07d6      	lsls	r6, r2, #31
 8002636:	d427      	bmi.n	8002688 <__sflush_r+0xb8>
 8002638:	2200      	movs	r2, #0
 800263a:	6062      	str	r2, [r4, #4]
 800263c:	04d9      	lsls	r1, r3, #19
 800263e:	6922      	ldr	r2, [r4, #16]
 8002640:	6022      	str	r2, [r4, #0]
 8002642:	d504      	bpl.n	800264e <__sflush_r+0x7e>
 8002644:	1c42      	adds	r2, r0, #1
 8002646:	d101      	bne.n	800264c <__sflush_r+0x7c>
 8002648:	682b      	ldr	r3, [r5, #0]
 800264a:	b903      	cbnz	r3, 800264e <__sflush_r+0x7e>
 800264c:	6560      	str	r0, [r4, #84]	; 0x54
 800264e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002650:	602f      	str	r7, [r5, #0]
 8002652:	2900      	cmp	r1, #0
 8002654:	d0c9      	beq.n	80025ea <__sflush_r+0x1a>
 8002656:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800265a:	4299      	cmp	r1, r3
 800265c:	d002      	beq.n	8002664 <__sflush_r+0x94>
 800265e:	4628      	mov	r0, r5
 8002660:	f7ff fbea 	bl	8001e38 <_free_r>
 8002664:	2000      	movs	r0, #0
 8002666:	6360      	str	r0, [r4, #52]	; 0x34
 8002668:	e7c0      	b.n	80025ec <__sflush_r+0x1c>
 800266a:	2301      	movs	r3, #1
 800266c:	4628      	mov	r0, r5
 800266e:	47b0      	blx	r6
 8002670:	1c41      	adds	r1, r0, #1
 8002672:	d1c8      	bne.n	8002606 <__sflush_r+0x36>
 8002674:	682b      	ldr	r3, [r5, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0c5      	beq.n	8002606 <__sflush_r+0x36>
 800267a:	2b1d      	cmp	r3, #29
 800267c:	d001      	beq.n	8002682 <__sflush_r+0xb2>
 800267e:	2b16      	cmp	r3, #22
 8002680:	d101      	bne.n	8002686 <__sflush_r+0xb6>
 8002682:	602f      	str	r7, [r5, #0]
 8002684:	e7b1      	b.n	80025ea <__sflush_r+0x1a>
 8002686:	89a3      	ldrh	r3, [r4, #12]
 8002688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800268c:	81a3      	strh	r3, [r4, #12]
 800268e:	e7ad      	b.n	80025ec <__sflush_r+0x1c>
 8002690:	690f      	ldr	r7, [r1, #16]
 8002692:	2f00      	cmp	r7, #0
 8002694:	d0a9      	beq.n	80025ea <__sflush_r+0x1a>
 8002696:	0793      	lsls	r3, r2, #30
 8002698:	680e      	ldr	r6, [r1, #0]
 800269a:	bf08      	it	eq
 800269c:	694b      	ldreq	r3, [r1, #20]
 800269e:	600f      	str	r7, [r1, #0]
 80026a0:	bf18      	it	ne
 80026a2:	2300      	movne	r3, #0
 80026a4:	eba6 0807 	sub.w	r8, r6, r7
 80026a8:	608b      	str	r3, [r1, #8]
 80026aa:	f1b8 0f00 	cmp.w	r8, #0
 80026ae:	dd9c      	ble.n	80025ea <__sflush_r+0x1a>
 80026b0:	6a21      	ldr	r1, [r4, #32]
 80026b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80026b4:	4643      	mov	r3, r8
 80026b6:	463a      	mov	r2, r7
 80026b8:	4628      	mov	r0, r5
 80026ba:	47b0      	blx	r6
 80026bc:	2800      	cmp	r0, #0
 80026be:	dc06      	bgt.n	80026ce <__sflush_r+0xfe>
 80026c0:	89a3      	ldrh	r3, [r4, #12]
 80026c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026c6:	81a3      	strh	r3, [r4, #12]
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	e78e      	b.n	80025ec <__sflush_r+0x1c>
 80026ce:	4407      	add	r7, r0
 80026d0:	eba8 0800 	sub.w	r8, r8, r0
 80026d4:	e7e9      	b.n	80026aa <__sflush_r+0xda>
 80026d6:	bf00      	nop
 80026d8:	dfbffffe 	.word	0xdfbffffe

080026dc <_fflush_r>:
 80026dc:	b538      	push	{r3, r4, r5, lr}
 80026de:	690b      	ldr	r3, [r1, #16]
 80026e0:	4605      	mov	r5, r0
 80026e2:	460c      	mov	r4, r1
 80026e4:	b913      	cbnz	r3, 80026ec <_fflush_r+0x10>
 80026e6:	2500      	movs	r5, #0
 80026e8:	4628      	mov	r0, r5
 80026ea:	bd38      	pop	{r3, r4, r5, pc}
 80026ec:	b118      	cbz	r0, 80026f6 <_fflush_r+0x1a>
 80026ee:	6a03      	ldr	r3, [r0, #32]
 80026f0:	b90b      	cbnz	r3, 80026f6 <_fflush_r+0x1a>
 80026f2:	f7ff f9a9 	bl	8001a48 <__sinit>
 80026f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f3      	beq.n	80026e6 <_fflush_r+0xa>
 80026fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002700:	07d0      	lsls	r0, r2, #31
 8002702:	d404      	bmi.n	800270e <_fflush_r+0x32>
 8002704:	0599      	lsls	r1, r3, #22
 8002706:	d402      	bmi.n	800270e <_fflush_r+0x32>
 8002708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800270a:	f7ff fb92 	bl	8001e32 <__retarget_lock_acquire_recursive>
 800270e:	4628      	mov	r0, r5
 8002710:	4621      	mov	r1, r4
 8002712:	f7ff ff5d 	bl	80025d0 <__sflush_r>
 8002716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002718:	07da      	lsls	r2, r3, #31
 800271a:	4605      	mov	r5, r0
 800271c:	d4e4      	bmi.n	80026e8 <_fflush_r+0xc>
 800271e:	89a3      	ldrh	r3, [r4, #12]
 8002720:	059b      	lsls	r3, r3, #22
 8002722:	d4e1      	bmi.n	80026e8 <_fflush_r+0xc>
 8002724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002726:	f7ff fb85 	bl	8001e34 <__retarget_lock_release_recursive>
 800272a:	e7dd      	b.n	80026e8 <_fflush_r+0xc>

0800272c <__swhatbuf_r>:
 800272c:	b570      	push	{r4, r5, r6, lr}
 800272e:	460c      	mov	r4, r1
 8002730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002734:	2900      	cmp	r1, #0
 8002736:	b096      	sub	sp, #88	; 0x58
 8002738:	4615      	mov	r5, r2
 800273a:	461e      	mov	r6, r3
 800273c:	da0d      	bge.n	800275a <__swhatbuf_r+0x2e>
 800273e:	89a3      	ldrh	r3, [r4, #12]
 8002740:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002744:	f04f 0100 	mov.w	r1, #0
 8002748:	bf0c      	ite	eq
 800274a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800274e:	2340      	movne	r3, #64	; 0x40
 8002750:	2000      	movs	r0, #0
 8002752:	6031      	str	r1, [r6, #0]
 8002754:	602b      	str	r3, [r5, #0]
 8002756:	b016      	add	sp, #88	; 0x58
 8002758:	bd70      	pop	{r4, r5, r6, pc}
 800275a:	466a      	mov	r2, sp
 800275c:	f000 f848 	bl	80027f0 <_fstat_r>
 8002760:	2800      	cmp	r0, #0
 8002762:	dbec      	blt.n	800273e <__swhatbuf_r+0x12>
 8002764:	9901      	ldr	r1, [sp, #4]
 8002766:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800276a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800276e:	4259      	negs	r1, r3
 8002770:	4159      	adcs	r1, r3
 8002772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002776:	e7eb      	b.n	8002750 <__swhatbuf_r+0x24>

08002778 <__smakebuf_r>:
 8002778:	898b      	ldrh	r3, [r1, #12]
 800277a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800277c:	079d      	lsls	r5, r3, #30
 800277e:	4606      	mov	r6, r0
 8002780:	460c      	mov	r4, r1
 8002782:	d507      	bpl.n	8002794 <__smakebuf_r+0x1c>
 8002784:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002788:	6023      	str	r3, [r4, #0]
 800278a:	6123      	str	r3, [r4, #16]
 800278c:	2301      	movs	r3, #1
 800278e:	6163      	str	r3, [r4, #20]
 8002790:	b002      	add	sp, #8
 8002792:	bd70      	pop	{r4, r5, r6, pc}
 8002794:	ab01      	add	r3, sp, #4
 8002796:	466a      	mov	r2, sp
 8002798:	f7ff ffc8 	bl	800272c <__swhatbuf_r>
 800279c:	9900      	ldr	r1, [sp, #0]
 800279e:	4605      	mov	r5, r0
 80027a0:	4630      	mov	r0, r6
 80027a2:	f7ff fbb5 	bl	8001f10 <_malloc_r>
 80027a6:	b948      	cbnz	r0, 80027bc <__smakebuf_r+0x44>
 80027a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027ac:	059a      	lsls	r2, r3, #22
 80027ae:	d4ef      	bmi.n	8002790 <__smakebuf_r+0x18>
 80027b0:	f023 0303 	bic.w	r3, r3, #3
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	81a3      	strh	r3, [r4, #12]
 80027ba:	e7e3      	b.n	8002784 <__smakebuf_r+0xc>
 80027bc:	89a3      	ldrh	r3, [r4, #12]
 80027be:	6020      	str	r0, [r4, #0]
 80027c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c4:	81a3      	strh	r3, [r4, #12]
 80027c6:	9b00      	ldr	r3, [sp, #0]
 80027c8:	6163      	str	r3, [r4, #20]
 80027ca:	9b01      	ldr	r3, [sp, #4]
 80027cc:	6120      	str	r0, [r4, #16]
 80027ce:	b15b      	cbz	r3, 80027e8 <__smakebuf_r+0x70>
 80027d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027d4:	4630      	mov	r0, r6
 80027d6:	f000 f81d 	bl	8002814 <_isatty_r>
 80027da:	b128      	cbz	r0, 80027e8 <__smakebuf_r+0x70>
 80027dc:	89a3      	ldrh	r3, [r4, #12]
 80027de:	f023 0303 	bic.w	r3, r3, #3
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	81a3      	strh	r3, [r4, #12]
 80027e8:	89a3      	ldrh	r3, [r4, #12]
 80027ea:	431d      	orrs	r5, r3
 80027ec:	81a5      	strh	r5, [r4, #12]
 80027ee:	e7cf      	b.n	8002790 <__smakebuf_r+0x18>

080027f0 <_fstat_r>:
 80027f0:	b538      	push	{r3, r4, r5, lr}
 80027f2:	4d07      	ldr	r5, [pc, #28]	; (8002810 <_fstat_r+0x20>)
 80027f4:	2300      	movs	r3, #0
 80027f6:	4604      	mov	r4, r0
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	602b      	str	r3, [r5, #0]
 80027fe:	f7fe ff14 	bl	800162a <_fstat>
 8002802:	1c43      	adds	r3, r0, #1
 8002804:	d102      	bne.n	800280c <_fstat_r+0x1c>
 8002806:	682b      	ldr	r3, [r5, #0]
 8002808:	b103      	cbz	r3, 800280c <_fstat_r+0x1c>
 800280a:	6023      	str	r3, [r4, #0]
 800280c:	bd38      	pop	{r3, r4, r5, pc}
 800280e:	bf00      	nop
 8002810:	200006b8 	.word	0x200006b8

08002814 <_isatty_r>:
 8002814:	b538      	push	{r3, r4, r5, lr}
 8002816:	4d06      	ldr	r5, [pc, #24]	; (8002830 <_isatty_r+0x1c>)
 8002818:	2300      	movs	r3, #0
 800281a:	4604      	mov	r4, r0
 800281c:	4608      	mov	r0, r1
 800281e:	602b      	str	r3, [r5, #0]
 8002820:	f7ff f86a 	bl	80018f8 <_isatty>
 8002824:	1c43      	adds	r3, r0, #1
 8002826:	d102      	bne.n	800282e <_isatty_r+0x1a>
 8002828:	682b      	ldr	r3, [r5, #0]
 800282a:	b103      	cbz	r3, 800282e <_isatty_r+0x1a>
 800282c:	6023      	str	r3, [r4, #0]
 800282e:	bd38      	pop	{r3, r4, r5, pc}
 8002830:	200006b8 	.word	0x200006b8

08002834 <_sbrk_r>:
 8002834:	b538      	push	{r3, r4, r5, lr}
 8002836:	4d06      	ldr	r5, [pc, #24]	; (8002850 <_sbrk_r+0x1c>)
 8002838:	2300      	movs	r3, #0
 800283a:	4604      	mov	r4, r0
 800283c:	4608      	mov	r0, r1
 800283e:	602b      	str	r3, [r5, #0]
 8002840:	f7fe fd74 	bl	800132c <_sbrk>
 8002844:	1c43      	adds	r3, r0, #1
 8002846:	d102      	bne.n	800284e <_sbrk_r+0x1a>
 8002848:	682b      	ldr	r3, [r5, #0]
 800284a:	b103      	cbz	r3, 800284e <_sbrk_r+0x1a>
 800284c:	6023      	str	r3, [r4, #0]
 800284e:	bd38      	pop	{r3, r4, r5, pc}
 8002850:	200006b8 	.word	0x200006b8

08002854 <_init>:
 8002854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002856:	bf00      	nop
 8002858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285a:	bc08      	pop	{r3}
 800285c:	469e      	mov	lr, r3
 800285e:	4770      	bx	lr

08002860 <_fini>:
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	bf00      	nop
 8002864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002866:	bc08      	pop	{r3}
 8002868:	469e      	mov	lr, r3
 800286a:	4770      	bx	lr
