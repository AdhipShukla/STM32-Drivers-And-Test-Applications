
stm32f411RE_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bac  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d44  08000d4c  00010d4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d44  08000d44  00010d4c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d44  08000d44  00010d4c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d44  08000d4c  00010d4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d44  08000d44  00010d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d48  08000d48  00010d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000d4c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000d4c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010d4c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010d7c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001438  00000000  00000000  00010dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000041b  00000000  00000000  000121f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  00012618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000011a  00000000  00000000  00012798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000022ac  00000000  00000000  000128b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001dce  00000000  00000000  00014b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009485  00000000  00000000  0001692c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000590  00000000  00000000  0001fdb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000d2c 	.word	0x08000d2c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000d2c 	.word	0x08000d2c

080001d8 <GPIO_PeriClockControl>:
 * @return 			- none
 *
 * @Note			- none
********************************************************************/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnORDi){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	460b      	mov	r3, r1
 80001e2:	70fb      	strb	r3, [r7, #3]
	if(EnORDi == ENABLE){
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d141      	bne.n	800026e <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a43      	ldr	r2, [pc, #268]	; (80002fc <GPIO_PeriClockControl+0x124>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d106      	bne.n	8000200 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80001f2:	4b43      	ldr	r3, [pc, #268]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f6:	4a42      	ldr	r2, [pc, #264]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 80001fe:	e077      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB){
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a40      	ldr	r2, [pc, #256]	; (8000304 <GPIO_PeriClockControl+0x12c>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000208:	4b3d      	ldr	r3, [pc, #244]	; (8000300 <GPIO_PeriClockControl+0x128>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a3c      	ldr	r2, [pc, #240]	; (8000300 <GPIO_PeriClockControl+0x128>)
 800020e:	f043 0302 	orr.w	r3, r3, #2
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000214:	e06c      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC){
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a3b      	ldr	r2, [pc, #236]	; (8000308 <GPIO_PeriClockControl+0x130>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800021e:	4b38      	ldr	r3, [pc, #224]	; (8000300 <GPIO_PeriClockControl+0x128>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	4a37      	ldr	r2, [pc, #220]	; (8000300 <GPIO_PeriClockControl+0x128>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6313      	str	r3, [r2, #48]	; 0x30
}
 800022a:	e061      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a37      	ldr	r2, [pc, #220]	; (800030c <GPIO_PeriClockControl+0x134>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000234:	4b32      	ldr	r3, [pc, #200]	; (8000300 <GPIO_PeriClockControl+0x128>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a31      	ldr	r2, [pc, #196]	; (8000300 <GPIO_PeriClockControl+0x128>)
 800023a:	f043 0308 	orr.w	r3, r3, #8
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000240:	e056      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE){
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a32      	ldr	r2, [pc, #200]	; (8000310 <GPIO_PeriClockControl+0x138>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800024a:	4b2d      	ldr	r3, [pc, #180]	; (8000300 <GPIO_PeriClockControl+0x128>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a2c      	ldr	r2, [pc, #176]	; (8000300 <GPIO_PeriClockControl+0x128>)
 8000250:	f043 0310 	orr.w	r3, r3, #16
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000256:	e04b      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOH){
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a2e      	ldr	r2, [pc, #184]	; (8000314 <GPIO_PeriClockControl+0x13c>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d147      	bne.n	80002f0 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000260:	4b27      	ldr	r3, [pc, #156]	; (8000300 <GPIO_PeriClockControl+0x128>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a26      	ldr	r2, [pc, #152]	; (8000300 <GPIO_PeriClockControl+0x128>)
 8000266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800026c:	e040      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA){
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a22      	ldr	r2, [pc, #136]	; (80002fc <GPIO_PeriClockControl+0x124>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 8000276:	4b22      	ldr	r3, [pc, #136]	; (8000300 <GPIO_PeriClockControl+0x128>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027a:	4a21      	ldr	r2, [pc, #132]	; (8000300 <GPIO_PeriClockControl+0x128>)
 800027c:	f023 0301 	bic.w	r3, r3, #1
 8000280:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000282:	e035      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB){
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a1f      	ldr	r2, [pc, #124]	; (8000304 <GPIO_PeriClockControl+0x12c>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 800028c:	4b1c      	ldr	r3, [pc, #112]	; (8000300 <GPIO_PeriClockControl+0x128>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a1b      	ldr	r2, [pc, #108]	; (8000300 <GPIO_PeriClockControl+0x128>)
 8000292:	f023 0302 	bic.w	r3, r3, #2
 8000296:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000298:	e02a      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC){
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a1a      	ldr	r2, [pc, #104]	; (8000308 <GPIO_PeriClockControl+0x130>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80002a8:	f023 0304 	bic.w	r3, r3, #4
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ae:	e01f      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD){
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a16      	ldr	r2, [pc, #88]	; (800030c <GPIO_PeriClockControl+0x134>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d106      	bne.n	80002c6 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a10      	ldr	r2, [pc, #64]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80002be:	f023 0308 	bic.w	r3, r3, #8
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c4:	e014      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE){
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a11      	ldr	r2, [pc, #68]	; (8000310 <GPIO_PeriClockControl+0x138>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80002d4:	f023 0310 	bic.w	r3, r3, #16
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002da:	e009      	b.n	80002f0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOH){
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <GPIO_PeriClockControl+0x13c>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d105      	bne.n	80002f0 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a05      	ldr	r2, [pc, #20]	; (8000300 <GPIO_PeriClockControl+0x128>)
 80002ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	40020000 	.word	0x40020000
 8000300:	40023800 	.word	0x40023800
 8000304:	40020400 	.word	0x40020400
 8000308:	40020800 	.word	0x40020800
 800030c:	40020c00 	.word	0x40020c00
 8000310:	40021000 	.word	0x40021000
 8000314:	40021c00 	.word	0x40021c00

08000318 <GPIO_Init>:
 * @param[in]		-
 * @return 			- none
 *
 * @Note			- none
********************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	// Setting pin mode
	uint32_t temp =0;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE); //Enabling the clock peripheral inside init
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2101      	movs	r1, #1
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ff54 	bl	80001d8 <GPIO_PeriClockControl>

	if(pGPIOHandle->GPIO_Config.GPIO_PinMode<=GPIO_MODE_ANALOG){
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	795b      	ldrb	r3, [r3, #5]
 8000334:	2b03      	cmp	r3, #3
 8000336:	d820      	bhi.n	800037a <GPIO_Init+0x62>
		temp = (pGPIOHandle->GPIO_Config.GPIO_PinMode << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	795b      	ldrb	r3, [r3, #5]
 800033c:	461a      	mov	r2, r3
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	791b      	ldrb	r3, [r3, #4]
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	fa02 f303 	lsl.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber));
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	791b      	ldrb	r3, [r3, #4]
 8000354:	005b      	lsls	r3, r3, #1
 8000356:	2103      	movs	r1, #3
 8000358:	fa01 f303 	lsl.w	r3, r1, r3
 800035c:	43db      	mvns	r3, r3
 800035e:	4619      	mov	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	400a      	ands	r2, r1
 8000366:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	6819      	ldr	r1, [r3, #0]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	68fa      	ldr	r2, [r7, #12]
 8000374:	430a      	orrs	r2, r1
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	e0c7      	b.n	800050a <GPIO_Init+0x1f2>
	}else{ //These are interrupt modes
		if(pGPIOHandle->GPIO_Config.GPIO_PinMode==GPIO_MODE_IT_FT){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	795b      	ldrb	r3, [r3, #5]
 800037e:	2b04      	cmp	r3, #4
 8000380:	d123      	bne.n	80003ca <GPIO_Init+0xb2>
		//1. Configuring the FTSR
			EXTI->FTSR &= ~(0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 8000382:	4b4c      	ldr	r3, [pc, #304]	; (80004b4 <GPIO_Init+0x19c>)
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	7912      	ldrb	r2, [r2, #4]
 800038a:	4611      	mov	r1, r2
 800038c:	2201      	movs	r2, #1
 800038e:	408a      	lsls	r2, r1
 8000390:	43d2      	mvns	r2, r2
 8000392:	4611      	mov	r1, r2
 8000394:	4a47      	ldr	r2, [pc, #284]	; (80004b4 <GPIO_Init+0x19c>)
 8000396:	400b      	ands	r3, r1
 8000398:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 800039a:	4b46      	ldr	r3, [pc, #280]	; (80004b4 <GPIO_Init+0x19c>)
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	7912      	ldrb	r2, [r2, #4]
 80003a2:	4611      	mov	r1, r2
 80003a4:	2201      	movs	r2, #1
 80003a6:	408a      	lsls	r2, r1
 80003a8:	43d2      	mvns	r2, r2
 80003aa:	4611      	mov	r1, r2
 80003ac:	4a41      	ldr	r2, [pc, #260]	; (80004b4 <GPIO_Init+0x19c>)
 80003ae:	400b      	ands	r3, r1
 80003b0:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |=  (0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 80003b2:	4b40      	ldr	r3, [pc, #256]	; (80004b4 <GPIO_Init+0x19c>)
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	7912      	ldrb	r2, [r2, #4]
 80003ba:	4611      	mov	r1, r2
 80003bc:	2201      	movs	r2, #1
 80003be:	408a      	lsls	r2, r1
 80003c0:	4611      	mov	r1, r2
 80003c2:	4a3c      	ldr	r2, [pc, #240]	; (80004b4 <GPIO_Init+0x19c>)
 80003c4:	430b      	orrs	r3, r1
 80003c6:	60d3      	str	r3, [r2, #12]
 80003c8:	e041      	b.n	800044e <GPIO_Init+0x136>
		}else if(pGPIOHandle->GPIO_Config.GPIO_PinMode==GPIO_MODE_IT_RT){
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	795b      	ldrb	r3, [r3, #5]
 80003ce:	2b05      	cmp	r3, #5
 80003d0:	d123      	bne.n	800041a <GPIO_Init+0x102>
		//1. Configuring the RTSR
			EXTI->FTSR &= ~(0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 80003d2:	4b38      	ldr	r3, [pc, #224]	; (80004b4 <GPIO_Init+0x19c>)
 80003d4:	68db      	ldr	r3, [r3, #12]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	7912      	ldrb	r2, [r2, #4]
 80003da:	4611      	mov	r1, r2
 80003dc:	2201      	movs	r2, #1
 80003de:	408a      	lsls	r2, r1
 80003e0:	43d2      	mvns	r2, r2
 80003e2:	4611      	mov	r1, r2
 80003e4:	4a33      	ldr	r2, [pc, #204]	; (80004b4 <GPIO_Init+0x19c>)
 80003e6:	400b      	ands	r3, r1
 80003e8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 80003ea:	4b32      	ldr	r3, [pc, #200]	; (80004b4 <GPIO_Init+0x19c>)
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	7912      	ldrb	r2, [r2, #4]
 80003f2:	4611      	mov	r1, r2
 80003f4:	2201      	movs	r2, #1
 80003f6:	408a      	lsls	r2, r1
 80003f8:	43d2      	mvns	r2, r2
 80003fa:	4611      	mov	r1, r2
 80003fc:	4a2d      	ldr	r2, [pc, #180]	; (80004b4 <GPIO_Init+0x19c>)
 80003fe:	400b      	ands	r3, r1
 8000400:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |=  (0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 8000402:	4b2c      	ldr	r3, [pc, #176]	; (80004b4 <GPIO_Init+0x19c>)
 8000404:	689b      	ldr	r3, [r3, #8]
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	7912      	ldrb	r2, [r2, #4]
 800040a:	4611      	mov	r1, r2
 800040c:	2201      	movs	r2, #1
 800040e:	408a      	lsls	r2, r1
 8000410:	4611      	mov	r1, r2
 8000412:	4a28      	ldr	r2, [pc, #160]	; (80004b4 <GPIO_Init+0x19c>)
 8000414:	430b      	orrs	r3, r1
 8000416:	6093      	str	r3, [r2, #8]
 8000418:	e019      	b.n	800044e <GPIO_Init+0x136>
		}else if(pGPIOHandle->GPIO_Config.GPIO_PinMode==GPIO_MODE_IT_RFT){
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	795b      	ldrb	r3, [r3, #5]
 800041e:	2b06      	cmp	r3, #6
 8000420:	d115      	bne.n	800044e <GPIO_Init+0x136>
		//1. Configuring the RFTS
			EXTI->RTSR |=  (0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 8000422:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <GPIO_Init+0x19c>)
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	7912      	ldrb	r2, [r2, #4]
 800042a:	4611      	mov	r1, r2
 800042c:	2201      	movs	r2, #1
 800042e:	408a      	lsls	r2, r1
 8000430:	4611      	mov	r1, r2
 8000432:	4a20      	ldr	r2, [pc, #128]	; (80004b4 <GPIO_Init+0x19c>)
 8000434:	430b      	orrs	r3, r1
 8000436:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |=  (0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 8000438:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <GPIO_Init+0x19c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	7912      	ldrb	r2, [r2, #4]
 8000440:	4611      	mov	r1, r2
 8000442:	2201      	movs	r2, #1
 8000444:	408a      	lsls	r2, r1
 8000446:	4611      	mov	r1, r2
 8000448:	4a1a      	ldr	r2, [pc, #104]	; (80004b4 <GPIO_Init+0x19c>)
 800044a:	430b      	orrs	r3, r1
 800044c:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port. By default EXTI is configured to port A for every pin
		uint8_t temp1 = pGPIOHandle->GPIO_Config.GPIO_PinNumber/4;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	089b      	lsrs	r3, r3, #2
 8000454:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle->GPIO_Config.GPIO_PinNumber%4;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	791b      	ldrb	r3, [r3, #4]
 800045a:	f003 0303 	and.w	r3, r3, #3
 800045e:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <GPIO_Init+0x1a0>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d032      	beq.n	80004d0 <GPIO_Init+0x1b8>
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a13      	ldr	r2, [pc, #76]	; (80004bc <GPIO_Init+0x1a4>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d01d      	beq.n	80004b0 <GPIO_Init+0x198>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a11      	ldr	r2, [pc, #68]	; (80004c0 <GPIO_Init+0x1a8>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d016      	beq.n	80004ac <GPIO_Init+0x194>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a10      	ldr	r2, [pc, #64]	; (80004c4 <GPIO_Init+0x1ac>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d00f      	beq.n	80004a8 <GPIO_Init+0x190>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <GPIO_Init+0x1b0>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d008      	beq.n	80004a4 <GPIO_Init+0x18c>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a0d      	ldr	r2, [pc, #52]	; (80004cc <GPIO_Init+0x1b4>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d101      	bne.n	80004a0 <GPIO_Init+0x188>
 800049c:	2307      	movs	r3, #7
 800049e:	e018      	b.n	80004d2 <GPIO_Init+0x1ba>
 80004a0:	2300      	movs	r3, #0
 80004a2:	e016      	b.n	80004d2 <GPIO_Init+0x1ba>
 80004a4:	2304      	movs	r3, #4
 80004a6:	e014      	b.n	80004d2 <GPIO_Init+0x1ba>
 80004a8:	2303      	movs	r3, #3
 80004aa:	e012      	b.n	80004d2 <GPIO_Init+0x1ba>
 80004ac:	2302      	movs	r3, #2
 80004ae:	e010      	b.n	80004d2 <GPIO_Init+0x1ba>
 80004b0:	2301      	movs	r3, #1
 80004b2:	e00e      	b.n	80004d2 <GPIO_Init+0x1ba>
 80004b4:	40013c00 	.word	0x40013c00
 80004b8:	40020000 	.word	0x40020000
 80004bc:	40020400 	.word	0x40020400
 80004c0:	40020800 	.word	0x40020800
 80004c4:	40020c00 	.word	0x40020c00
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40021c00 	.word	0x40021c00
 80004d0:	2300      	movs	r3, #0
 80004d2:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 80004d4:	4b64      	ldr	r3, [pc, #400]	; (8000668 <GPIO_Init+0x350>)
 80004d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004d8:	4a63      	ldr	r2, [pc, #396]	; (8000668 <GPIO_Init+0x350>)
 80004da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004de:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2*4);
 80004e0:	7a7a      	ldrb	r2, [r7, #9]
 80004e2:	7abb      	ldrb	r3, [r7, #10]
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	fa02 f103 	lsl.w	r1, r2, r3
 80004ea:	4a60      	ldr	r2, [pc, #384]	; (800066c <GPIO_Init+0x354>)
 80004ec:	7afb      	ldrb	r3, [r7, #11]
 80004ee:	3302      	adds	r3, #2
 80004f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enabling the EXTI interrupt delivery using IMR
		EXTI->IMR |=  (0X01<<pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 80004f4:	4b5e      	ldr	r3, [pc, #376]	; (8000670 <GPIO_Init+0x358>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	7912      	ldrb	r2, [r2, #4]
 80004fc:	4611      	mov	r1, r2
 80004fe:	2201      	movs	r2, #1
 8000500:	408a      	lsls	r2, r1
 8000502:	4611      	mov	r1, r2
 8000504:	4a5a      	ldr	r2, [pc, #360]	; (8000670 <GPIO_Init+0x358>)
 8000506:	430b      	orrs	r3, r1
 8000508:	6013      	str	r3, [r2, #0]
	}

	// Setting pin speed
	temp = pGPIOHandle->GPIO_Config.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	799b      	ldrb	r3, [r3, #6]
 800050e:	461a      	mov	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	fa02 f303 	lsl.w	r3, r2, r3
 800051a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber));
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	689a      	ldr	r2, [r3, #8]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	791b      	ldrb	r3, [r3, #4]
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	2103      	movs	r1, #3
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	43db      	mvns	r3, r3
 8000530:	4619      	mov	r1, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	400a      	ands	r2, r1
 8000538:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6899      	ldr	r1, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	68fa      	ldr	r2, [r7, #12]
 8000546:	430a      	orrs	r2, r1
 8000548:	609a      	str	r2, [r3, #8]


	// Setting pin pull up/ pull down
	temp = pGPIOHandle->GPIO_Config.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	79db      	ldrb	r3, [r3, #7]
 800054e:	461a      	mov	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	791b      	ldrb	r3, [r3, #4]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	fa02 f303 	lsl.w	r3, r2, r3
 800055a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber));
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	68da      	ldr	r2, [r3, #12]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	2103      	movs	r1, #3
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	43db      	mvns	r3, r3
 8000570:	4619      	mov	r1, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	400a      	ands	r2, r1
 8000578:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	68d9      	ldr	r1, [r3, #12]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	430a      	orrs	r2, r1
 8000588:	60da      	str	r2, [r3, #12]


	// Setting pin output type
	temp = pGPIOHandle->GPIO_Config.GPIO_PinOPType << (pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	7a1b      	ldrb	r3, [r3, #8]
 800058e:	461a      	mov	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	fa02 f303 	lsl.w	r3, r2, r3
 8000598:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x03 << (2 * pGPIOHandle->GPIO_Config.GPIO_PinNumber));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	685a      	ldr	r2, [r3, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	791b      	ldrb	r3, [r3, #4]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	2103      	movs	r1, #3
 80005a8:	fa01 f303 	lsl.w	r3, r1, r3
 80005ac:	43db      	mvns	r3, r3
 80005ae:	4619      	mov	r1, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	400a      	ands	r2, r1
 80005b6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6859      	ldr	r1, [r3, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	430a      	orrs	r2, r1
 80005c6:	605a      	str	r2, [r3, #4]


	// Setting pin alternate function
	if(pGPIOHandle->GPIO_Config.GPIO_PinMode==GPIO_MODE_ALTFN){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	795b      	ldrb	r3, [r3, #5]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d147      	bne.n	8000660 <GPIO_Init+0x348>

		if(pGPIOHandle->GPIO_Config.GPIO_PinNumber<8){
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	2b07      	cmp	r3, #7
 80005d6:	d820      	bhi.n	800061a <GPIO_Init+0x302>
			temp = pGPIOHandle->GPIO_Config.GPIO_PinAltFunMode << (4 * pGPIOHandle->GPIO_Config.GPIO_PinNumber);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	7a5b      	ldrb	r3, [r3, #9]
 80005dc:	461a      	mov	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	791b      	ldrb	r3, [r3, #4]
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	fa02 f303 	lsl.w	r3, r2, r3
 80005e8:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFRL &= ~(0x0f << (4 * pGPIOHandle->GPIO_Config.GPIO_PinNumber));
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	6a1a      	ldr	r2, [r3, #32]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	791b      	ldrb	r3, [r3, #4]
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	210f      	movs	r1, #15
 80005f8:	fa01 f303 	lsl.w	r3, r1, r3
 80005fc:	43db      	mvns	r3, r3
 80005fe:	4619      	mov	r1, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	400a      	ands	r2, r1
 8000606:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= temp;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6a19      	ldr	r1, [r3, #32]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	430a      	orrs	r2, r1
 8000616:	621a      	str	r2, [r3, #32]
			temp = pGPIOHandle->GPIO_Config.GPIO_PinAltFunMode << (4 *(pGPIOHandle->GPIO_Config.GPIO_PinNumber - 8));
			pGPIOHandle->pGPIOx->AFRH &= ~(0x0f << (4 * (pGPIOHandle->GPIO_Config.GPIO_PinNumber%8)));
			pGPIOHandle->pGPIOx->AFRH |= temp;
		}
	}
}
 8000618:	e022      	b.n	8000660 <GPIO_Init+0x348>
			temp = pGPIOHandle->GPIO_Config.GPIO_PinAltFunMode << (4 *(pGPIOHandle->GPIO_Config.GPIO_PinNumber - 8));
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	7a5b      	ldrb	r3, [r3, #9]
 800061e:	461a      	mov	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	791b      	ldrb	r3, [r3, #4]
 8000624:	3b08      	subs	r3, #8
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFRH &= ~(0x0f << (4 * (pGPIOHandle->GPIO_Config.GPIO_PinNumber%8)));
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	791b      	ldrb	r3, [r3, #4]
 8000638:	f003 0307 	and.w	r3, r3, #7
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	210f      	movs	r1, #15
 8000640:	fa01 f303 	lsl.w	r3, r1, r3
 8000644:	43db      	mvns	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	400a      	ands	r2, r1
 800064e:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= temp;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	430a      	orrs	r2, r1
 800065e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40013800 	.word	0x40013800
 8000670:	40013c00 	.word	0x40013c00

08000674 <GPIO_ReadFromInputPin>:
 * @param[in]		- GPIO PIN Number
 * @return 			- 0 or 1
 *
 * @Note			- none
********************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & (0x00000001));
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	691a      	ldr	r2, [r3, #16]
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	fa22 f303 	lsr.w	r3, r2, r3
 800068a:	b2db      	uxtb	r3, r3
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	73fb      	strb	r3, [r7, #15]
	return value;
 8000692:	7bfb      	ldrb	r3, [r7, #15]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <GPIO_WriteToOutputPin>:
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx){
	uint16_t value;
	value = (uint16_t)pGPIOx->IDR; //Check if this need to be shifted by 16 bits
	return value;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
 80006ac:	4613      	mov	r3, r2
 80006ae:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET){//Write 1
 80006b0:	78bb      	ldrb	r3, [r7, #2]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d109      	bne.n	80006ca <GPIO_WriteToOutputPin+0x2a>
		pGPIOx->ODR |= (1<<PinNumber);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	78fa      	ldrb	r2, [r7, #3]
 80006bc:	2101      	movs	r1, #1
 80006be:	fa01 f202 	lsl.w	r2, r1, r2
 80006c2:	431a      	orrs	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	615a      	str	r2, [r3, #20]
	}else{//white0
		pGPIOx->ODR &= ~(1<<PinNumber);
	}
}
 80006c8:	e009      	b.n	80006de <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1<<PinNumber);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	78fa      	ldrb	r2, [r7, #3]
 80006d0:	2101      	movs	r1, #1
 80006d2:	fa01 f202 	lsl.w	r2, r1, r2
 80006d6:	43d2      	mvns	r2, r2
 80006d8:	401a      	ands	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	615a      	str	r2, [r3, #20]
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
	...

080006ec <SPI_PeriClockControl>:
#define __weak __attribute__((weak))
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);
/*Peripheral Clock Setup*/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnORDi){
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
	if(EnORDi == ENABLE){
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d136      	bne.n	800076c <SPI_PeriClockControl+0x80>
		if(pSPIx == SPI1){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a38      	ldr	r2, [pc, #224]	; (80007e4 <SPI_PeriClockControl+0xf8>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d106      	bne.n	8000714 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 8000708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070a:	4a37      	ldr	r2, [pc, #220]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 800070c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000710:	6453      	str	r3, [r2, #68]	; 0x44
		}
		else if(pSPIx == SPI5){
			SPI5_PCLK_DI();
		}
	}
}
 8000712:	e061      	b.n	80007d8 <SPI_PeriClockControl+0xec>
		else if(pSPIx == SPI2){
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a35      	ldr	r2, [pc, #212]	; (80007ec <SPI_PeriClockControl+0x100>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d106      	bne.n	800072a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 800071c:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a31      	ldr	r2, [pc, #196]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000728:	e056      	b.n	80007d8 <SPI_PeriClockControl+0xec>
		else if(pSPIx == SPI3){
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a30      	ldr	r2, [pc, #192]	; (80007f0 <SPI_PeriClockControl+0x104>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	4a2c      	ldr	r2, [pc, #176]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 8000738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800073c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800073e:	e04b      	b.n	80007d8 <SPI_PeriClockControl+0xec>
		else if(pSPIx == SPI4){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a2c      	ldr	r2, [pc, #176]	; (80007f4 <SPI_PeriClockControl+0x108>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d106      	bne.n	8000756 <SPI_PeriClockControl+0x6a>
			SPI4_PCLK_EN();
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 800074a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074c:	4a26      	ldr	r2, [pc, #152]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 800074e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000752:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000754:	e040      	b.n	80007d8 <SPI_PeriClockControl+0xec>
		else if(pSPIx == SPI5){
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a27      	ldr	r2, [pc, #156]	; (80007f8 <SPI_PeriClockControl+0x10c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d13c      	bne.n	80007d8 <SPI_PeriClockControl+0xec>
			SPI5_PCLK_EN();
 800075e:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 8000764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000768:	6453      	str	r3, [r2, #68]	; 0x44
}
 800076a:	e035      	b.n	80007d8 <SPI_PeriClockControl+0xec>
		if(pSPIx == SPI1){
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a1d      	ldr	r2, [pc, #116]	; (80007e4 <SPI_PeriClockControl+0xf8>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d106      	bne.n	8000782 <SPI_PeriClockControl+0x96>
			SPI1_PCLK_DI();
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 8000776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000778:	4a1b      	ldr	r2, [pc, #108]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 800077a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800077e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000780:	e02a      	b.n	80007d8 <SPI_PeriClockControl+0xec>
		else if(pSPIx == SPI2){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a19      	ldr	r2, [pc, #100]	; (80007ec <SPI_PeriClockControl+0x100>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d106      	bne.n	8000798 <SPI_PeriClockControl+0xac>
			SPI2_PCLK_DI();
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 8000790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000794:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000796:	e01f      	b.n	80007d8 <SPI_PeriClockControl+0xec>
		else if(pSPIx == SPI3){
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a15      	ldr	r2, [pc, #84]	; (80007f0 <SPI_PeriClockControl+0x104>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d106      	bne.n	80007ae <SPI_PeriClockControl+0xc2>
			SPI3_PCLK_DI();
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a10      	ldr	r2, [pc, #64]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 80007a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007ac:	e014      	b.n	80007d8 <SPI_PeriClockControl+0xec>
		else if(pSPIx == SPI4){
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <SPI_PeriClockControl+0x108>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d106      	bne.n	80007c4 <SPI_PeriClockControl+0xd8>
			SPI4_PCLK_DI();
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 80007bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007c0:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007c2:	e009      	b.n	80007d8 <SPI_PeriClockControl+0xec>
		else if(pSPIx == SPI5){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <SPI_PeriClockControl+0x10c>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d105      	bne.n	80007d8 <SPI_PeriClockControl+0xec>
			SPI5_PCLK_DI();
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 80007ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d0:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <SPI_PeriClockControl+0xfc>)
 80007d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80007d6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	40013000 	.word	0x40013000
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40003800 	.word	0x40003800
 80007f0:	40003c00 	.word	0x40003c00
 80007f4:	40013400 	.word	0x40013400
 80007f8:	40015000 	.word	0x40015000

080007fc <SPI_Init>:

/*Init and De-init*/
void SPI_Init(SPI_Handle_t *pSPIHandle){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	uint32_t tempReg=0;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE); //Enabling the clock peripheral inside init
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	2101      	movs	r1, #1
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff6c 	bl	80006ec <SPI_PeriClockControl>

	//Configuring device mode
	tempReg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	461a      	mov	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4313      	orrs	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
	//Configuring the bus config
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	785b      	ldrb	r3, [r3, #1]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d104      	bne.n	8000834 <SPI_Init+0x38>
		tempReg &= ~(1<<SPI_CR1_BIDIMODE);//Clearing the BIDI value
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	e014      	b.n	800085e <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	785b      	ldrb	r3, [r3, #1]
 8000838:	2b02      	cmp	r3, #2
 800083a:	d104      	bne.n	8000846 <SPI_Init+0x4a>
		tempReg |= (1<<SPI_CR1_BIDIMODE);//Setting the BIDI value
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	e00b      	b.n	800085e <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	785b      	ldrb	r3, [r3, #1]
 800084a:	2b03      	cmp	r3, #3
 800084c:	d107      	bne.n	800085e <SPI_Init+0x62>
		tempReg &= ~(1<<SPI_CR1_BIDIMODE);//Device is set in Full duplex with only single wire
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000854:	60fb      	str	r3, [r7, #12]
		tempReg |= (1<<SPI_CR1_RXONLY);//Rx only for master
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800085c:	60fb      	str	r3, [r7, #12]
	}

	//Configuring SPI clock speed baud-rate
	tempReg |= pSPIHandle->SPIConfig.SPI_SclkSpeed<<SPI_CR1_BR;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	789b      	ldrb	r3, [r3, #2]
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	461a      	mov	r2, r3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4313      	orrs	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]

	//Configure the DFF
	tempReg |= pSPIHandle->SPIConfig.SPI_DFF<<SPI_CR1_DFF	;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	78db      	ldrb	r3, [r3, #3]
 8000870:	02db      	lsls	r3, r3, #11
 8000872:	461a      	mov	r2, r3
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	4313      	orrs	r3, r2
 8000878:	60fb      	str	r3, [r7, #12]

	//Configure the CPOL
	tempReg |= pSPIHandle->SPIConfig.SPI_CPOL<<SPI_CR1_CPOL;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	791b      	ldrb	r3, [r3, #4]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	461a      	mov	r2, r3
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4313      	orrs	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]

	//Configure the CPHA
	tempReg |= pSPIHandle->SPIConfig.SPI_CPHA<<SPI_CR1_CPHA;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	795b      	ldrb	r3, [r3, #5]
 800088c:	461a      	mov	r2, r3
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	4313      	orrs	r3, r2
 8000892:	60fb      	str	r3, [r7, #12]

	//Configure the SSM
	tempReg |= pSPIHandle->SPIConfig.SPI_SSM<<SPI_CR1_SSM;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	799b      	ldrb	r3, [r3, #6]
 8000898:	025b      	lsls	r3, r3, #9
 800089a:	461a      	mov	r2, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	4313      	orrs	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]

	//Setting the value of CR1 Reg
	pSPIHandle->pSPIx->SPI_CR1 = tempReg;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	601a      	str	r2, [r3, #0]
}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <SPI_PeripheralControl>:
		SPI5_REG_RESET();
	}
}

/* SPI Enable API, which is to be called after initialization*/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnORDi){
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	460b      	mov	r3, r1
 80008bc:	70fb      	strb	r3, [r7, #3]
	if (EnORDi == ENABLE){
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d106      	bne.n	80008d2 <SPI_PeripheralControl+0x20>
		pSPIx->SPI_CR1 |= 1<<SPI_CR1_SPE;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	601a      	str	r2, [r3, #0]
	}else{
	//Write the code for disable following the routine
		pSPIx->SPI_CR1 &= ~(1<<SPI_CR1_SPE);
	}
}
 80008d0:	e005      	b.n	80008de <SPI_PeripheralControl+0x2c>
		pSPIx->SPI_CR1 &= ~(1<<SPI_CR1_SPE);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	601a      	str	r2, [r3, #0]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <SPI_SendData>:

/*Data Send and Receive*/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 80008ea:	b480      	push	{r7}
 80008ec:	b087      	sub	sp, #28
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	60f8      	str	r0, [r7, #12]
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
	uint8_t ReverseByteOrder[2];
	//char Response[15] = {0};
	//uint8_t i=0;
	while(Len>0){
 80008f6:	e02f      	b.n	8000958 <SPI_SendData+0x6e>
		while((~pSPIx->SPI_SR) & 1<<SPI_SR_TXE); //Making sure Tx buffer is empty
 80008f8:	bf00      	nop
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	2b00      	cmp	r3, #0
 8000904:	d0f9      	beq.n	80008fa <SPI_SendData+0x10>
		if(pSPIx->SPI_CR1 & 1<<SPI_CR1_DFF){ //Check if the data frame format is 16 bits
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800090e:	2b00      	cmp	r3, #0
 8000910:	d017      	beq.n	8000942 <SPI_SendData+0x58>
			ReverseByteOrder[0]= *(pTxBuffer+1);
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	785b      	ldrb	r3, [r3, #1]
 8000916:	753b      	strb	r3, [r7, #20]
			ReverseByteOrder[1]= *(pTxBuffer);
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	757b      	strb	r3, [r7, #21]
			memcpy((void*)&pSPIx->SPI_DR,(void*)ReverseByteOrder,2);
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	330c      	adds	r3, #12
 8000922:	8aba      	ldrh	r2, [r7, #20]
 8000924:	801a      	strh	r2, [r3, #0]
			if(Len==1)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d103      	bne.n	8000934 <SPI_SendData+0x4a>
				Len -=1;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	e002      	b.n	800093a <SPI_SendData+0x50>
			else
				Len -=2;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b02      	subs	r3, #2
 8000938:	607b      	str	r3, [r7, #4]
			pTxBuffer +=2;
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	3302      	adds	r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	e00a      	b.n	8000958 <SPI_SendData+0x6e>
		}else{
			memcpy((void*)&pSPIx->SPI_DR,(void*)pTxBuffer,1);
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	330c      	adds	r3, #12
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	701a      	strb	r2, [r3, #0]
			//memcpy((void*)(Response+i), (void*)&pSPIx->SPI_DR, 1);
			//pSPIx->SPI_DR = (uint32_t)*(uint8_t*)pTxBuffer;
			//Response[i] = pSPIx->SPI_DR;
			Len -=1;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	607b      	str	r3, [r7, #4]
			pTxBuffer +=1;
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	3301      	adds	r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
	while(Len>0){
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1cc      	bne.n	80008f8 <SPI_SendData+0xe>
			//i++;
		}
	}
}
 800095e:	bf00      	nop
 8000960:	bf00      	nop
 8000962:	371c      	adds	r7, #28
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <SPI_ReceiveData>:


void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len){
 800096c:	b480      	push	{r7}
 800096e:	b087      	sub	sp, #28
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
	uint8_t ReverseByteOrder[2];
	while(Len>0){
 8000978:	e036      	b.n	80009e8 <SPI_ReceiveData+0x7c>
		while(~(pSPIx->SPI_SR) & 1<<SPI_SR_RXNE); // Waiting for RxBuffer to get non-empty
 800097a:	bf00      	nop
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	2b00      	cmp	r3, #0
 8000986:	d101      	bne.n	800098c <SPI_ReceiveData+0x20>
 8000988:	2301      	movs	r3, #1
 800098a:	e000      	b.n	800098e <SPI_ReceiveData+0x22>
 800098c:	2300      	movs	r3, #0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1f4      	bne.n	800097c <SPI_ReceiveData+0x10>
		if(pSPIx->SPI_CR1 & 1<<SPI_CR1_DFF){ //Check if the data frame format is 16 bits
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800099a:	2b00      	cmp	r3, #0
 800099c:	d019      	beq.n	80009d2 <SPI_ReceiveData+0x66>
			memcpy((void*)ReverseByteOrder,(void*)&pSPIx->SPI_DR,2);
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	330c      	adds	r3, #12
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	82bb      	strh	r3, [r7, #20]
			*(pRxBuffer+1) = ReverseByteOrder[0];
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	3301      	adds	r3, #1
 80009ac:	7d3a      	ldrb	r2, [r7, #20]
 80009ae:	701a      	strb	r2, [r3, #0]
			*(pRxBuffer) = ReverseByteOrder[1];
 80009b0:	7d7a      	ldrb	r2, [r7, #21]
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	701a      	strb	r2, [r3, #0]
			if(Len==1)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d103      	bne.n	80009c4 <SPI_ReceiveData+0x58>
				Len -=1;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	e002      	b.n	80009ca <SPI_ReceiveData+0x5e>
			else
				Len -=2;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3b02      	subs	r3, #2
 80009c8:	607b      	str	r3, [r7, #4]
			pRxBuffer +=2;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	3302      	adds	r3, #2
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	e00a      	b.n	80009e8 <SPI_ReceiveData+0x7c>
		}else{
			memcpy((void*)pRxBuffer, (void*)&pSPIx->SPI_DR, 1);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	330c      	adds	r3, #12
 80009d6:	781a      	ldrb	r2, [r3, #0]
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	701a      	strb	r2, [r3, #0]
			//pSPIx->SPI_DR = (uint32_t)*(uint8_t*)pTxBuffer;
			Len -=1;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	607b      	str	r3, [r7, #4]
			pRxBuffer +=1;
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
	while(Len>0){
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d1c5      	bne.n	800097a <SPI_ReceiveData+0xe>
		}
	}
}
 80009ee:	bf00      	nop
 80009f0:	bf00      	nop
 80009f2:	371c      	adds	r7, #28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <SPI_SSOEConfig>:
	}
}
/*
 * SSOE Configuration
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnORDi){
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
	if (EnORDi == ENABLE){
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d106      	bne.n	8000a1c <SPI_SSOEConfig+0x20>
		pSPIx->SPI_CR2 |= 1<<SPI_CR2_SSOE;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f043 0204 	orr.w	r2, r3, #4
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	605a      	str	r2, [r3, #4]
	}else{
		pSPIx->SPI_CR2 &= ~(1<<SPI_CR2_SSOE);
	}
}
 8000a1a:	e005      	b.n	8000a28 <SPI_SSOEConfig+0x2c>
		pSPIx->SPI_CR2 &= ~(1<<SPI_CR2_SSOE);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f023 0204 	bic.w	r2, r3, #4
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	605a      	str	r2, [r3, #4]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <main>:
}
void delay(void){
	for(uint32_t i=0; i<500000; i++);
}

int main(void){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b098      	sub	sp, #96	; 0x60
 8000a38:	af00      	add	r7, sp, #0

	//initialise_monitor_handles();
	//printf("Application Running!\n");
	GPIO_Handle_t GPIOButton;
	GPIOButton.pGPIOx= GPIOC;
 8000a3a:	4b91      	ldr	r3, [pc, #580]	; (8000c80 <main+0x24c>)
 8000a3c:	657b      	str	r3, [r7, #84]	; 0x54
	GPIOButton.GPIO_Config.GPIO_PinNumber=GPIO_PIN_NUM_13;
 8000a3e:	230d      	movs	r3, #13
 8000a40:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	GPIOButton.GPIO_Config.GPIO_PinMode=GPIO_MODE_IN;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	GPIOButton.GPIO_Config.GPIO_PinOPType=GPIO_OP_TYPES_PP;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	GPIOButton.GPIO_Config.GPIO_PinSpeed=GPIO_OP_SPEED_FAST;
 8000a50:	2302      	movs	r3, #2
 8000a52:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	GPIOButton.GPIO_Config.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4888      	ldr	r0, [pc, #544]	; (8000c80 <main+0x24c>)
 8000a60:	f7ff fbba 	bl	80001d8 <GPIO_PeriClockControl>
	GPIO_Init(&GPIOButton);
 8000a64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fc55 	bl	8000318 <GPIO_Init>

	/*
	 *Potentiometer Signal
	 */
	GPIO_Handle_t GPIOIn;
	GPIOIn.pGPIOx= GPIOC;
 8000a6e:	4b84      	ldr	r3, [pc, #528]	; (8000c80 <main+0x24c>)
 8000a70:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIOIn.GPIO_Config.GPIO_PinNumber=GPIO_PIN_NUM_8;
 8000a72:	2308      	movs	r3, #8
 8000a74:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	GPIOIn.GPIO_Config.GPIO_PinMode=GPIO_MODE_IN;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	GPIOIn.GPIO_Config.GPIO_PinOPType=GPIO_OP_TYPES_PP;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	GPIOIn.GPIO_Config.GPIO_PinSpeed=GPIO_OP_SPEED_FAST;
 8000a84:	2302      	movs	r3, #2
 8000a86:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	GPIOIn.GPIO_Config.GPIO_PinPuPdControl=GPIO_PIN_PD;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	//GPIO_PeriClockControl(GPIOC, ENABLE);
	GPIO_Init(&GPIOIn);
 8000a90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fc3f 	bl	8000318 <GPIO_Init>

	/*
	 *Configuring Communication Complete GPIO Signal
	 */
	GPIO_Handle_t ExternLED;
	ExternLED.pGPIOx= GPIOA;
 8000a9a:	4b7a      	ldr	r3, [pc, #488]	; (8000c84 <main+0x250>)
 8000a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	ExternLED.GPIO_Config.GPIO_PinNumber=GPIO_PIN_NUM_6;
 8000a9e:	2306      	movs	r3, #6
 8000aa0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	ExternLED.GPIO_Config.GPIO_PinMode=GPIO_MODE_OUT;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	ExternLED.GPIO_Config.GPIO_PinOPType=GPIO_OP_TYPES_PP;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	ExternLED.GPIO_Config.GPIO_PinSpeed=GPIO_OP_SPEED_FAST;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	ExternLED.GPIO_Config.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000abc:	2101      	movs	r1, #1
 8000abe:	4871      	ldr	r0, [pc, #452]	; (8000c84 <main+0x250>)
 8000ac0:	f7ff fb8a 	bl	80001d8 <GPIO_PeriClockControl>
	GPIO_Init(&ExternLED);
 8000ac4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fc25 	bl	8000318 <GPIO_Init>

	/*
	 *Configuring Interrupt for signal for Master
	 */
	GPIO_Handle_t ExternSig;
	ExternSig.pGPIOx= GPIOC;
 8000ace:	4b6c      	ldr	r3, [pc, #432]	; (8000c80 <main+0x24c>)
 8000ad0:	633b      	str	r3, [r7, #48]	; 0x30
	ExternSig.GPIO_Config.GPIO_PinNumber=GPIO_PIN_NUM_6;
 8000ad2:	2306      	movs	r3, #6
 8000ad4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	ExternSig.GPIO_Config.GPIO_PinMode=GPIO_MODE_OUT;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	ExternSig.GPIO_Config.GPIO_PinOPType=GPIO_OP_TYPES_PP;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	ExternSig.GPIO_Config.GPIO_PinSpeed=GPIO_OP_SPEED_FAST;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	ExternSig.GPIO_Config.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000af0:	2101      	movs	r1, #1
 8000af2:	4863      	ldr	r0, [pc, #396]	; (8000c80 <main+0x24c>)
 8000af4:	f7ff fb70 	bl	80001d8 <GPIO_PeriClockControl>
	GPIO_Init(&ExternSig);
 8000af8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fc0b 	bl	8000318 <GPIO_Init>

	/*
	 * Configuring the required pins for SPI communication
	 */
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000b02:	4b61      	ldr	r3, [pc, #388]	; (8000c88 <main+0x254>)
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_Config.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000b06:	2302      	movs	r3, #2
 8000b08:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_Config.GPIO_PinAltFunMode = 5;
 8000b0c:	2305      	movs	r3, #5
 8000b0e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	SPIPins.GPIO_Config.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	SPIPins.GPIO_Config.GPIO_PinOPType = GPIO_OP_TYPES_PP;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_Config.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	//SCLK
	SPIPins.GPIO_Config.GPIO_PinNumber =  GPIO_PIN_NUM_13;
 8000b24:	230d      	movs	r3, #13
 8000b26:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fbf2 	bl	8000318 <GPIO_Init>
	//MOSI
	SPIPins.GPIO_Config.GPIO_PinNumber =  GPIO_PIN_NUM_15;
 8000b34:	230f      	movs	r3, #15
 8000b36:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fbea 	bl	8000318 <GPIO_Init>
	//MISO
	SPIPins.GPIO_Config.GPIO_PinNumber =  GPIO_PIN_NUM_14;
 8000b44:	230e      	movs	r3, #14
 8000b46:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fbe2 	bl	8000318 <GPIO_Init>
	//NSS
	SPIPins.GPIO_Config.GPIO_PinNumber =  GPIO_PIN_NUM_12;
 8000b54:	230c      	movs	r3, #12
 8000b56:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fbda 	bl	8000318 <GPIO_Init>

	/*
	 * Configuring the SPI peripheral
	 */
	SPI_Handle_t SPICh2;
	SPICh2.pSPIx = SPI2;
 8000b64:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <main+0x258>)
 8000b66:	60fb      	str	r3, [r7, #12]
	SPICh2.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	727b      	strb	r3, [r7, #9]
	SPICh2.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	723b      	strb	r3, [r7, #8]
	//SPICh2.SPIConfig.SPI_SSM = SPI_SSM_DI;
	SPICh2.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_SLAVE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	713b      	strb	r3, [r7, #4]
	SPICh2.SPIConfig.SPI_DFF = SPI_DEF_8BITS;
 8000b74:	2300      	movs	r3, #0
 8000b76:	71fb      	strb	r3, [r7, #7]
	SPICh2.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	717b      	strb	r3, [r7, #5]
	//SPICh2.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;
	SPI_Init(&SPICh2);
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fe3c 	bl	80007fc <SPI_Init>

	SPI_SSOEConfig(SPI2, ENABLE);
 8000b84:	2101      	movs	r1, #1
 8000b86:	4841      	ldr	r0, [pc, #260]	; (8000c8c <main+0x258>)
 8000b88:	f7ff ff38 	bl	80009fc <SPI_SSOEConfig>
	//printf("Initialization done!\n");
	uint8_t RxMes;
	uint8_t PotBool=0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	70bb      	strb	r3, [r7, #2]
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_NUM_6, !SigMas);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2106      	movs	r1, #6
 8000b94:	483a      	ldr	r0, [pc, #232]	; (8000c80 <main+0x24c>)
 8000b96:	f7ff fd83 	bl	80006a0 <GPIO_WriteToOutputPin>
	while(1){

		SPI_PeripheralControl(SPI2, ENABLE);
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	483b      	ldr	r0, [pc, #236]	; (8000c8c <main+0x258>)
 8000b9e:	f7ff fe88 	bl	80008b2 <SPI_PeripheralControl>
		while(~(SPI2->SPI_SR) & 1<<SPI_SR_RXNE){
 8000ba2:	e009      	b.n	8000bb8 <main+0x184>
			GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_NUM_6, SigMas);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2106      	movs	r1, #6
 8000ba8:	4835      	ldr	r0, [pc, #212]	; (8000c80 <main+0x24c>)
 8000baa:	f7ff fd79 	bl	80006a0 <GPIO_WriteToOutputPin>
			GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_NUM_6, !SigMas);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2106      	movs	r1, #6
 8000bb2:	4833      	ldr	r0, [pc, #204]	; (8000c80 <main+0x24c>)
 8000bb4:	f7ff fd74 	bl	80006a0 <GPIO_WriteToOutputPin>
		while(~(SPI2->SPI_SR) & 1<<SPI_SR_RXNE){
 8000bb8:	4b34      	ldr	r3, [pc, #208]	; (8000c8c <main+0x258>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d101      	bne.n	8000bc8 <main+0x194>
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e000      	b.n	8000bca <main+0x196>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1ea      	bne.n	8000ba4 <main+0x170>
		}
		SPI_ReceiveData(SPI2, &RxMes, 1);
 8000bce:	1cfb      	adds	r3, r7, #3
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	482d      	ldr	r0, [pc, #180]	; (8000c8c <main+0x258>)
 8000bd6:	f7ff fec9 	bl	800096c <SPI_ReceiveData>
		if(RxMes==CMD_LED_ON){
 8000bda:	78fb      	ldrb	r3, [r7, #3]
 8000bdc:	2b50      	cmp	r3, #80	; 0x50
 8000bde:	d10d      	bne.n	8000bfc <main+0x1c8>
			GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NUM_6, LED_ON);
 8000be0:	2201      	movs	r2, #1
 8000be2:	2106      	movs	r1, #6
 8000be4:	4827      	ldr	r0, [pc, #156]	; (8000c84 <main+0x250>)
 8000be6:	f7ff fd5b 	bl	80006a0 <GPIO_WriteToOutputPin>
			PotBool=(uint8_t)0xff;
 8000bea:	23ff      	movs	r3, #255	; 0xff
 8000bec:	70bb      	strb	r3, [r7, #2]
			SPI_SendData(SPI2, &PotBool, 1);
 8000bee:	1cbb      	adds	r3, r7, #2
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4825      	ldr	r0, [pc, #148]	; (8000c8c <main+0x258>)
 8000bf6:	f7ff fe78 	bl	80008ea <SPI_SendData>
 8000bfa:	e02d      	b.n	8000c58 <main+0x224>
			//printf("LED ON\n");
		} else if(RxMes==CMD_LED_OFF){
 8000bfc:	78fb      	ldrb	r3, [r7, #3]
 8000bfe:	2b52      	cmp	r3, #82	; 0x52
 8000c00:	d10d      	bne.n	8000c1e <main+0x1ea>
			GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NUM_6, LED_OFF);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2106      	movs	r1, #6
 8000c06:	481f      	ldr	r0, [pc, #124]	; (8000c84 <main+0x250>)
 8000c08:	f7ff fd4a 	bl	80006a0 <GPIO_WriteToOutputPin>
			PotBool=(uint8_t)0xef;
 8000c0c:	23ef      	movs	r3, #239	; 0xef
 8000c0e:	70bb      	strb	r3, [r7, #2]
			SPI_SendData(SPI2, &PotBool, 1);
 8000c10:	1cbb      	adds	r3, r7, #2
 8000c12:	2201      	movs	r2, #1
 8000c14:	4619      	mov	r1, r3
 8000c16:	481d      	ldr	r0, [pc, #116]	; (8000c8c <main+0x258>)
 8000c18:	f7ff fe67 	bl	80008ea <SPI_SendData>
 8000c1c:	e01c      	b.n	8000c58 <main+0x224>
			//printf("LED OFF\n");
		} else if(RxMes==CMD_BUT_READ){
 8000c1e:	78fb      	ldrb	r3, [r7, #3]
 8000c20:	2b51      	cmp	r3, #81	; 0x51
 8000c22:	d111      	bne.n	8000c48 <main+0x214>
			PotBool = (uint8_t)(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NUM_8)*12);
 8000c24:	2108      	movs	r1, #8
 8000c26:	4816      	ldr	r0, [pc, #88]	; (8000c80 <main+0x24c>)
 8000c28:	f7ff fd24 	bl	8000674 <GPIO_ReadFromInputPin>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	0052      	lsls	r2, r2, #1
 8000c32:	4413      	add	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	70bb      	strb	r3, [r7, #2]
			//PotBool=(uint8_t)0x7F;
			SPI_SendData(SPI2, &PotBool, 1);
 8000c3a:	1cbb      	adds	r3, r7, #2
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4812      	ldr	r0, [pc, #72]	; (8000c8c <main+0x258>)
 8000c42:	f7ff fe52 	bl	80008ea <SPI_SendData>
 8000c46:	e007      	b.n	8000c58 <main+0x224>
			//printf("Button Read\n");
		} else {
			PotBool=(uint8_t)0x1F;
 8000c48:	231f      	movs	r3, #31
 8000c4a:	70bb      	strb	r3, [r7, #2]
			SPI_SendData(SPI2, &PotBool, 1);
 8000c4c:	1cbb      	adds	r3, r7, #2
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4619      	mov	r1, r3
 8000c52:	480e      	ldr	r0, [pc, #56]	; (8000c8c <main+0x258>)
 8000c54:	f7ff fe49 	bl	80008ea <SPI_SendData>
			//printf("Dummy Read\n");
		}
		//printf("Rx Message: %x\n",RxMes);
		//GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_NUM_6, !SigMas);
		//while(SPI2->SPI_SR & (1<<SPI_SR_BSY));
		while((SPI2->SPI_SR) & 1<<SPI_SR_RXNE);
 8000c58:	bf00      	nop
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <main+0x258>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1f9      	bne.n	8000c5a <main+0x226>
		while((SPI2->SPI_SR) & 1<<SPI_SR_TXE);
 8000c66:	bf00      	nop
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <main+0x258>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1f9      	bne.n	8000c68 <main+0x234>
		SPI_PeripheralControl(SPI2, DISABLE);
 8000c74:	2100      	movs	r1, #0
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <main+0x258>)
 8000c78:	f7ff fe1b 	bl	80008b2 <SPI_PeripheralControl>
		SPI_PeripheralControl(SPI2, ENABLE);
 8000c7c:	e78d      	b.n	8000b9a <main+0x166>
 8000c7e:	bf00      	nop
 8000c80:	40020800 	.word	0x40020800
 8000c84:	40020000 	.word	0x40020000
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40003800 	.word	0x40003800

08000c90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c94:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	; (8000cd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <LoopForever+0xe>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	; (8000cdc <LoopForever+0x16>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cbe:	f000 f811 	bl	8000ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cc2:	f7ff feb7 	bl	8000a34 <main>

08000cc6 <LoopForever>:

LoopForever:
  b LoopForever
 8000cc6:	e7fe      	b.n	8000cc6 <LoopForever>
  ldr   r0, =_estack
 8000cc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000cd4:	08000d4c 	.word	0x08000d4c
  ldr r2, =_sbss
 8000cd8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000cdc:	2000001c 	.word	0x2000001c

08000ce0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC_IRQHandler>
	...

08000ce4 <__libc_init_array>:
 8000ce4:	b570      	push	{r4, r5, r6, lr}
 8000ce6:	4d0d      	ldr	r5, [pc, #52]	; (8000d1c <__libc_init_array+0x38>)
 8000ce8:	4c0d      	ldr	r4, [pc, #52]	; (8000d20 <__libc_init_array+0x3c>)
 8000cea:	1b64      	subs	r4, r4, r5
 8000cec:	10a4      	asrs	r4, r4, #2
 8000cee:	2600      	movs	r6, #0
 8000cf0:	42a6      	cmp	r6, r4
 8000cf2:	d109      	bne.n	8000d08 <__libc_init_array+0x24>
 8000cf4:	4d0b      	ldr	r5, [pc, #44]	; (8000d24 <__libc_init_array+0x40>)
 8000cf6:	4c0c      	ldr	r4, [pc, #48]	; (8000d28 <__libc_init_array+0x44>)
 8000cf8:	f000 f818 	bl	8000d2c <_init>
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	10a4      	asrs	r4, r4, #2
 8000d00:	2600      	movs	r6, #0
 8000d02:	42a6      	cmp	r6, r4
 8000d04:	d105      	bne.n	8000d12 <__libc_init_array+0x2e>
 8000d06:	bd70      	pop	{r4, r5, r6, pc}
 8000d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d0c:	4798      	blx	r3
 8000d0e:	3601      	adds	r6, #1
 8000d10:	e7ee      	b.n	8000cf0 <__libc_init_array+0xc>
 8000d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d16:	4798      	blx	r3
 8000d18:	3601      	adds	r6, #1
 8000d1a:	e7f2      	b.n	8000d02 <__libc_init_array+0x1e>
 8000d1c:	08000d44 	.word	0x08000d44
 8000d20:	08000d44 	.word	0x08000d44
 8000d24:	08000d44 	.word	0x08000d44
 8000d28:	08000d48 	.word	0x08000d48

08000d2c <_init>:
 8000d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2e:	bf00      	nop
 8000d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d32:	bc08      	pop	{r3}
 8000d34:	469e      	mov	lr, r3
 8000d36:	4770      	bx	lr

08000d38 <_fini>:
 8000d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3a:	bf00      	nop
 8000d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3e:	bc08      	pop	{r3}
 8000d40:	469e      	mov	lr, r3
 8000d42:	4770      	bx	lr
